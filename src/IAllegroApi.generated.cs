// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

#nullable enable
namespace JadeX.AllegroAPI
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.9.8.0")]
    public partial interface IAllegroAPI
    {
        /// <summary>Create offer based on product</summary>
        /// <remarks>Use this resource to create offer based on product. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-wystawic-oferte-z-produktem-za-pomoca-zasobu-sale-product-offers" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-list-an-offer-with-a-product-via-sale-product-offers-resource" target="_blank">EN</a>. Note that requests may be limited.</remarks>
        /// <returns>Offer created successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden - not allowed to access.
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/product-offers")]
        Task<SaleProductOfferResponseV1> CreateProductOffers([Body] SaleProductOfferRequestV1 body);

        /// <summary>Edit an offer</summary>
        /// <remarks>Use this resource to edit offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-pojedynczej-oferty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-single-offer" target="_blank">EN</a>. Note that requests may be limited.</remarks>
        /// <param name="offerId">The offer identifier.</param>
        /// <returns>Offer edited successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden - not allowed to access.
        /// 404: Not Found. Offer not found.
        /// 409: Conflict. The current state of the offer does not allow to perform the request (e.g. The previous edition of the offer is still being processed).
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Patch("/sale/product-offers/{offerId}")]
        Task<SaleProductOfferResponseV1> EditProductOffers(string offerId, [Body] SaleProductOfferPatchRequestV1 body);

        /// <summary>Get all data of the particular product-offer</summary>
        /// <remarks>Use this resource to retrieve all data of the particular product-offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/product-offers/{offerId}")]
        Task<SaleProductOfferResponseV1> GetProductOffer(string offerId);

        /// <summary>Check the processing status of a POST or PATCH request</summary>
        /// <remarks>The URI for the resource given by Location header of POST /sale/product-offers and PATCH /sale/product-offers/{offerId}. Use this resource to check processing status of a POST or PATCH request. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="operationId">Operation identifier provided in location header of POST or PATCH request.</param>
        /// <returns>The request processing has not been completed.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 303: The processing of product-offer has been completed. The Location header provide information about the location of processed resource.
        /// 400: Syntactically incorrect request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/product-offers/{offerId}/operations/{operationId}")]
        Task GetProductOfferProcessingStatus(string offerId, string operationId);

        /// <summary>Get seller's offers</summary>
        /// <remarks>Use this resource to get the list of the seller's offers. You can use different query parameters to filter the list. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-moje-oferty-w-rest-api" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#list-of-offers" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="name">The text to search in the offer title.</param>
        /// <param name="sellingMode_price_amount_gte">
        /// The lower threshold of price.
        /// 
        /// If additionally a `publication.marketplace` is provided, searches using the price on the given marketplace.
        /// </param>
        /// <param name="sellingMode_price_amount_lte">
        /// The upper threshold of price.
        /// 
        /// If additionally a `publication.marketplace` is provided, searches using the price on the given marketplace.
        /// </param>
        /// <param name="publication_status">The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: `publication.status=INACTIVE&publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.</param>
        /// <param name="publication_marketplace">
        /// Either the base marketplace or an additional marketplace of the offer.
        /// 
        /// When passing the parameter `publication.marketplace`, searches for offers with the given marketplace as either its base marketplace or one of its additional marketplaces. When the parameter is omitted, searches for offers with all marketplaces.
        /// 
        /// In addition to searching, passing the parameter also influences the functionality of other query parameter by searching and sorting by data (e.g. price) on the given marketplace.
        /// </param>
        /// <param name="sellingMode_format">The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: `sellingMode.format=BUY_NOW&sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.</param>
        /// <param name="external_id">The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: `external.id=1233&external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.</param>
        /// <param name="delivery_shippingRates_id">The ID of shipping rates. Returns offers with given shipping rates ID.</param>
        /// <param name="delivery_shippingRates_id_empty">Allows to filter offers by existence of shipping rates ID.</param>
        /// <param name="sort">
        /// The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by offer creation time, descending.
        /// 
        /// If additionally a `publication.marketplace` is provided, sorts by price and `stock.sold` using the data on the given marketplace.
        /// </param>
        /// <param name="limit">The maximum number of offers returned in the response.</param>
        /// <param name="offset">Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000.</param>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="product_id_empty">Allows to filter offers by existence of product ID.</param>
        /// <param name="productizationRequired">Allows to search for offers from categories where productization is required.</param>
        /// <param name="b2b_buyableOnlyByBusiness">Allows to search for offers buyable only by businesses.</param>
        /// <param name="fundraisingCampaign_id">ID of the charity fundraising campaign that benefits from this offer.</param>
        /// <param name="fundraisingCampaign_id_empty">Allows to search for charity or commercial offers.</param>
        /// <returns>The list of offers returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: The request query parameters are invalid.
        /// 403: The user has no rights to query offers or provided token is invalid.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers")]
        Task<OffersSearchResultDto> SearchOffersUsingGET([Query, AliasAs("offer.id")] string? offer_id = default, [Query] string? name = default, [Query, AliasAs("sellingMode.price.amount.gte")] double? sellingMode_price_amount_gte = default, [Query, AliasAs("sellingMode.price.amount.lte")] double? sellingMode_price_amount_lte = default, [Query(CollectionFormat.Multi), AliasAs("publication.status")] IEnumerable<Anonymous>? publication_status = default, [Query, AliasAs("publication.marketplace")] string? publication_marketplace = default, [Query(CollectionFormat.Multi), AliasAs("sellingMode.format")] IEnumerable<Anonymous2>? sellingMode_format = default, [Query(CollectionFormat.Multi), AliasAs("external.id")] IEnumerable<string>? external_id = default, [Query, AliasAs("delivery.shippingRates.id")] System.Guid? delivery_shippingRates_id = default, [Query, AliasAs("delivery.shippingRates.id.empty")] bool? delivery_shippingRates_id_empty = default, [Query] Sort? sort = default, [Query] int? limit = default, [Query] int? offset = default, [Query, AliasAs("category.id")] string? category_id = default, [Query, AliasAs("product.id.empty")] bool? product_id_empty = default, [Query] bool? productizationRequired = default, [Query, AliasAs("b2b.buyableOnlyByBusiness")] bool? b2b_buyableOnlyByBusiness = default, [Query, AliasAs("fundraisingCampaign.id")] System.Guid? fundraisingCampaign_id = default, [Query, AliasAs("fundraisingCampaign.id.empty")] bool? fundraisingCampaign_id_empty = default);

        /// <summary>Delete a draft offer</summary>
        /// <remarks>Use this resource to delete a draft offer. Read more: <a href="https://developer.allegro.pl/news/nowy-zasob-do-usuwania-draftow-ofert-aMDnGka2RuL" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resource-draft-delete-yPy9lq6myh0" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Delete("/sale/offers/{offerId}")]
        Task DeleteOfferUsingDELETE(string offerId);

        /// <summary>Modify the Buy Now price in an offer</summary>
        /// <remarks>Use this resource to change the Buy Now price in a single offer. Read more: <a href="https://developer.allegro.pl/news/mozliwosc-zmiany-ceny-kup-teraz-2YzrKRrr3Sl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/possibility-to-change-the-buy-it-now-price-q018mq8D2hW" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer identifier.</param>
        /// <param name="commandId">The unique command id generated by you.</param>
        /// <returns>The command was created successfully and is queued for processing.</returns>
        /// <throws cref="ApiException">Thrown when the request returns a non-success status code.</throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/offers/{offerId}/change-price-commands/{commandId}")]
        Task<ChangePrice> CreateChangePriceCommandUsingPUT(string offerId, System.Guid commandId, [Body] ChangePriceWithoutOutput body);

        /// <summary>Get offer translations</summary>
        /// <remarks>Get offer translation for given language or all present. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-ofert" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#offer-translations" target="_blank">EN</a>.</remarks>
        /// <param name="language">Language for translation to retrieve. If not provided, all translations as well as base content for offer will be returned.</param>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>The list of offer translations returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/{offerId}/translations")]
        Task<OfferTranslations> GetOfferTranslationUsingGET(string offerId, [Query] string? language = default);

        /// <summary>Update offer translation</summary>
        /// <remarks>Update manual translation for offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-ofert" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#offer-translations" target="_blank">EN</a>.</remarks>
        /// <param name="language">Language of the provided translation.</param>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">Request with manual translation for offer, must contain at least one translated offer element (title or description).</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Patch("/sale/offers/{offerId}/translations/{language}")]
        Task UpdateOfferTranslationUsingPATCH(string language, string offerId, [Body] ManualTranslationUpdateRequest body);

        /// <summary>Delete offer translation</summary>
        /// <remarks>Delete single element or entire manual translation. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-ofert" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#offer-translations" target="_blank">EN</a>.</remarks>
        /// <param name="language">Language of the translation to delete.</param>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="element">Offer element for which translation should be deleted. If not provided, translations for all elements will be deleted.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Delete("/sale/offers/{offerId}/translations/{language}")]
        Task DeleteManualTranslationUsingDELETE(string language, string offerId, [Query] Element? element = default);

        /// <summary>Get the seller's advertisements daily statistics</summary>
        /// <remarks>This endpoint returns daily statistics collected for a list of advertisements in a given date range for logged user. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wszystkich-ogloszen-sprzedawcy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-seller-s-classified-ads" target="_blank">EN</a>.</remarks>
        /// <param name="date_gte">The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months.</param>
        /// <param name="date_lte">The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months.</param>
        /// <returns>Returns offer's statistics list</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/classified-seller-stats")]
        Task<SellerOfferStatsResponseDto> ClassifiedSellerOfferStatsGET([Query, AliasAs("date.gte")] System.DateTimeOffset? date_gte = default, [Query, AliasAs("date.lte")] System.DateTimeOffset? date_lte = default);

        /// <summary>Get the advertisements daily statistics</summary>
        /// <remarks>This endpoint returns daily statistics collected for a list of advertisements in a given date range. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wybranych-ogloszen" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-selected-classified-ads" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">List of offer Ids, maximum 50 values.</param>
        /// <param name="date_gte">The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months.</param>
        /// <param name="date_lte">The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months.</param>
        /// <returns>Returns offer's statistics list</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/classified-offers-stats")]
        Task<OfferStatsResponseDto> ClassifiedOffersStatsGET([Query(CollectionFormat.Multi), AliasAs("offer.id")] IEnumerable<string> offer_id, [Query, AliasAs("date.gte")] System.DateTimeOffset? date_gte = default, [Query, AliasAs("date.lte")] System.DateTimeOffset? date_lte = default);

        /// <summary>Batch offer publish / unpublish</summary>
        /// <remarks>Use this resource to modify multiple offers publication at once. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication" target="_blank">EN</a>. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">publicationChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Semantically incorrect request or provided conditions not correct
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 409: Command id was already used
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-publication-commands/{commandId}")]
        Task<GeneralReport> ChangePublicationStatusUsingPUT(string commandId, [Body] PublicationChangeCommandDto body);

        /// <summary>Publish command summary</summary>
        /// <remarks>Use this resource to retrieve information about the offer listing statuses. You will receive a summary with a number of correctly listed offers and errors. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zestawienie-zadan" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#task-list" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>Report was generated and successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-publication-commands/{commandId}")]
        Task<GeneralReport> GetPublicationReportUsingGET(string commandId);

        /// <summary>Publish command detailed report</summary>
        /// <remarks>Use this resource to retrieve information about the offer statuses on the site (Defaults: limit = 100, offset = 0). Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#informacje-o-publikacji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#information-about-publication" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-publication-commands/{commandId}/tasks")]
        Task<TaskReport> GetPublicationTasksUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Get classified packages assigned to an offer</summary>
        /// <remarks>Use this resource to retrieve classified packages currently assigned to an offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer ID.</param>
        /// <returns>Packages returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Classified not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-classifieds-packages/{offerId}")]
        Task<ClassifiedResponse> GetClassifiedPackagesUsingGET(string offerId);

        /// <summary>Assign packages to a classified</summary>
        /// <remarks>Use this resource to assign classified packages to an offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer ID.</param>
        /// <param name="body">Packages that should be assigned to the classified.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Classified not found
        /// 422: Validation error
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-classifieds-packages/{offerId}")]
        Task AssignClassifiedPackagesUsingPUT(string offerId, [Body] ClassifiedPackages body);

        /// <summary>Get configurations of packages</summary>
        /// <remarks>Use this resource to retrieve configurations of classifieds packages for a category. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options" target="_blank">EN</a>.</remarks>
        /// <param name="category_id">The category ID.</param>
        /// <returns>Package configurations for the category returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/classifieds-packages")]
        Task<ClassifiedPackageConfigs> GetClassifiedPackageConfigurationsForCategoryUsingGET([Query, AliasAs("category.id")] string category_id);

        /// <summary>Get the configuration of a package</summary>
        /// <remarks>Use this resource to retrieve the configuration of a classifieds package. Read more: <a href="https://developer.allegro.pl/tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options" target="_blank">EN</a>.</remarks>
        /// <param name="packageId">The classifieds package ID.</param>
        /// <returns>The package's configuration returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 404: The classifieds package not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/classifieds-packages/{packageId}")]
        Task<ClassifiedPackageConfig> GetClassifiedPackageConfigurationUsingGET(string packageId);

        /// <summary>Get any user's ratings summary</summary>
        /// <remarks>Use this resource to receive feedback statistics. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-ktorymi-pobierzesz-informacje-o-ocenach-ZM9L1WPBbUb" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-to-download-sales-feedback-d2VYERBMRiz" target="_blank">EN</a>.</remarks>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Feedback statistics returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: User with the given ID not found or user is not a seller.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/users/{userId}/ratings-summary")]
        Task<UserRatingSummaryResponse> GetUserSummaryUsingGET(string userId);

        /// <summary>Get the user's ratings</summary>
        /// <remarks>Use this resource to receive your sales ratings sorted by last change date, starting from the latest. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data" target="_blank">EN</a>.</remarks>
        /// <param name="recommended">Filter by recommended.</param>
        /// <param name="lastChangedAt_gte">Last change (creation or latest edition) date time in ISO 8601 format. The lower bound of date time range from which ratings will be fetched.</param>
        /// <param name="lastChangedAt_lte">Last change (creation or latest edition) date time in ISO 8601 format. The upper bound of date time range from which ratings will be fetched.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/user-ratings")]
        Task<UserRatingListResponse> GetUserRatingsUsingGET([Query] Recommended? recommended = default, [Query, AliasAs("lastChangedAt.gte")] System.DateTimeOffset? lastChangedAt_gte = default, [Query, AliasAs("lastChangedAt.lte")] System.DateTimeOffset? lastChangedAt_lte = default, [Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Answer for user's rating</summary>
        /// <remarks>Use this resource to answer for received rating. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-odpowiedz-na-ocene" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-answer-for-user-rating" target="_blank">EN</a>.</remarks>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/user-ratings/{ratingId}/answer")]
        Task<Answer> AnswerUserRatingUsingPUT(string ratingId, [Body] object? body = default);

        /// <summary>Request removal of user's rating</summary>
        /// <remarks>Use this resource to request removal of received rating. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-wyslac-prosbe-o-usuniecie-oceny" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-send-a-request-to-remove-user-rating" target="_blank">EN</a>.</remarks>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/user-ratings/{ratingId}/removal")]
        Task<Removal> UserRatingRemovalUsingPUT(string ratingId, [Body] object? body = default);

        /// <summary>Get basic information about user</summary>
        /// <remarks>Use this resource when you need basic information about authenticated user. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#informacje-o-uzytkowniku" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#information-about-user" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden - when token is without user context
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/me")]
        Task<MeResponse> MeGET();

        /// <summary>Create additional services group</summary>
        /// <remarks>Use this resource to create a group of additional services. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-nowa-grupe-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-a-new-additional-service-group" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-additional-services/groups")]
        Task<AdditionalServicesGroupResponse> CreateAdditionalServicesGroupUsingPOST([Body] object? body = default);

        /// <summary>Get the user's additional services groups</summary>
        /// <remarks>Use this resource to retrieve a list of groups with additional services available to a given user which you may assign to offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-liste-grup-uslug-dodatkowych-na-koncie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-a-list-of-additional-services-groups-for-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-additional-services/groups")]
        Task<AdditionalServicesGroups> GetListOfAdditionalServicesGroupsUsingGET([Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Create a new promotion</summary>
        /// <remarks>
        /// This endpoint creates a new promotion. You can create promotions only if your base marketplace is `allegro-pl`. Created promotions are visible only on the `allegro-pl` marketplace. You can define the following types of promotions:
        /// 1. Large order discount <br> Only company users will see and be eligible for this type of promotion. In order to create a large order discount, you also have to be a company user. Furthermore, you are allowed to have only one active order discount at a time. Define a promotion with a single benefit of type **LARGE_ORDER_DISCOUNT** and a single criterion of type **ALL_OFFERS**. The benefit specification should contain a list of order value based discount thresholds. Threshold's order value defines the minimum total value of an order for which the threshold is applicable (`lowerBound`). Threshold's discount defines the discount percentage applied when the threshold is applied. The percentage's fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total value of the order. A threshold with a higher order value than another threshold in the order discount must also have a higher discount. Large order discount is assigned automatically to all seller's offers. Moreover, it will be assigned to all newly added seller's offers once activated. Please note that it may take some time to propagate this type of promotion to all of your offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-large-order-discount" target="_blank">EN</a>.
        /// 2. Wholesale price list <br> Only company users will see and be eligible for this type of promotion. In order to create a wholesale price list, you also have to be a company user. Define a promotion with a single benefit of type **WHOLESALE_PRICE_LIST** and a single criterion of type **OFFERS_ASSIGNED_EXTERNALLY**. The benefit specification should contain a name (it will be visible to you only) and a list of quantity based discount thresholds. Threshold's quantity defines the minimum number of units of an offer for which the threshold is applicable (`lowerBound`). Threshold's discount defines the discount percentage applied when the threshold is applied. The percentage's fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total price of units of the offer bought. A threshold with a higher quantity than another threshold in the price list must also have a higher discount. In order to assign offers to a wholesale price list, use `discounts` field in <a href="#operation/modificationCommandUsingPUT">batch offer modification</a>. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-cennik-hurtowy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-wholesale-price-list" target="_blank">EN</a>.
        /// 3. Bundle <br> In order to create a new bundle, you have to define a
        /// promotion with a single benefit of type **ORDER_FIXED_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. In the benefit specification you have to declare the discount amount that you want to be deducted from the sum of bundled offers prices. In the offer criterion you need to pass a list of offers that are to be grouped as a bundle. For each offer you have to define a fixed quantity (that many pieces of your offer will be part of the bundle) and you also have to set a promotionEntryPoint flag (offers with this flag set to true will have a section that allows the users to purchase your bundle). Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-promocyjny-zestaw" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-promotional-set-of-offers" target="_blank">EN</a>
        /// 
        /// 4. Multipack <br> In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat-ilosciowy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-quantitative-discount" target="_blank">EN</a>
        /// 5. Cross-offer multipack <br> A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can pick and choose forEachQuantity offers and the cheapest of them gets a discount.
        /// </remarks>
        /// <returns>Successfully created the requested promotion</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized action
        /// 403: Forbidden action
        /// 404: Offer/Offers not found
        /// 412: Validation failed \u2013 request had correct syntax, but promotion properties exceeds acceptable limits
        /// 422: Validation failed \u2013 request had correct syntax, but violated validation rules
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/loyalty/promotions")]
        Task<SellerRebateDto> CreatePromotionUsingPOST1([Body] SellerCreateRebateRequestDto body);

        /// <summary>Get the user's list of promotions</summary>
        /// <remarks>
        /// <p>Get a list of promotions defined by the authorized user.</p>
        /// <p>Restrictions:</p> <p>Sum of limit and offset must be equal to or lower than 50000. Limit must be equal to or lower than 5000.</p> <p>Example:</p> <p>offset = 49950 and limit = 50 will return promotions</p> <p>offset = 49950 and limit = 51 will return 422 http error</p> <p>offset = 0 and limit = 5000 will return promotions</p> <p>offset = 0 and limit = 5001 will return 422 http error</p>
        /// <p>Read more about: Large order discount <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-large-order-discount" target="_blank">EN</a>, Wholesale price list <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-cenniki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-wholesale-price-lists" target="_blank">EN</a>, Bundles and Multipack <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty-ilosciowe" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-promotional-sets" target="_blank">EN</a>.</p>
        /// </remarks>
        /// <param name="limit">Limit of promotions per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promotions are returned.</param>
        /// <param name="offer_id">Filter by offer id. No promotions with `OFFERS_ASSIGNED_EXTERNALLY` or `ALL_OFFERS` criteria will be returned if this parameter is present.</param>
        /// <param name="promotionType">Filter by promotion type.</param>
        /// <returns>Successfully returned the requested list of promotions</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized action
        /// 422: Restrictions were not satisfied
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/loyalty/promotions")]
        Task<SellerRebatesDto> ListSellerPromotionsUsingGET1([Query] int? limit = default, [Query] int? offset = default, [Query, AliasAs("offer.id")] string? offer_id = default, [Query] PromotionType? promotionType = default);

        /// <summary>Get a promotion data by id</summary>
        /// <remarks>Use this resource to returns the requested promotion. You need to use its unique id. Read more about: Large order discount <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-large-order-discount" target="_blank">EN</a>, Wholesale price list <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-cenniku" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-wholesale-price-list" target="_blank">EN</a>, Bundles <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-promocyjnym-zestawie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-a-promotional-set-of-offers" target="_blank">EN</a>, Multipack <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie-ilosciowym" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#information-about-an-quantitative-discount" target="_blank">EN</a>.</remarks>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully returned the requested promotion</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized action
        /// 404: Promotion not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/loyalty/promotions/{promotionId}")]
        Task<SellerRebateDto> GetPromotionUsingGET(string promotionId);

        /// <summary>Modify a promotion</summary>
        /// <remarks>Use this resource to update a promotion by its unique id. It supports editing bundle's discount, wholesale price lists and large order discounts. Amount of the discount in a bundle can be edited, but cannot change the offers a bundle consists of. Read more about: Bundles <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-promocyjny-zestaw" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-promotional-set-of-offers" target="_blank">EN</a>, Large order discount <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-progi-rabatowe" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-discount-thresholds" target="_blank">EN</a>, Wholesale price list <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-cennik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-wholesale-price-list" target="_blank">EN</a>.</remarks>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully updated the requested promotion</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized action
        /// 403: Forbidden action
        /// 404: Promotion not found
        /// 422: Validation failed \u2013 request had correct syntax, but violated validation rules
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/loyalty/promotions/{promotionId}")]
        Task<SellerRebateDto> UpdatePromotionUsingPUT(string promotionId, [Body] SellerCreateRebateRequestDto body);

        /// <summary>Deactivate a promotion by id</summary>
        /// <remarks>Use this resource to deactivate the requested promotion. You need to use its unique id. Read more about: Large order discount <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-large-order-discount" target="_blank">EN</a>, Wholesale price list <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-cennik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-wholesale-price-list" target="_blank">EN</a>, Bundles <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-promocyjny-zestaw" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-a-promotional-set-of-offers" target="_blank">EN</a>, Multipack <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat-ilosciowy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-an-quantitative-discount" target="_blank">EN</a>.</remarks>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized action
        /// 404: Promotion not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, */*")]
        [Delete("/sale/loyalty/promotions/{promotionId}")]
        Task DeactivatePromotionUsingDELETE(string promotionId);

        /// <summary>Get the user's promotion campaigns</summary>
        /// <remarks>Use this resource to retrieve promotion campaigns. You can find promotion campaign by promotion id. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-kampanii" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-promotional-campaigns" target="_blank">EN</a>.</remarks>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Active or suspended promotion campaigns returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Promotion campaign not found
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/loyalty/promotion-campaigns")]
        Task<PromotionCampaignsResponseDto> GetPromotionCampaignsUsingGET([Query, AliasAs("promotion.id")] string? promotion_id = default, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Delete a campaign in a promotion</summary>
        /// <remarks>Use this resource to delete campaign from promotion by promotion id and campaign id. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-kampanie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-a-promotional-campaign" target="_blank">EN</a>.</remarks>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="campaign_id">The campaign unique id.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Promotion not found
        /// 422: Campaign cannot be deleted
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: */*")]
        [Delete("/sale/loyalty/promotion-campaigns")]
        Task DeleteCampaignFromPromotionUsingDELETE([Query, AliasAs("promotion.id")] string promotion_id, [Query, AliasAs("campaign.id")] string campaign_id);

        /// <summary>Get an application for promotion campaign</summary>
        /// <remarks>Use this resource to retrieve promotion campaign application. You need to use its unique id. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#sprawdz-status-wniosku" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#check-application-status" target="_blank">EN</a>.</remarks>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Successfully returned promotion campaign application</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 303: Promotion campaign application verified and accepted
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Promotion campaign application not found
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/loyalty/promotion-campaign-applications/{applicationId}")]
        Task<object> GetPromotionCampaignApplicationUsingGET(string applicationId);

        /// <summary>Delete an application for promotion campaign</summary>
        /// <remarks>Use this resource to delete promotion campaign application by application id. You need to use its unique id. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-wniosek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#delete-an-application" target="_blank">EN</a>.</remarks>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Promotion campaign application not found
        /// 422: Promotion campaign application cannot be deleted
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: */*")]
        [Delete("/sale/loyalty/promotion-campaign-applications/{applicationId}")]
        Task DeletePromotionCampaignApplicationUsingDELETE(string applicationId);

        /// <summary>Calculate fee and commission for an offer</summary>
        /// <remarks>Provides information about fee and commission for an offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#kalkulator-oplat" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-check-the-fees-3An6Wame3Um#fee-calculator" target="_blank">EN</a>.</remarks>
        /// <returns>Fee calculated successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/pricing/offer-fee-preview")]
        Task<FeePreviewResponse> CalculateFeePreviewUsingPOST([Body] PublicOfferPreviewRequest body);

        /// <summary>Batch offer modification</summary>
        /// <remarks>Use this resource to modify multiple offers at once. Read more: <a href="https://developer.allegro.pl/news/grupowa-edycja-ofert-poszerzamy-mozliwosci-zasobu-lLAyEaqE7fE" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/bulk-editing-of-offers-new-features-0A2lDegElHd" target="_blank">EN</a>. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Semantically incorrect request or provided conditions not correct
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 409: Command id was already used
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-modification-commands/{commandId}")]
        Task<GeneralReport> ModificationCommandUsingPUT(string commandId, [Body] OfferChangeCommand body);

        /// <summary>Modification command summary</summary>
        /// <remarks>Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers. Read more: <a href="https://developer.allegro.pl/news/grupowa-edycja-ofert-poszerzamy-mozliwosci-zasobu-lLAyEaqE7fE" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/bulk-editing-of-offers-new-features-0A2lDegElHd" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-modification-commands/{commandId}")]
        Task<GeneralReport> GetGeneralReportUsingGET(string commandId);

        /// <summary>Modification command detailed report</summary>
        /// <remarks>Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults: limit = 100, offset = 0). Read more: <a href="https://developer.allegro.pl/news/grupowa-edycja-ofert-poszerzamy-mozliwosci-zasobu-lLAyEaqE7fE" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/bulk-editing-of-offers-new-features-0A2lDegElHd" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-modification-commands/{commandId}/tasks")]
        Task<TaskReport> GetTasksUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Batch offer price modification</summary>
        /// <remarks>Change price of offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price" target="_blank">EN</a>. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerPriceChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Semantically incorrect request or provided conditions not correct
        /// 401: Unauthorized
        /// 409: Command id was already used
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-price-change-commands/{commandId}")]
        Task<GeneralReport> PriceModificationCommandUsingPUT(string commandId, [Body] OfferPriceChangeCommand body);

        /// <summary>Change price command summary</summary>
        /// <remarks>Returns status and summary of particular command execution. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Command not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-price-change-commands/{commandId}")]
        Task<GeneralReport> GetPriceModificationCommandStatusUsingGET(string commandId);

        /// <summary>Change price command detailed report</summary>
        /// <remarks>Defaults: limit = 100, offset = 0. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Command not found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-price-change-commands/{commandId}/tasks")]
        Task<TaskReport> GetPriceModificationCommandTasksStatusesUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Batch offer quantity modification</summary>
        /// <remarks>Change quantity of multiple offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity" target="_blank">EN</a>. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerQuantityChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Semantically incorrect request or provided conditions not correct
        /// 401: Unauthorized
        /// 409: Command id was already used
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-quantity-change-commands/{commandId}")]
        Task<GeneralReport> QuantityModificationCommandUsingPUT(string commandId, [Body] OfferQuantityChangeCommand body);

        /// <summary>Change quantity command summary</summary>
        /// <remarks>Returns status and summary of the command. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>Report was generated and successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Command not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-quantity-change-commands/{commandId}")]
        Task<GeneralReport> GetQuantityModificationCommandStatusUsingGET(string commandId);

        /// <summary>Change quantity command detailed report</summary>
        /// <remarks>Defaults: limit = 100, offset = 0. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity" target="_blank">EN</a>. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Command not found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-quantity-change-commands/{commandId}/tasks")]
        Task<TaskReport> GetQuantityModificationCommandTasksStatusesUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Batch offer price automation rules modification</summary>
        /// <remarks>Use this resource to modify the price automation rules of multiple offers at the same time. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.</remarks>
        /// <param name="body">OfferPriceAutomationCommand</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Semantically incorrect request or provided conditions not correct
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 409: Command id was already used
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-price-automation-commands")]
        Task<GeneralReport> OfferPriceAutomationModificationCommandUsingPOST([Body] OfferPriceAutomationCommand body);

        /// <summary>Price automation command summary</summary>
        /// <remarks>Returns status and summary of the offer-price-automation-command. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-price-automation-commands/{commandId}")]
        Task<GeneralReport> GetofferPriceAutomationModificationCommandStatusUsingGET(string commandId);

        /// <summary>Price automation command detailed report</summary>
        /// <remarks>Defaults: limit = 100, offset = 0. Returns status and report of the offer-price-automation-command. This resource is rate limited to retrieving information about 270 000 offer changes per minute.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Command not found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-price-automation-commands/{commandId}/tasks")]
        Task<TaskReport> GetofferPriceAutomationModificationCommandTasksStatusesUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Get price automation rules</summary>
        /// <remarks>Use this resource to get price automation rules. This resource is rate limited to 5 requests per second.</remarks>
        /// <returns>The list of price automation rules returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/price-automation/rules")]
        Task<Rules> GetPriceAutomationRulesUsingGET();

        /// <summary>Get price automation rules assigned to the offer</summary>
        /// <remarks>Use this resource to get price automation rules for offer. This resource is rate limited to 5 requests per second.</remarks>
        /// <param name="offerId">The offer identifier.</param>
        /// <returns>The list of price automation rules assigned to offer returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/price-automation/offers/{offerId}/rules")]
        Task<OfferRules> GetPriceAutomationRulesForOfferUsingGET(string offerId);

        /// <summary>Get IDs of Allegro categories</summary>
        /// <remarks>Use this resource to traverse the Allegro categories tree. It returns the list of the given category's children or a list of the main Allegro categories. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#uzupelnij-kategorie-i-parametry" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#provide-category-and-parameters" target="_blank">EN</a>.</remarks>
        /// <param name="parent_id">The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned.</param>
        /// <returns>The list of categories returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: The category with the given ID does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/categories")]
        Task<CategoriesDto> GetCategoriesUsingGET([Query, AliasAs("parent.id")] string? parent_id = default);

        /// <summary>Get a category by ID</summary>
        /// <remarks>Use this resource to get the details of a specific category. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product" target="_blank">EN</a>.</remarks>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The details of a category returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: The category with the given ID does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/categories/{categoryId}")]
        Task<CategoryDto> GetCategoryUsingGET1(string categoryId);

        /// <summary>Get parameters supported by a category</summary>
        /// <remarks>Use this resource to get the list of parameters that are supported by the given category. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#parametry-ofertowe" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-parameters" target="_blank">EN</a>.</remarks>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of parameters for the category returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: The category with the given ID does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/categories/{categoryId}/parameters")]
        Task<CategoryParameterList> GetFlatParametersUsingGET2(string categoryId);

        /// <summary>Get product parameters available in given category</summary>
        /// <remarks>Use this resource to get the list of product parameters available in given category. You can use these parameters to create a new product. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product" target="_blank">EN</a>.</remarks>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of product parameters for the category returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: The category with the given ID does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/categories/{categoryId}/product-parameters")]
        Task<CategoryProductParameterList> GetFlatProductParametersUsingGET(string categoryId);

        /// <summary>Get planned changes in category parameters</summary>
        /// <remarks>
        /// Use this resource to get information about planned changes in category parameters. Please note that in some cases, the returned events may finally not happen in the future.
        /// At present we support the following changes: - REQUIREMENT_CHANGE - the parameter will be required in the category. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-przyszle-zmiany-w-parametrach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-future-changes-in-parameters" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="scheduledFor_gte">The minimum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date.</param>
        /// <param name="scheduledFor_lte">The maximum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date.</param>
        /// <param name="scheduledAt_gte">The minimum date and time at which the change was scheduled in ISO 8601 format.</param>
        /// <param name="scheduledAt_lte">The maximum date and time at which the change was scheduled in ISO 8601 format.</param>
        /// <param name="type">The types of changes that will be returned in the response. All types of changes are returned by default.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>Category parameters changes returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid parameters supplied in the request.
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/category-parameters-scheduled-changes")]
        Task<CategoryParametersScheduledChangesResponse> GetCategoryParametersScheduledChangesUsingGET1([Query, AliasAs("scheduledFor.gte")] System.DateTimeOffset? scheduledFor_gte = default, [Query, AliasAs("scheduledFor.lte")] System.DateTimeOffset? scheduledFor_lte = default, [Query, AliasAs("scheduledAt.gte")] System.DateTimeOffset? scheduledAt_gte = default, [Query, AliasAs("scheduledAt.lte")] System.DateTimeOffset? scheduledAt_lte = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous3>? type = default, [Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Get changes in categories</summary>
        /// <remarks>
        /// Use this resource to get information about changes in categories. It returns changes that occurred in the last 3 months.
        /// At present we support the following changes:
        /// - CATEGORY_CREATED - new category was created.
        /// - CATEGORY_RENAMED - category name has been changed.
        /// - CATEGORY_MOVED - category has been moved to a different place in category tree, category parent id field is changed.
        /// - CATEGORY_DELETED - category is no longer available, category from redirectCategory field should be used instead.
        /// 
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zmian-w-kategoriach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-in-categories" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="from">The ID of the last seen event. Changes that occurred after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of category changes returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid parameters supplied in the request.
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/category-events")]
        Task<CategoryEventsResponse> GetCategoryEventsUsingGET1([Query] string? from = default, [Query] int? limit = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous4>? type = default);

        /// <summary>Get the additional services definitions by categories</summary>
        /// <remarks>Use this resource to get additional services definitions, grouped by additional services categories, available on given marketplace. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-zarzadzac-uslugami-dodatkowymi" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-manage-additional-services" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-additional-services/categories")]
        Task<CategoriesResponse> GetListOfAdditionalServicesDefinitionsCategoriesUsingGET();

        /// <summary>Get the user's shipping rates</summary>
        /// <remarks>Use this resource to get a list of seller's shipping rates. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-cennikami-dostawy-aMDnG7zamSX" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-shipping-price-lists-0A2lDe6jGSB" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required
        /// 403: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/shipping-rates")]
        Task<Response> GetListOfShippingRatestUsingGET();

        /// <summary>Create a new shipping rates set</summary>
        /// <remarks>Use this resource to create a new seller's shipping rates set. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-cennikami-dostawy-aMDnG7zamSX" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-shipping-price-lists-0A2lDe6jGSB" target="_blank">EN</a>.</remarks>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Authentication required
        /// 422: The user has reached the limit of shipping rates sets. Information on the limit will be returned in the error message.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/shipping-rates")]
        Task<ShippingRatesSet> CreateShippingRatesSetUsingPOST([Body] ShippingRatesSet body);

        /// <summary>Get the details of a shipping rates set</summary>
        /// <remarks>Use this resource to get details of the given shipping rates set. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-cennikami-dostawy-aMDnG7zamSX" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-shipping-price-lists-0A2lDe6jGSB" target="_blank">EN</a>.</remarks>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required
        /// 403: Unauthorized
        /// 404: Shipping rates set with given ID not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/shipping-rates/{id}")]
        Task<ShippingRatesSet> GetShippingRatesSetUsingGET(string id);

        /// <summary>Edit a user's shipping rates set</summary>
        /// <remarks>Use this resource to edit a new seller's shipping rates set. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-cennikami-dostawy-aMDnG7zamSX" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-shipping-price-lists-0A2lDe6jGSB" target="_blank">EN</a>.</remarks>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Authentication required
        /// 403: Unauthorized
        /// 404: Set with given id does not exist
        /// 422: Unprocessable Entity.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/shipping-rates/{id}")]
        Task<ShippingRatesSet> ModifyShippingRatesSetUsingPUT(string id, [Body] ShippingRatesSet body);

        /// <summary>Get the user's delivery settings</summary>
        /// <remarks>Use this resource to get the delivery settings declared by the seller. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-ustawienia-dostawy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-get-delivery-settings" target="_blank">EN</a>.</remarks>
        /// <param name="marketplace_id">Marketplace for which delivery settings will be returned. By default (if the marketplace parameter is not set) the marketplace on which the seller has registered is used. However, we recommend that the marketplace.id query parameter should always be explicitly set.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required.
        /// 403: Forbidden - not allowed to access user data.
        /// 422: Unprocessable Entity - not supported marketplace.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/delivery-settings")]
        Task<DeliverySettingsResponse> GetSaleDeliverySettings([Query, AliasAs("marketplace.id")] string? marketplace_id = default);

        /// <summary>Modify the user's delivery settings</summary>
        /// <remarks>Use this resource to modify the delivery settings declared by the seller. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-edytowac-ustawienia-dostawy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-edit-delivery-settings" target="_blank">EN</a>.</remarks>
        /// <param name="body">Delivery settings set</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required.
        /// 403: Forbidden - not allowed to access user data.
        /// 422: Unprocessable Entity - wrong amount, wrong currency, wrong join policy strategy, unsupported marketplace.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/delivery-settings")]
        Task<DeliverySettingsResponse> PutSaleDeliverySettings([Body] DeliverySettingsRequest body);

        /// <summary>Create a point of service</summary>
        /// <remarks>Use this resource to create a point of service. Read more: <a href="https://developer.allegro.pl/news/punkty-odbioru-osobistego-8dmlj8qk7ik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/points-of-service-Rdoz09ZE7sW" target="_blank">EN</a>.</remarks>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 409: Conflict - similar Point of Service already exists. Url of the existing POS is provided in the HTTP Location header field of the response.
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/points-of-service")]
        Task<Pos> CreatePOSUsingPOST([Body] object? body = default);

        /// <summary>Get the user's points of service</summary>
        /// <remarks>Use this resource to get a list of points of service by seller ID. Read more: <a href="https://developer.allegro.pl/news/punkty-odbioru-osobistego-8dmlj8qk7ik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/points-of-service-Rdoz09ZE7sW" target="_blank">EN</a>.</remarks>
        /// <param name="seller_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/points-of-service")]
        Task<SearchResult> GetPOSListUsingGET([Query, AliasAs("seller.id")] string seller_id);

        /// <summary>Get the details of a point of service</summary>
        /// <remarks>Use this resource to get a details of a point of service for a given ID. Read more: <a href="https://developer.allegro.pl/news/punkty-odbioru-osobistego-8dmlj8qk7ik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/points-of-service-Rdoz09ZE7sW" target="_blank">EN</a>.</remarks>
        /// <param name="id">Point of service ID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/points-of-service/{id}")]
        Task<Pos> GetPOSDataUsingGET(string id);

        /// <summary>Modify a point of service</summary>
        /// <remarks>Use this resource to modify a point of service. Read more: <a href="https://developer.allegro.pl/news/punkty-odbioru-osobistego-8dmlj8qk7ik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/points-of-service-Rdoz09ZE7sW" target="_blank">EN</a>.</remarks>
        /// <param name="id">Point of service ID. Must match values with 'id' property from the body.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 409: Conflict - similar Point of Service already exists. Url of the existing POS is provided in the HTTP Location header field of the response.
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/points-of-service/{id}")]
        Task<Pos> ModifyPOSUsingPUT(string id, [Body] object? body = default);

        /// <summary>Delete a point of service</summary>
        /// <remarks>Use this resource to delete a point of service. Read more: <a href="https://developer.allegro.pl/news/punkty-odbioru-osobistego-8dmlj8qk7ik" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/points-of-service-Rdoz09ZE7sW" target="_blank">EN</a>.</remarks>
        /// <param name="id">Point of service ID.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Delete("/points-of-service/{id}")]
        Task DeletePOSUsingDELETE(string id);

        /// <summary>Create a new contact</summary>
        /// <remarks>Use this resource to create a new contact. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-utworzyc-nowy-kontakt" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-create-new-contact" target="_blank">EN</a>.</remarks>
        /// <param name="body">New contact</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-contacts")]
        Task<ContactResponse> CreateContactUsingPOST([Body] ContactRequest body);

        /// <summary>Get the user's contacts</summary>
        /// <remarks>Use this resource to get details of many contacts. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-liste-kontaktow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-a-list-of-contacts" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-contacts")]
        Task<ContactResponseList> GetListOfContactsUsingGET();

        /// <summary>Get contact details</summary>
        /// <remarks>Use this resource to get contact details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-szczegoly-danego-kontaktu" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-contact-details" target="_blank">EN</a>.</remarks>
        /// <param name="id">Contact identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-contacts/{id}")]
        Task<ContactResponse> GetContactUsingGET(string id);

        /// <summary>Modify contact details</summary>
        /// <remarks>Use this resource to modify contact details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-zmienic-dane-kontaktu" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-change-contact-data" target="_blank">EN</a>.</remarks>
        /// <param name="id">Contact identifier.</param>
        /// <param name="body">Contact</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-contacts/{id}")]
        Task<ContactResponse> ModifyContactUsingPUT(string id, [Body] ContactRequest body);

        /// <summary>Get the list of responsible persons</summary>
        /// <remarks>Use this resource to get a list of responsible persons for the compliance of the product with EU regulations.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/responsible-persons")]
        Task<Response2> ResponsiblePersonsGET();

        /// <summary>Create responsible person</summary>
        /// <remarks>Use this resource to create a new responsible person for the compliance of the product with EU regulations.</remarks>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/responsible-persons")]
        Task<ResponsiblePersonResponse> ResponsiblePersonsPOST([Body] CreateResponsiblePersonRequest body);

        /// <summary>Update responsible person</summary>
        /// <remarks>Use this resource to update the responsible person for the compliance of the product with EU regulations.</remarks>
        /// <param name="id">Responsible person ID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/responsible-persons/{id}")]
        Task<ResponsiblePersonResponse> ResponsiblePersonsPUT(string id, [Body] UpdateResponsiblePersonRequest body);

        /// <summary>Get the list of delivery methods</summary>
        /// <remarks>Use this resource to get a list of all delivery methods currently available on the platform, as well as those that have already been discontinued. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-cennikami-dostawy-aMDnG7zamSX" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-shipping-price-lists-0A2lDe6jGSB" target="_blank">EN</a>.</remarks>
        /// <param name="marketplace">Allows to filter delivery methods by marketplace id.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/delivery-methods")]
        Task<Response3> GetListOfDeliveryMethodsUsingGET([Query] string? marketplace = default);

        /// <summary>Get the details of an additional services group</summary>
        /// <remarks>Use this resource to get additional services group for a given ID. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-wybrana-grupe-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-a-group-of-additional-services-for-a-given-id" target="_blank">EN</a>.</remarks>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-additional-services/groups/{groupId}")]
        Task<AdditionalServicesGroupResponse> GetAdditionalServicesGroupUsingGET(string groupId);

        /// <summary>Modify an additional services group</summary>
        /// <remarks>Use this resource to modify existing additional service group. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-zaktualizowac-grupe-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-additional-service-group" target="_blank">EN</a>.</remarks>
        /// <param name="groupId">Additional service group ID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-additional-services/groups/{groupId}")]
        Task<AdditionalServicesGroupResponse> ModifyAdditionalServicesGroupUsingPUT(string groupId, [Body] object? body = default);

        /// <summary>Get translations for specified group</summary>
        /// <remarks>Use this resource to get translations for additional service group. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#additional-services-translations" target="_blank">EN</a>.</remarks>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <param name="language">IETF language tag. When provided, the response will contain translations in only that language (if exists).</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-additional-services/groups/{groupId}/translations")]
        Task<AdditionalServiceGroupTranslationResponse> GetAdditionalServiceGroupTranslations(string groupId, [Query] string? language = default);

        /// <summary>Create/Update translations for specified group and language</summary>
        /// <remarks>Use this resource to create/update translation for additional service group and specified language. It is allowed to provide an incomplete list of services that belong to the group. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#additional-services-translations" target="_blank">EN</a>.</remarks>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <param name="language">IETF Language tag.</param>
        /// <param name="body">Additonal service group translation.</param>
        /// <returns>Translation created/updated for group and language.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Patch("/sale/offer-additional-services/groups/{groupId}/translations/{language}")]
        Task<AdditionalServiceGroupTranslationPatchResponse> UpdateAdditionalServiceGroupTranslation(string groupId, string language, [Body] AdditionalServicesGroupTranslationRequest body);

        /// <summary>Delete a translation for a specified group and language</summary>
        /// <remarks>Use this resource to delete the translation for specified additional service group and language. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#tlumaczenia-uslug-dodatkowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#additional-services-translations" target="_blank">EN</a>.</remarks>
        /// <param name="groupId">Additional service group ID.</param>
        /// <param name="language">IETF Language tag.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Additional service group or translation not found
        /// </throws>
        [Delete("/sale/offer-additional-services/groups/{groupId}/translations/{language}")]
        Task DeleteAdditionalServiceGroupTranslation(string groupId, string language);

        /// <summary>Get a size table</summary>
        /// <remarks>Use this resource to get selected size table. Read more: <a href="https://developer.allegro.pl/news/tabele-rozmiarow-w-rest-api-LRV05q2dGtV" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/size-tables-in-rest-api-D7KP4DE1BH3" target="_blank">EN</a>.</remarks>
        /// <param name="tableId">Table identifier.</param>
        /// <returns>Size table returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/size-tables/{tableId}")]
        Task<PublicTableDto> GetTableUsingGET(string tableId);

        /// <summary>Update a size table</summary>
        /// <remarks>Use this resource to update selected size table. Read more: <a href="https://developer.allegro.pl/news/tabele-rozmiarow-zmieniamy-istniejacy-zasob-i-dodajemy-nowe-zasoby-do-ich-obslugi-k1nyd21A4fP" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/size-tables-we-change-the-existing-resource-and-add-new-resources-to-handle-them-jn91bynlbC9" target="_blank">EN</a>.</remarks>
        /// <param name="tableId">Table identifier.</param>
        /// <param name="body">Size table details</param>
        /// <returns>Size table updated successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/size-tables/{tableId}")]
        Task<PublicTableDto> ModifyTableUsingPUT(string tableId, [Body] SizeTablePutRequest body);

        /// <summary>Get the user's size tables</summary>
        /// <remarks>Use this resource to get all size tables assigned to a seller account. Read more: <a href="https://developer.allegro.pl/news/tabele-rozmiarow-w-rest-api-LRV05q2dGtV" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/size-tables-in-rest-api-D7KP4DE1BH3" target="_blank">EN</a>.</remarks>
        /// <returns>Size tables returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/size-tables")]
        Task<PublicTablesDto> GetTablesUsingGET();

        /// <summary>Create a size table</summary>
        /// <remarks>Use this resource to create size table. Read more: <a href="https://developer.allegro.pl/news/tabele-rozmiarow-zmieniamy-istniejacy-zasob-i-dodajemy-nowe-zasoby-do-ich-obslugi-k1nyd21A4fP" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/size-tables-we-change-the-existing-resource-and-add-new-resources-to-handle-them-jn91bynlbC9" target="_blank">EN</a>.</remarks>
        /// <param name="body">Size table details</param>
        /// <returns>Size table created successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/size-tables")]
        Task<PublicTableDto> CreateTableUsingPOST([Body] SizeTablePostRequest body);

        /// <summary>Get the size tables templates</summary>
        /// <remarks>Use this resource to get all size tables templates. Read more: <a href="https://developer.allegro.pl/news/tabele-rozmiarow-zmieniamy-istniejacy-zasob-i-dodajemy-nowe-zasoby-do-ich-obslugi-k1nyd21A4fP" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/size-tables-we-change-the-existing-resource-and-add-new-resources-to-handle-them-jn91bynlbC9" target="_blank">EN</a>.</remarks>
        /// <returns>Size tables templates returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/size-tables-templates")]
        Task<SizeTableTemplatesResponse> GetTablesTemplatesUsingGET();

        /// <summary>Get the user's return policies</summary>
        /// <remarks>Use this resource to get seller return policies listing. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/return-policies")]
        Task<ReturnPoliciesList_ReturnPolicyBasic_> GetPublicSellerListingUsingGET1([Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Create new user's return policy</summary>
        /// <remarks>Use this resource to create a return policy definition. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-zwrotow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-return-policy-information" target="_blank">EN</a>.</remarks>
        /// <param name="body">Return Policy</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/after-sales-service-conditions/return-policies")]
        Task<ReturnPolicyResponse> CreateAfterSalesServiceReturnPolicyUsingPOST([Body] ReturnPolicyRequest body);

        /// <summary>Get the user's return policy</summary>
        /// <remarks>Use this resource to get a return policy details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/return-policies/{returnPolicyId}")]
        Task<ReturnPolicyResponse> GetAfterSalesServiceReturnPolicyUsingGET(string returnPolicyId);

        /// <summary>Change the user's return policy</summary>
        /// <remarks>Use this resource to modify the return policy details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-zwrotu" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-return-policy-information" target="_blank">EN</a>.</remarks>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <param name="body">Return Policy</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/after-sales-service-conditions/return-policies/{returnPolicyId}")]
        Task<ReturnPolicyResponse> UpdateAfterSalesServiceReturnPolicyUsingPUT(string returnPolicyId, [Body] ReturnPolicyRequest body);

        /// <summary>Get the user's implied warranties</summary>
        /// <remarks>Use this resource to get seller implied warranties listing. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/implied-warranties")]
        Task<ImpliedWarrantiesList_ImpliedWarrantyBasic_> GetPublicSellerListingUsingGET([Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Create new user's implied warranty</summary>
        /// <remarks>Use this resource to create an implied warranty definition. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-reklamacji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-implied-warranty-information" target="_blank">EN</a>.</remarks>
        /// <param name="body">Implied warranty</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/after-sales-service-conditions/implied-warranties")]
        Task<ImpliedWarrantyResponse> CreateAfterSalesServiceImpliedWarrantyUsingPOST([Body] ImpliedWarrantyRequest body);

        /// <summary>Get the user's implied warranty</summary>
        /// <remarks>Use this resource to get an implied warranty details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}")]
        Task<ImpliedWarrantyResponse> GetAfterSalesServiceImpliedWarrantyUsingGET(string impliedWarrantyId);

        /// <summary>Change the user's implied warranty</summary>
        /// <remarks>Use this resource to modify the implied warranty details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-reklamacji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-implied-warranty-information" target="_blank">EN</a>.</remarks>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <param name="body">Implied warranty</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}")]
        Task<ImpliedWarrantyResponse> UpdateAfterSalesServiceImpliedWarrantyUsingPUT(string impliedWarrantyId, [Body] ImpliedWarrantyRequest body);

        /// <summary>Get the user's warranties</summary>
        /// <remarks>Use this resource to get seller warranties listing. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/warranties")]
        Task<WarrantiesList_WarrantyBasic_> GetPublicSellerListingUsingGET2([Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Create new user's warranty</summary>
        /// <remarks>Use this resource to create a warranty definition. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-gwarancjach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-warranty-information" target="_blank">EN</a>.</remarks>
        /// <param name="body">Warranty</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/after-sales-service-conditions/warranties")]
        Task<WarrantyResponse> CreateAfterSalesServiceWarrantyUsingPOST([Body] WarrantyRequest body);

        /// <summary>Get the user's warranty</summary>
        /// <remarks>Use this resource to get a warranty details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account" target="_blank">EN</a>.</remarks>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/after-sales-service-conditions/warranties/{warrantyId}")]
        Task<WarrantyResponse> GetAfterSalesServiceWarrantyUsingGET(string warrantyId);

        /// <summary>Change the user's warranty</summary>
        /// <remarks>Use this resource to modify the warranty details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-gwarancjach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-warranty-information" target="_blank">EN</a>.</remarks>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <param name="body">Warranty</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/after-sales-service-conditions/warranties/{warrantyId}")]
        Task<WarrantyResponse> UpdateAfterSalesServiceWarrantyUsingPUT(string warrantyId, [Body] WarrantyRequest body);

        /// <summary>Create a warranty attachment metadata</summary>
        /// <remarks>
        /// You can attach PDF files to warranties.
        /// Uploading attachments flow:
        /// 1. Create an attachment object to receive an upload URL (*POST /after-sales-service-conditions/attachments*),
        /// 2. Use the upload URL to submit the PDF file (*PUT /after-sales-service-conditions/attachments/{attachmentId}*),
        /// 3. Create (or update) warranty with attachment (*POST /after-sales-service-conditions/warranties*).
        /// 
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="body">After sale services attachment</param>
        /// <returns>Attachment created successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request.
        /// 401: Invalid or missing bearer token.
        /// 403: Forbidden
        /// 415: Unsupported media type.
        /// 422: Unprocessable Entity.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/after-sales-service-conditions/attachments")]
        Task<AfterSalesServicesAttachment> CreateAfterSalesServiceConditionsAttachmentUsingPOST([Body] Body body);

        /// <summary>Upload an warranty attachment</summary>
        /// <remarks>
        /// Upload an after sale services attachment.
        /// This operation should be used after creating an offer attachment with *POST /sale/offer-attachments*
        /// **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /after-sales-service-conditions/attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request.
        /// 401: Invalid or missing bearer token.
        /// 403: Forbidden
        /// 404: Not found.
        /// 413: Payload too large.
        /// 422: Invalid file content.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/after-sales-service-conditions/attachments/{attachmentId}")]
        Task<AfterSalesServicesAttachment> UploadAfterSalesServiceConditionsAttachmentUsingPUT(string attachmentId,  StreamPart body);

        /// <summary>Get the user's current offer quotes</summary>
        /// <remarks>This endpoint returns current offer quotes (listing and promo fees) cycles for authenticated user and list of offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#data-naliczenia-kolejnej-oplaty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-check-the-fees-3An6Wame3Um#check-when-a-fee-is-charged" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">List of offer Ids, maximum 20 values.</param>
        /// <returns>Returns current offer quotes</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid request.
        /// 401: Full authentication is required to access this resource
        /// 403: Forbidden
        /// 503: Service is currently unavailable. Please try again later.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/pricing/offer-quotes")]
        Task<OfferQuotesDto> OfferQuotesPublicUsingGET([Query(CollectionFormat.Multi), AliasAs("offer.id")] IEnumerable<string> offer_id);

        /// <summary>Create variant set</summary>
        /// <remarks>
        /// Use this resource to create variant set.
        /// 
        /// A valid variant set must consist of three required elements:
        /// - name:
        /// - it can't be blank and must not be longer than 75 characters
        /// - parameters:
        /// - it should contain parameter identifiers used for offer grouping
        /// - parameter identifiers from the offers and special `color/pattern` value (for grouping via image) are permitted
        /// - it must contain at least one element (up to 2)
        /// - offers:
        /// - it must contain at least 2 offers (500 at most)
        /// - `colorPattern` value must be set for every offer if `color/pattern` parameter is used
        /// - `colorPattern` value can't be blank and must not be longer than 50 characters
        /// - `colorPattern` can take arbitrary string value like `red`, `b323592c-522f-4ec1-b9ea-3764538e0ac4` (UUID), etc.
        /// - offers having the same image should have identical `colorPattern` value
        /// - offers must have `publication.marketplaces.base` equal to `allegro-pl`
        /// 
        /// 
        /// Let's assume we have 4 offers:
        /// - offer with id 2 having an image of a red t-shirt and S as a value of parameter with id 21
        /// - offer with id 3 having an image of a red t-shirt and M as a value of parameter with id 21
        /// - offer with id 4 having an image of a blue t-shirt and S as a value of parameter with id 21
        /// - offer with id 5 having an image of a blue t-shirt and M as a value of parameter with id 21
        /// 
        /// 
        /// You can build a variant set by grouping offers using combination of available parameters - examples are available in <i>Request samples</i>.
        /// 
        /// 
        /// More general information about variant sets can be found [here](https://allegro.pl/pomoc/faq/wielowariantowosc-jak-polaczyc-oferty-xGgaOByGgTb#dodatkowe-informacje). Read more: <a href="https://developer.allegro.pl/tutorials/jak-utworzyc-oferte-wielowariantowa-oA6ZYBg5XFo#utworz-oferte-wielowariantowa" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-create-a-multi-variant-offer-nn9DOL3nXs2#create-a-multi-variant-offer" target="_blank">EN</a>.
        /// </remarks>
        /// <returns>Variant set created successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-variants")]
        Task<VariantSetResponse> CreateVariantSet([Body] object? body = default);

        /// <summary>Get the user's variant sets</summary>
        /// <remarks>Use this resource to get created variant sets. The returned variant sets are ordered by name. Read more: <a href="https://developer.allegro.pl/tutorials/jak-utworzyc-oferte-wielowariantowa-oA6ZYBg5XFo#pobierz-liste-ofert-wielowariantowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-create-a-multi-variant-offer-nn9DOL3nXs2#retrieve-a-multi-variant-offer" target="_blank">EN</a>.</remarks>
        /// <param name="offset">Index of first returned variant set.</param>
        /// <param name="limit">Maximum number of returned variant sets.</param>
        /// <param name="query">Filter variant sets by name or offer id.</param>
        /// <returns>Variant sets returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-variants")]
        Task<VariantSets> GetVariantSets([Query] int? offset = default, [Query] int? limit = default, [Query] string? query = default);

        /// <summary>Update variant set</summary>
        /// <remarks>
        /// Use this resource to edit variant set.
        /// 
        /// A valid variant set must consist of three required elements:
        /// - name:
        /// - it can't be blank and must not be longer than 75 characters
        /// - parameters:
        /// - it should contain parameter identifiers used for offer grouping
        /// - parameter identifiers from the offers and special `color/pattern` value (for grouping via image) are permitted
        /// - it must contain at least one element (up to 2)
        /// - offers:
        /// - it must contain at least 2 offers (500 at most)
        /// - `colorPattern` value must be set for every offer if `color/pattern` parameter is used
        /// - `colorPattern` value can't be blank and must not be longer than 50 characters
        /// - `colorPattern` can take arbitrary string value like `red`, `b323592c-522f-4ec1-b9ea-3764538e0ac4` (UUID), etc.
        /// - offers having the same image should have identical `colorPattern` value
        /// - offers must have `publication.marketplaces.base` equal to `allegro-pl`
        /// 
        /// 
        /// Let's assume we have 4 offers:
        /// - offer with id 2 having an image of a red t-shirt and S as a value of parameter with id 21
        /// - offer with id 3 having an image of a red t-shirt and M as a value of parameter with id 21
        /// - offer with id 4 having an image of a blue t-shirt and S as a value of parameter with id 21
        /// - offer with id 5 having an image of a blue t-shirt and M as a value of parameter with id 21
        /// 
        /// 
        /// You can build a variant set by grouping offers using combination of available parameters - examples are available in <i>Request samples</i>.
        /// 
        /// 
        /// More general information about variant sets can be found [here](https://allegro.pl/pomoc/faq/wielowariantowosc-jak-polaczyc-oferty-xGgaOByGgTb#dodatkowe-informacje). Read more: <a href="https://developer.allegro.pl/tutorials/jak-utworzyc-oferte-wielowariantowa-oA6ZYBg5XFo#edytuj-oferte-wielowariantowa" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-create-a-multi-variant-offer-nn9DOL3nXs2#update-a-multi-variant-offer" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set updated successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-variants/{setId}")]
        Task<VariantSetResponse> UpdateVariantSet(string setId, [Body] object? body = default);

        /// <summary>Get a variant set</summary>
        /// <remarks>Use this resource to get variant set by set id. Read more: <a href="https://developer.allegro.pl/tutorials/jak-utworzyc-oferte-wielowariantowa-oA6ZYBg5XFo#edytuj-oferte-wielowariantowa" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-create-a-multi-variant-offer-nn9DOL3nXs2#update-a-multi-variant-offer" target="_blank">EN</a>.</remarks>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-variants/{setId}")]
        Task<VariantSetResponse> GetVariantSet(string setId);

        /// <summary>Delete a variant set</summary>
        /// <remarks>Use this resource to delete variant set by id. Offers included in variant set will not be stopped or modified by this operation. Read more: <a href="https://developer.allegro.pl/tutorials/jak-utworzyc-oferte-wielowariantowa-oA6ZYBg5XFo#usun-oferte-wielowariantowa" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-create-a-multi-variant-offer-nn9DOL3nXs2#remove-a-multi-variant-offer" target="_blank">EN</a>.</remarks>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Variant set not found
        /// </throws>
        [Delete("/sale/offer-variants/{setId}")]
        Task DeleteVariantSet(string setId);

        /// <summary>Upload an offer image</summary>
        /// <remarks>
        /// Upload image to our servers.
        /// You can choose from two upload options:
        /// * \- provide a link and we will download an image for you
        /// * \- send an image as binary data
        /// 
        /// **Important!** Remember to use dedicated domain for upload, i.e.
        /// * \- https://upload.allegro.pl for Production
        /// * \- https://upload.allegro.pl.allegrosandbox.pl for Sandbox
        /// 
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zdjecia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#images" target="_blank">EN</a>.
        /// More information about rules for photos in an offer's gallery and description you will find <a href="https://allegro.pl/dla-sprzedajacych/nowe-zasady-dla-zdjec-w-galerii-i-w-opisie-YLlAAa2oXf7" target="_blank">here</a>.
        /// </remarks>
        /// <returns>Image uploaded correctly</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Invalid or missing bearer token
        /// 403: Authorization problem
        /// 413: Image is too big
        /// 415: Unsupported media type
        /// 422: Unprocessable entity (problem with image server)
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/images")]
        Task<OfferImageUploadResponse> UploadOfferImageUsingPOST([Body] object? body = default);

        /// <summary>Create an offer attachment</summary>
        /// <remarks>
        /// You can attach pdf, jpeg or png files to your offers. We will present them under the offer description in the Additional information section.
        /// You can attach up to 9 files to one offer – one per each type from the list:
        /// * Guide (MANUAL). Allowed media types: PDF
        /// * Special offer terms (SPECIAL_OFFER_RULES). Allowed media types: PDF
        /// * Competition terms (COMPETITION_RULES). Allowed media types: PDF
        /// * Book excerpt (BOOK_EXCERPT). Allowed media types: PDF
        /// * Manual (USER_MANUAL). Allowed media types: PDF
        /// * Installation manual (INSTALLATION_INSTRUCTIONS). Allowed media types: PDF
        /// * Game manual (GAME_INSTRUCTIONS). Allowed media types: PDF
        /// * Energy label (ENERGY_LABEL). Allowed media types: JPEG, JPG, PNG
        /// * Product information sheet (PRODUCT_INFORMATION_SHEET). Allowed media types: PDF
        /// * Tire label (TIRE_LABEL). Allowed media types: JPEG, JPG, PNG
        /// * Safety information manual (SAFETY_INFORMATION_MANUAL). Allowed media types: PDF
        /// 
        /// Uploading attachments flow:
        /// 1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),
        /// 2. Use the upload URL to submit the file (*PUT /sale/offer-attachments/{attachmentId}*),
        /// 3. Add attachments to the offer (*PUT /sale/offers/{offerId}*).
        /// 
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments" target="_blank">EN</a>.
        /// </remarks>
        /// <returns>Attachment created successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Invalid or missing bearer token
        /// 415: Unsupported media type
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-attachments")]
        Task<OfferAttachment> CreateOfferAttachmentUsingPOST([Body] object? body = default);

        /// <summary>Upload an offer attachment</summary>
        /// <remarks>
        /// Upload an offer attachment.
        /// This operation should be used after creating an offer attachment with *POST /sale/offer-attachments*
        /// **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Invalid or missing bearer token
        /// 415: Unsupported media type
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-attachments/{attachmentId}")]
        Task<OfferAttachment> UploadOfferAttachmentUsingPUT(System.Guid attachmentId,  StreamPart body);

        /// <summary>Search offers</summary>
        /// <remarks>
        /// <a href="https://developer.allegro.pl/listing/" target="_blank">Access for verified applications only</a>. Use this resource to get a list of offers based on the provided query parameters. At least one of: phrase, seller.id or category.id is required. Additional available parameters vary depending on category.id. The parameters are defined in the filters entity.
        /// Changing the marketplace, country of delivery, currency or language may impact the availability of offers and filters. Note that requests for closed offers and searching by descriptions may be limited.
        /// 
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-wyszukiwac-przegladac-oferty-ZM9YAKAwgfk" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-search-and-browse-offers-XxWm2ykMYHl" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="phrase">The search phrase. The phrase is searched in different fields of the offers depending on the value of the `searchMode` parameter.</param>
        /// <param name="seller_id">The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given.</param>
        /// <param name="seller_login">The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given.</param>
        /// <param name="marketplaceId">
        /// Id of a marketplace where offers are visible.
        /// *Acceptable values* : `allegro-pl`, `allegro-cz`, `allegro-sk`.
        /// </param>
        /// <param name="shipping_country">
        /// Limits the result to offers with specified delivery country.
        /// *Default value* : depends on marketplace, for allegro-pl: `PL`, for allegro-cz: `CZ`, for allegro-sk: `SK`.
        /// Check endpoint GET /marketplaces for acceptable values.
        /// </param>
        /// <param name="currency">
        /// Currency of the offer prices.
        /// *Default value* : depends on marketplace, for allegro-pl: `PLN`, for allegro-cz: `CZK`, for allegro-sk: `EUR`.
        /// Check endpoint GET /marketplaces for acceptable currency values.
        /// </param>
        /// <param name="accept_Language">
        /// Limits offers to the only translated to specified language. Also expected language of messages.
        /// *Default value* : depends on marketplace, for allegro-pl: `pl-PL`, for allegro-cz: `cs-CZ`, for allegro-sk: `sk-SK`.
        /// Check endpoint GET /marketplaces for acceptable language values.
        /// </param>
        /// <param name="searchMode">
        /// Defines where the given phrase should be searched in. Allowed values:
        /// 
        /// - *REGULAR* - searching for a phrase in the title,
        /// - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
        /// - *CLOSED* - searching for a phrase in the title of closed offers. Available only for `allegro-pl` marketplace.
        /// </param>
        /// <param name="offset">Index of the first returned offer from all search results. Max offset is `600 - <limit>`.</param>
        /// <param name="limit">The maximum number of offers in a response.</param>
        /// <param name="sort">Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means descending order.</param>
        /// <param name="include">
        /// Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use `-` prefix to exclude an entity.
        /// Example:
        /// `include=-all&include=filters&include=sort` - returns only filters and sort entities.
        /// </param>
        /// <param name="fallback">
        /// Defines the behaviour of the search engine when no results with exact phrase match are found:
        /// 
        /// - *true* - related (not exact) results are returned,
        /// - *false* - empty results are returned.
        /// </param>
        /// <param name="dynamic_filters">
        /// You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        /// ````
        /// {
        /// "id": "parameter.11323",
        /// "type": "MULTI",
        /// "name": "Stan",
        /// "values": [{
        /// "value": "11323_1",
        /// "name": "nowe",
        /// "count": 21,
        /// "selected": false
        /// },
        /// {
        /// "value": "11323_2",
        /// "name": "używane",
        /// "count": 157,
        /// "selected": false
        /// },
        /// {
        /// "value": "11323_238066",
        /// "name": "po zwrocie",
        /// "count": 1,
        /// "selected": false
        /// }
        /// ]
        /// }
        /// ````
        /// You can use 'Stan' filter to query results, i.e.:
        /// * `parameter.11323=11323_1` for "nowe"
        /// * `parameter.11323=11323_2` for "używane"
        /// * `parameter.11323=11323_238066` for "po zwrocie".
        /// </param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request. Check if all necessary parameters are provided.
        /// 403: Access is denied. Application verification required. Read more: <a href=\"../../listing/\" target=\"_blank\">PL</a> / <a href=\"../../en/listing/\" target=\"_blank\">EN</a>
        /// 404: Given category was not found. Check category.id parameter.
        /// 422: One of parameters have invalid value or given parameters combination is forbidden.
        /// 429: Request was rejected because the limit was exceeded.
        /// 500: Internal service error.
        /// 502: Error caused by upstream service failure.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/offers/listing")]
        Task<ListingResponse> GetListing([Query, AliasAs("category.id")] string? category_id = default, [Query] string? phrase = default, [Query, AliasAs("seller.id")] string? seller_id = default, [Query, AliasAs("seller.login")] string? seller_login = default, [Query] string? marketplaceId = default, [Query, AliasAs("shipping.country")] string? shipping_country = default, [Query] string? currency = default, [Query] SearchMode? searchMode = default, [Query] int? offset = default, [Query] int? limit = default, [Query] Sort2? sort = default, [Query] string? include = default, [Query] bool? fallback = default, [Query, AliasAs("Dynamic filters")] IDictionary<string, string>? dynamic_filters = default, [Header("Accept-Language")] string? accept_Language = default);

        /// <summary>Get order events</summary>
        /// <remarks>Use this resource to return events that allow you to monitor actions which clients perform, i.e. making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#dziennik-zdarzen" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#event-log" target="_blank">EN</a>.</remarks>
        /// <param name="from">You can use the event ID to retrieve subsequent chunks of events.</param>
        /// <param name="type">
        /// Specify array of event types for filtering. Allowed values are:
        /// * `BOUGHT`: purchase without checkout form filled in
        /// * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
        /// * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
        /// * `BUYER_CANCELLED`: purchase was cancelled by buyer
        /// * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed
        /// * `AUTO_CANCELLED`: purchase was cancelled automatically by Allegro.
        /// </param>
        /// <param name="limit">The maximum number of events returned in the response.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity - Returned when query parameters are incorrect.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/events")]
        Task<OrderEventsList> GetOrderEventsUsingGET([Query] string? from = default, [Query(CollectionFormat.Multi)] IEnumerable<string>? type = default, [Query] int? limit = default);

        /// <summary>Get order events statistics</summary>
        /// <remarks>Use this resource to returns object that contains event id and occurrence date of the latest event. It gives you current starting point for reading events. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-znalezc-najnowsze-zdarzenie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-find-the-newest-event" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/event-stats")]
        Task<OrderEventStats> GetOrderEventsStatisticsUsingGET();

        /// <summary>Get the user's orders</summary>
        /// <remarks>Use this resource to get an order list. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#lista-zamowien" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#order-list" target="_blank">EN</a>.</remarks>
        /// <param name="offset">Index of first returned checkout-form from all search results.</param>
        /// <param name="limit">Maximum number of checkout-forms in response.</param>
        /// <param name="status">
        /// Specify status value that checkout-forms must have to be included in the output. Allowed values are:
        /// * `BOUGHT`: purchase without checkout form filled in.
        /// * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
        /// * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
        /// * `CANCELLED`: purchase cancelled by buyer.
        /// </param>
        /// <param name="fulfillment_status">
        /// Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:
        /// * `NEW`
        /// * `PROCESSING`
        /// * `READY_FOR_SHIPMENT`
        /// * `READY_FOR_PICKUP`
        /// * `SENT`
        /// * `PICKED_UP`
        /// * `CANCELLED`
        /// * `SUSPENDED`.
        /// </param>
        /// <param name="fulfillment_shipmentSummary_lineItemsSent">
        /// Specify filter for line items sending status. Allowed values are:
        /// * `NONE`: none of line items have tracking number specified
        /// * `SOME`: some of line items have tracking number specified
        /// * `ALL`: all of line items have tracking number specified.
        /// </param>
        /// <param name="lineItems_boughtAt_lte">Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="lineItems_boughtAt_gte">Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="payment_id">Find checkout-forms having specified payment id.</param>
        /// <param name="surcharges_id">Find checkout-forms having specified surcharge id.</param>
        /// <param name="delivery_method_id">Find checkout-forms having specified delivery method id.</param>
        /// <param name="buyer_login">Find checkout-forms having specified buyer login.</param>
        /// <param name="marketplace_id">Find checkout-forms of orders purchased on specified marketplace</param>
        /// <param name="updatedAt_lte">Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="updatedAt_gte">Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request - Returned when request parameters contains illegal values.\n
        /// 401: Unauthorized
        /// 422: Unprocessable Entity - Returned when limit or offset value is outside an acceptable range\n
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/checkout-forms")]
        Task<CheckoutForms> GetListOfOrdersUsingGET([Query] int? offset = default, [Query] int? limit = default, [Query] string? status = default, [Query, AliasAs("fulfillment.status")] string? fulfillment_status = default, [Query, AliasAs("fulfillment.shipmentSummary.lineItemsSent")] string? fulfillment_shipmentSummary_lineItemsSent = default, [Query, AliasAs("lineItems.boughtAt.lte")] System.DateTimeOffset? lineItems_boughtAt_lte = default, [Query, AliasAs("lineItems.boughtAt.gte")] System.DateTimeOffset? lineItems_boughtAt_gte = default, [Query, AliasAs("payment.id")] string? payment_id = default, [Query, AliasAs("surcharges.id")] string? surcharges_id = default, [Query, AliasAs("delivery.method.id")] string? delivery_method_id = default, [Query, AliasAs("buyer.login")] string? buyer_login = default, [Query, AliasAs("marketplace.id")] string? marketplace_id = default, [Query, AliasAs("updatedAt.lte")] System.DateTimeOffset? updatedAt_lte = default, [Query, AliasAs("updatedAt.gte")] System.DateTimeOffset? updatedAt_gte = default, [Query] Sort3? sort = default);

        /// <summary>Get an order's details</summary>
        /// <remarks>Use this resource to get an order details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#szczegoly-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#order-details" target="_blank">EN</a>.</remarks>
        /// <param name="id">Checkout form identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// 422: Unprocessable Entity - Returned when order id is malformed UUID.\n
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/checkout-forms/{id}")]
        Task<CheckoutForm> GetOrdersDetailsUsingGET(System.Guid id);

        /// <summary>Get a list of available shipping carriers</summary>
        /// <remarks>
        /// Shipping carriers are essential to provide accurate tracking experience for customers. Use this resource to get a list of all available shipping carriers.
        /// 
        /// The response of this resource can be stored in accordance with returned caching headers. Read more: <a href="https://developer.allegro.pl/news/nowy-zasob-do-pobrania-identyfikatorow-przewoznikow-8dmljjGRGUE" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resource-to-retrieve-available-delivery-company-id-VL6zDDdr4hk" target="_blank">EN</a>.
        /// </remarks>
        /// <returns>List of available shipping carriers.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/carriers")]
        Task<OrdersShippingCarriersResponse> GetOrdersCarriersUsingGET();

        /// <summary>Get a list of parcel tracking numbers</summary>
        /// <remarks>Get a list of parcel tracking numbers currently assigned to the order. Orders can be retrieved using REST API resource GET /order/checkout-forms. Please note that the shipment list may contain parcel tracking numbers added through other channels such as Moje Allegro or by the carrier that delivers the parcel. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-numery-przesylek-dodane-do-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#retrieving-tracking-numbers" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <returns>Returns a list of parcel tracking numbers (shipments)</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication failed, e.g. token is expired
        /// 404: Order not found or doesn\u2019t belong to the seller
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/checkout-forms/{id}/shipments")]
        Task<CheckoutFormOrderWaybillResponse> GetOrderShipmentsUsingGET(string id);

        /// <summary>Add a parcel tracking number</summary>
        /// <remarks>Add a parcel tracking number (shipment) to given order line items. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-numer-przesylki-do-przedmiotu-w-zamowieniu" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#add-tracking-number-to-order" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>The request is OK and the parcel tracking number will be assigned to the order</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long, invalid tracking number structure)
        /// 401: Authentication failed, e.g. token is expired
        /// 404: Order not found or doesn\u2019t belong to the seller
        /// 409: Maximum waybill usage exceeded (e.g. used in too many orders)
        /// 422: Some of the provided data is invalid, e.g. line item doesn\u2019t belong to the order
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/order/checkout-forms/{id}/shipments")]
        Task<CheckoutFormAddWaybillCreated> CreateOrderShipmentsUsingPOST(string id, [Body] CheckoutFormAddWaybillRequest body);

        /// <summary>Set seller order status</summary>
        /// <remarks>Use to set seller order status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#zmiana-statusu-realizacji-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#order-fulfillment-status-change" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <param name="checkoutForm_revision">Checkout form revision.</param>
        /// <param name="body">request</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication failed, e.g. token is expired
        /// 404: Order not found or doesn\u2019t belong to the seller
        /// 409: Conflict. Provided revision is outdated.
        /// 422: Some of the provided data is invalid, e.g. unrecognized status value
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/order/checkout-forms/{id}/fulfillment")]
        Task SetOrderFulfillmentUsingPUT(string id, [Body] CheckoutFormFulfillment body, [Query, AliasAs("checkoutForm.revision")] string? checkoutForm_revision = default);

        /// <summary>Get order invoices details</summary>
        /// <remarks>Use to get invoices details including antivirus scan results and EPT invoice verification status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-informacje-o-fakturach-dodanych-do-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#retrieve-information-about-invoices" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <returns>Invoices fetched successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 403: You do not have permission to access this order
        /// 404: Order with given id does not exist
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/checkout-forms/{id}/invoices")]
        Task<CheckoutFormsOrderInvoices> GetOrderInvoicesDetails(string id);

        /// <summary>Post new invoice</summary>
        /// <remarks>Use to add new invoice metadata. Before you send an invoice file, you need to initialize the invoice instance with the required parameters. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Invoice created successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 403: You do not have permission to access this order
        /// 404: Order with given id does not exist
        /// 409: Order with given id already has seller invoice
        /// 422: Some of the provided data is invalid or order does not allow an invoice or order\'s payment is rejected or previously uploaded file is still in scanning.
        /// 429: You\'re trying to add another metadata too fast. Upload a file to previously added metadata or wait a few seconds before adding next metadata.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/order/checkout-forms/{id}/invoices")]
        Task<CheckFormsNewOrderInvoiceId> AddOrderInvoicesMetadata(string id, [Body] CheckFormsNewOrderInvoice body);

        /// <summary>Upload invoice file</summary>
        /// <remarks>Use to upload invoice file to match created invoice metadata. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order" target="_blank">EN</a>.</remarks>
        /// <param name="id">Order identifier.</param>
        /// <param name="invoiceId">Invoice identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 403: You do not have permission to access this order
        /// 404: Order or invoice with given id does not exist
        /// 409: Invoice with given id already has invoice file uploaded
        /// 413: The file is too large. Max file size is 3MB
        /// 422: Uploaded file is empty or order\'s payment is rejected
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/order/checkout-forms/{id}/invoices/{invoiceId}/file")]
        Task UploadOrderInvoiceFile(string id, string invoiceId,  StreamPart body);

        /// <summary>Get Allegro pickup drop off points</summary>
        /// <remarks>Get a list of Allegro pickup drop off points. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-punktow-allegro" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-list-of-allegro-pickup-drop-off-points" target="_blank">EN</a>.</remarks>
        /// <param name="carriers">List of carrier ids to filter the drop off/pick up points to only the ones where any of the listed carriers operate. In case of an empty list, all points are returned.</param>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Information about date (the same HTTP-date format) of last modified data is available in response - `Last-Modified`.</param>
        /// <returns>Returns a list of Allegro pickup drop off points</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 304: Data has not been modified after the date provided in If-Modified-Since header.
        /// 400: Bad request. Invalid query parameters.
        /// 401: Authentication failed, e.g. token is expired
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/carriers/ALLEGRO/points")]
        Task<AllegroPickupDropOffPointsResponse> GetAllegroPickupDropOffPointsGET([Query(CollectionFormat.Multi)] IEnumerable<AllegroCarrier>? carriers = default, [Header("If-Modified-Since")] string? if_Modified_Since = default);

        /// <summary>Get carrier parcel tracking history</summary>
        /// <remarks>Get tracking history for parcels sent via the Ship with Allegro tool using <a href="#operation/getAvailableDeliveryServices" target="_blank">a delivery service</a>. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-historie-statusow-przesylek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcels-statuses-history" target="_blank">EN</a>.</remarks>
        /// <param name="carrierId">Carrier identifier.</param>
        /// <param name="waybill">Waybill number (parcel tracking number). Example: `waybill=AAA0000E5D201&waybill=BBB00000E5D202` - returns parcel tracking history for `AAA0000E5D201` as well as for `BBB00000E5D202`.</param>
        /// <returns>Returns parcel tracking history for given waybills</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request, e.g. unknown carrier id, missing or too many waybills in query parameter
        /// 401: Unauthorized, e.g. token is expired
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/carriers/{carrierId}/tracking")]
        Task<CarrierParcelTrackingResponse> GetParcelTrackingUsingGET(string carrierId, [Query(CollectionFormat.Multi)] IEnumerable<string> waybill);

        /// <summary>Get the user's disputes</summary>
        /// <remarks>Use this resource to get the list of your disputes ordered by descending opened date. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dyskusje-na-koncie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-discussions" target="_blank">EN</a>.</remarks>
        /// <param name="checkoutForm_id">Checkout form identifier.</param>
        /// <param name="limit">The maximum number of disputes in a response.</param>
        /// <param name="offset">Index of first returned dispute.</param>
        /// <param name="status">Filter disputes with given set of statuses.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Not Found
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/disputes")]
        Task<DisputeListResponse> GetListOfDisputesUsingGET([Query, AliasAs("checkoutForm.id")] System.Guid? checkoutForm_id = default, [Query] int? limit = default, [Query] int? offset = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous5>? status = default);

        /// <summary>Get a single dispute</summary>
        /// <remarks>Use this resource to get a single dispute. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#szczegolowe-informacje-o-dyskusji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#information-about-a-particular-discussion" target="_blank">EN</a>.</remarks>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/disputes/{disputeId}")]
        Task<Dispute> GetDisputeUsingGET(System.Guid disputeId);

        /// <summary>Get the messages within a dispute</summary>
        /// <remarks>Use this resource to get the list of messages within dispute. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#wiadomosci-z-dyskusji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-messages-within-a-discussion" target="_blank">EN</a>.</remarks>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <param name="limit">The maximum number of messages within dispute returned in a response.</param>
        /// <param name="offset">Index of first returned message within dispute.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/disputes/{disputeId}/messages")]
        Task<DisputeMessageList> GetMessagesFromDisputeUsingGET(System.Guid disputeId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Add a message to a dispute</summary>
        /// <remarks>Use this resource to post a message in certain dispute. At least one of fields: 'text', 'attachment' has to be present. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#nowa-wiadomosc-w-dyskusji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#add-a-new-message-in-the-discussion" target="_blank">EN</a>.</remarks>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>CREATED</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 409: Dispute is in a state that forbids adding new messages
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/disputes/{disputeId}/messages")]
        Task<DisputeMessage> AddMessageToDisputeUsingPOST(System.Guid disputeId, [Body] object? body = default);

        /// <summary>Create an attachment declaration</summary>
        /// <remarks>Use this resource to post an attachment declaration. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#deklaracja-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-declaration" target="_blank">EN</a>.</remarks>
        /// <returns>CREATED</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/dispute-attachments")]
        Task<DisputeAttachmentId> CreateAnAttachmentUsingPOST([Body] object? body = default);

        /// <summary>Upload a dispute message attachment</summary>
        /// <remarks>
        /// Upload a dispute message attachment.
        /// This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments*
        /// **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dodanie-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#adding-an-attachment" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request
        /// 401: Invalid or missing bearer token
        /// 413: File is too big
        /// 415: Unsupported media type
        /// 422: Unprocessable Entity
        /// </throws>
        [Put("/sale/dispute-attachments/{attachmentId}")]
        Task UploadDisputeAttachmentUsingPUT(System.Guid attachmentId,  StreamPart body);

        /// <summary>Get an attachment</summary>
        /// <remarks>Use this resource to get an attachment. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#pobranie-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-related-to-the-discussion" target="_blank">EN</a>.</remarks>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: */*")]
        [Get("/sale/dispute-attachments/{attachmentId}")]
        Task<FileResponse> GetAttachmentUsingGET(System.Guid attachmentId);

        /// <summary>Create a tag</summary>
        /// <remarks>Use this resource to create a new tag. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>.</remarks>
        /// <param name="body">request</param>
        /// <returns>Successfully created the requested tag</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 422: Validation failed - your request was correct, but the tag could not be created.
        /// 401: Unauthorized action
        /// 403: User is not brandzone user and doesn\'t have tags subscription
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offer-tags")]
        Task<TagId> CreateTagPOST1([Body] TagRequest body);

        /// <summary>Get the user's tags</summary>
        /// <remarks>Use this resource to get a list of tags defined by the specified user (Defaults: limit = 1000, offset = 0). Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>.</remarks>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully returned the requested list of tags</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized action
        /// 403: User is not brandzone user and doesn\'t have tags subscription
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-tags")]
        Task<TagListResponse> ListSellerTagsGET1([Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Delete a tag</summary>
        /// <remarks>Use this resource to delete the tag. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>.</remarks>
        /// <param name="tagId">Tag identifier.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: Tag not found
        /// 401: Unauthorized action
        /// 403: User is not brandzone user and doesn\'t have tags subscription
        /// </throws>
        [Headers("Accept: */*, application/vnd.allegro.public.v1+json")]
        [Delete("/sale/offer-tags/{tagId}")]
        Task DeleteTagUsingDELETE(string tagId);

        /// <summary>Modify a tag</summary>
        /// <remarks>Use this resource to update a tag. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>. This resource is rate limited to 1 million changes per hour.</remarks>
        /// <param name="tagId">Tag identifier.</param>
        /// <param name="body">request</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 422: Validation failed - your request was correct, but the tag could not be updated.
        /// 401: Unauthorized action
        /// 403: User is not brandzone user and doesn\'t have tags subscription
        /// 404: Tag not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offer-tags/{tagId}")]
        Task UpdateTagPUT(string tagId, [Body] TagRequest body);

        /// <summary>Assign tags to an offer</summary>
        /// <remarks>Use this resource to assign a tag to offer. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 403: Forbidden - offer is created by someone else or user is not brandzone user or doesn\'t have tags subscription
        /// 422: Validation failed - your request was correct, but the tag could not be assigned.
        /// 401: Unauthorized action
        /// 404: Offer not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offers/{offerId}/tags")]
        Task AssignTagToOfferPOST(string offerId, [Body] TagIdsRequest body);

        /// <summary>Get tags assigned to an offer</summary>
        /// <remarks>Use this resource to get a list of tags assigned to offer. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned list of assigned tags</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized action
        /// 403: User is not brandzone user and doesn\'t have tags subscription
        /// 404: Not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/{offerId}/tags")]
        Task<TagListResponse> ListAssignedOfferTagsGET(string offerId);

        /// <summary>Get offer rating</summary>
        /// <remarks>Use this resource to get offer rating. Read more: <a href="https://developer.allegro.pl/news/nowy-zasob-do-pobrania-oceny-produktu-q018mmPe0H7" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resource-to-retrieve-product-rating-q018mmPrWUX" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>OK.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 403: Offer access denied.
        /// 404: Offer not found.
        /// 401: Unauthorized action.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/{offerId}/rating")]
        Task<OfferRating> OfferRatingGET(string offerId);

        /// <summary>Get all available offer promotion packages</summary>
        /// <remarks>Use this resource to retrieve all available offer promotion packages. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-dostepne-opcje-promowania" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options" target="_blank">EN</a>.</remarks>
        /// <returns>Offer promotion packages returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offer-promotion-packages")]
        Task<AvailablePromotionPackages> GetAvailableOfferPromotionPackages();

        /// <summary>Modify offer promotion packages</summary>
        /// <remarks>Use this resource to modify offer promotion packages. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-zmienic-opcje-promowania-w-pojedynczej-ofercie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-a-single-offer" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Offer promotion packages modified successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Offer does not belong to seller.
        /// 422: Offer does not exist or unsupported package name or unsupported change type.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/offers/{offerId}/promo-options-modification")]
        Task<OfferPromoOptions> ModifyOfferPromoOptionsUsingPOST(string offerId, [Body] PromoOptionsModifications body);

        /// <summary>Get offer promotion packages</summary>
        /// <remarks>Use this resource to get promotion packages assigned to an offer. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-przypisane-do-oferty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-promo-options-assigned-to-an-offer" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer promotion packages returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Offer does not belong to seller.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/{offerId}/promo-options")]
        Task<OfferPromoOptions> GetOfferPromoOptionsUsingGET(string offerId);

        /// <summary>Get promo options for seller's offers</summary>
        /// <remarks>Use this resource to retrieve promo options for seller offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-dla-wielu-ofert" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options-for-multiple-offers" target="_blank">EN</a>.</remarks>
        /// <param name="limit">Limit of promo options per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promo options are returned.</param>
        /// <returns>Promo options for seller offers successfully returned.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/promo-options")]
        Task<OfferPromoOptionsForSeller> GetPromoOptionsForSellerOffersUsingGET([Query] int? limit = default, [Query] long? offset = default);

        /// <summary>Batch offer promotion package modification</summary>
        /// <remarks>Use this resource to modify promotion packages on multiple offers at once. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command identifier. Must be a UUID.</param>
        /// <returns>Command was registered</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 409: Command id already in use.
        /// 422: Size of batch should be between 1 and 1000 offers or unsupported modification time.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/offers/promo-options-commands/{commandId}")]
        Task<PromoGeneralReport> PromoModificationCommandUsingPUT(string commandId, [Body] object? body = default);

        /// <summary>Modification command summary</summary>
        /// <remarks>Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers and errors. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>Summary successfully returned.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Batch modification command does not belong to seller.
        /// 404: Batch modification command does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/promo-options-commands/{commandId}")]
        Task<PromoGeneralReport> GetPromoModificationCommandResultUsingGET(string commandId);

        /// <summary>Modification command detailed result</summary>
        /// <remarks>Use this resource to retrieve the result of an offer modification command. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-szczegolowy-raport-zadania" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-a-detailed-report-of-your-task" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Report successfully returned.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Batch modification command does not belong to seller.
        /// 404: Batch modification command does not exist.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/promo-options-commands/{commandId}/tasks")]
        Task<PromoModificationReport> GetPromoModificationCommandDetailedResultUsingGET(string commandId, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Get Smart! classification report of the particular offer</summary>
        /// <remarks>Use this resource to get a full Smart! offer classification report of one of your offers. Please keep in mind you have to meet Smart! seller conditions first - for more details, use *GET /sale/smart*. To learn more about Smart! offer requirements, see our knowledge base article: [PL](https://allegro.pl/pomoc/dla-sprzedajacych/informacje-dla-sprzedajacych/co-zrobic-aby-moje-oferty-byly-oznaczone-ikona-allegro-smart-lDkP8VbKncV) / [EN](https://allegro.pl/help/for-sellers/allegro-smart-for-sellers/how-can-i-make-my-offers-be-marked-with-the-allegro-smart-badge-rKD1RV30jFM). Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#klasyfikacja-oferty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#offer-classification" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="marketplaceId">Marketplace for which offer classification report will be returned. If not specified, the result of the offer's base marketplace will be returned.</param>
        /// <returns>Successfully returned offer Smart! classification report</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized action
        /// 403: Offer does not belong to seller
        /// 404: Not Found
        /// 422: Unprocessable entity\n- The offer is being created in our system and we are not able to process it yet. Try again later.\n- Provided marketplaceId is not supported.\n
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/{offerId}/smart")]
        Task<SmartOfferClassificationReport> GetOfferSmartClassificationGET(string offerId, [Query] string? marketplaceId = default);

        /// <summary>Get search products results</summary>
        /// <remarks>Use this resource to get a list of products according to provided parameters. At least ean or phrase parameter is required. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-znalezc-produkt" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-find-a-product" target="_blank">EN</a>. This resource is limited with <a href="https://developer.allegro.pl/tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits" target="_blank">Leaky Bucket</a> mechanism.</remarks>
        /// <param name="ean">The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (`GTIN`) parameters instead.</param>
        /// <param name="phrase">Search phrase.</param>
        /// <param name="mode">
        /// Search mode. If not specified, we are searching by GTIN, MPN, product's name, parameters, etc.
        /// - `GTIN` - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.
        /// - `MPN` - restricts the search filtering to MPNs (Manufacturer Part Number).
        /// </param>
        /// <param name="language">Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: "pl-PL" and "cs-CZ".</param>
        /// <param name="category_id">The category identifier to filter results. This can only be used when searching by phrase.</param>
        /// <param name="dynamic_filters">
        /// You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        /// ````
        /// {
        /// "id": "127448",
        /// "name": "Kolor",
        /// "type": "SINGLE",
        /// "values": [
        /// {
        /// "name": "biały",
        /// "value": "2"
        /// },
        /// {
        /// "name": "czarny",
        /// "value": "1" }
        /// ]
        /// }
        /// ````
        /// You can use 'Kolor' filter to query results, i.e.:
        /// * `127448=2` for "biały"
        /// * `127448=1` for "czarny".
        /// </param>
        /// <param name="page_id">A "cursor" to the next set of results.</param>
        /// <param name="searchFeatures">Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in 'similar categories' (works only if category.id is a leaf category).</param>
        /// <param name="includeDrafts">Include products in draft state.</param>
        /// <returns>Successful operation.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 422: One of parameters have invalid value.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/products")]
        Task<GetSaleProductsResponse> GetSaleProducts([Query] string? ean = default, [Query] string? phrase = default, [Query] Mode? mode = default, [Query] string? language = default, [Query, AliasAs("category.id")] string? category_id = default, [Query, AliasAs("Dynamic filters")] IDictionary<string, string>? dynamic_filters = default, [Query, AliasAs("page.id")] string? page_id = default, [Query] SearchFeatures? searchFeatures = default, [Query] bool? includeDrafts = default);

        /// <summary>Get all data of the particular product</summary>
        /// <remarks>Use this resource to retrieve all data of the particular product. Read more: <a href="https://developer.allegro.pl/tutorials/wystawianie-oferty-z-produktem-new-E7ggykoBEf0#jak-pobrac-pelne-dane-o-produkcie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-retrieve-product-data" target="_blank">EN</a>. This resource is limited with <a href="https://developer.allegro.pl/tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits" target="_blank">Leaky Bucket</a> mechanism.</remarks>
        /// <param name="productId">The product identifier.</param>
        /// <param name="category_id">The similar category identifier. You can choose a category from 'similar categories' to filter the list of parameters available in the category context.</param>
        /// <param name="includeDrafts">Return also if product is in draft state.</param>
        /// <param name="language">The language version of product. You can indicate the language for the returned product data. At present we support: "pl-PL", "cs-CZ", "en-US" and "uk-UA".</param>
        /// <returns>Product returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: A product\'s not found or language version of the product is currently unavailable.
        /// 422: One of parameters have invalid value.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/products/{productId}")]
        Task<SaleProductDto> GetSaleProduct(string productId, [Query, AliasAs("category.id")] string? category_id = default, [Query] bool? includeDrafts = default, [Query] string? language = default);

        /// <summary>Propose a product</summary>
        /// <remarks>Use this resource to propose a product. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product" target="_blank">EN</a>.</remarks>
        /// <returns>Product proposed successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden - not allowed to access.
        /// 409: Product already exists. Url of the existing product is provided in the HTTP Location header field of the response.
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/product-proposals")]
        Task<ProductProposalsResponse> ProposeSaleProduct([Body] ProductProposalsRequest body);

        /// <summary>Propose changes in product</summary>
        /// <remarks>Use this resource to propose changes in product. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product" target="_blank">EN</a>. This resource is limited to 100 suggestions per day for a single user.</remarks>
        /// <param name="productId">The product identifier.</param>
        /// <param name="accept_Language">Expected language of messages.</param>
        /// <returns>Product changes proposed successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request.
        /// 401: Unauthorized.
        /// 404: Product with the given Id not found.
        /// 422: Unprocessable Entity.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/products/{productId}/change-proposals")]
        Task<ProductChangeProposalDto> ProductChangeProposal(string productId, [Body] ProductChangeProposalRequest body, [Header("Accept-Language")] string? accept_Language = default);

        /// <summary>Get all data of the particular product changes proposal</summary>
        /// <remarks>Use this resource to retrieve all data of the particular product changes proposal. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product" target="_blank">EN</a>.</remarks>
        /// <param name="changeProposalId">The product changes proposal identifier.</param>
        /// <param name="accept_Language">Expected language of messages.</param>
        /// <returns>Product changes proposal returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// 403: You do not have permission to access change proposal that not belong to you
        /// 404: Not Found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/products/change-proposals/{changeProposalId}")]
        Task<ProductChangeProposalDto> GetProductChangeProposal(string changeProposalId, [Header("Accept-Language")] string? accept_Language = default);

        /// <summary>Get offers with missing parameters</summary>
        /// <remarks>Use this resource to get information about required parameters or parameters scheduled to become required that are not filled in offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-nieuzupelnione-parametry-w-ofertach" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-unfilled-parameters-in-offers" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">List of offer ids. If empty all offers with unfilled parameters will be returned.</param>
        /// <param name="parameterType">Filter by parameter type.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>Unfilled offer parameters were returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/offers/unfilled-parameters")]
        Task<UnfilledParametersResponse> GetOffersUnfilledParametersUsingGET1([Query(CollectionFormat.Multi), AliasAs("offer.id")] IEnumerable<string>? offer_id = default, [Query] ParameterType? parameterType = default, [Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Get list of categories where compatibility list is supported</summary>
        /// <remarks>Compatibility list is available in particular categories, this resource allows to get the list of these categories with additional details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-sekcja-pasuje-do-E7Zj6gAEGil#jak-sprawdzic-czy-w-danej-kategorii-moge-dodac-sekcje-pasuje-do-do-oferty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-compatibility-section-v8WbL1wV0Hz#which-categories-support-compatibility-section" target="_blank">EN</a>.</remarks>
        /// <returns>Configuration of supported categories.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/compatibility-list/supported-categories")]
        Task<CompatibilityListSupportedCategoriesDto> GetCategoriesThatSupportCompatibilityList();

        /// <summary>Get suggested compatibility list.</summary>
        /// <remarks>Resource allows to fetch compatibility list suggestion for given offer or product. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-sekcja-pasuje-do-E7Zj6gAEGil#jak-wyszukac-sugerowana-sekcje-compatibilitylist" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-compatibility-section-v8WbL1wV0Hz#how-to-search-for-the-suggested-compatibility-section" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">Offer id on the basis of which we will return the suggested compatibility list.</param>
        /// <param name="product_id">Product id on the basis of which we will return the suggested compatibility list.</param>
        /// <param name="language">Locale on the basis of which we will return the suggested compatibility list. For product-based suggestions if missing pl-PL will be used. For offer-based suggestions if missing offer language will be used.</param>
        /// <returns>Compatibility list suggestion returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request.
        /// 401: Unauthorized.
        /// 404: Suggestion was not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/compatibility-list-suggestions")]
        Task<CompatibilityList> GetCompatibilityListSuggestion([Query, AliasAs("offer.id")] string? offer_id = default, [Query, AliasAs("product.id")] string? product_id = default, [Query] string? language = default);

        /// <summary>Get list of compatible product groups</summary>
        /// <remarks>Compatible products are organized in groups, this resource allows to browse these groups. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-sekcja-pasuje-do-E7Zj6gAEGil#jak-zarzadzac-sekcja-pasuje-do-zintegrowana-z-baza-pojazdow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-compatibility-section-v8WbL1wV0Hz#managing-the-compatibility-section-compatibilitylist-integrated-vehicle-database" target="_blank">EN</a>.</remarks>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">supported-categories</a> resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Groups of compatible products returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 304: Data has not been modified after the date provided in If-Modified-Since header.
        /// 400: Bad request
        /// 401: Unauthorized
        /// 422: Validation failed - for example type that was used is not supported
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/compatible-products/groups")]
        Task<CompatibleProductsGroupsDto> GetCompatibleProductsGroups([Query] string type, [Query] int? limit = default, [Query] int? offset = default, [Header("If-Modified-Since")] string? if_Modified_Since = default);

        /// <summary>Get list of compatible products</summary>
        /// <remarks>Resource allows to fetch compatible products of given type. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-sekcja-pasuje-do-E7Zj6gAEGil#jak-zarzadzac-sekcja-pasuje-do-zintegrowana-z-baza-pojazdow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-compatibility-section-v8WbL1wV0Hz#managing-the-compatibility-section-compatibilitylist-integrated-vehicle-database" target="_blank">EN</a>.</remarks>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Header is ignored if `phrase` parameter is used.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">supported-categories</a> resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="group_id">Group identifier from `/sale/compatible-products/groups` resource. Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.</param>
        /// <param name="tecdoc_kTypNr">Identifier of passenger vehicle (kTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="tecdoc_nTypNr">Identifier of commercial vehicle (nTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="phrase">Query for compatible products. When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.</param>
        /// <param name="limit">The limit of returned items. If `phrase` parameter is present, parameter is ignored and maximum value is set to `200`.</param>
        /// <param name="offset">The offset of returned items. If `phrase` parameter is present, parameter is ignored.</param>
        /// <returns>Compatible products returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 304: Data has not been modified after the date provided in If-Modified-Since header.
        /// 400: Bad request
        /// 401: Unauthorized
        /// 422: Validation failed - for example invalid format of If-Modified-Since header was passed
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/compatible-products")]
        Task<CompatibleProductsListDto> GetCompatibleProducts([Query] string type, [Query, AliasAs("group.id")] string? group_id = default, [Query, AliasAs("tecdoc.kTypNr")] string? tecdoc_kTypNr = default, [Query, AliasAs("tecdoc.nTypNr")] string? tecdoc_nTypNr = default, [Query] string? phrase = default, [Query] int? limit = default, [Query] int? offset = default, [Header("If-Modified-Since")] string? if_Modified_Since = default);

        /// <summary>Get user's additional emails</summary>
        /// <remarks>Use this resource to get a list of all additional email addresses assigned to account. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-adresy-e-mail" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-email-addresses" target="_blank">EN</a>.</remarks>
        /// <returns>List of user's additional emails returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, */*")]
        [Get("/account/additional-emails")]
        Task<AdditionalEmailsResponse> GetListOfAdditionalEmailsUsingGET();

        /// <summary>Add a new additional email address to user's account</summary>
        /// <remarks>Use this resource to add a new additional email address to account. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-adres-e-mail" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-add-an-additional-email" target="_blank">EN</a>.</remarks>
        /// <param name="body">request</param>
        /// <returns>Additional email added successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 422: Email address provided in the request is not valid
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, */*")]
        [Post("/account/additional-emails")]
        Task<AdditionalEmail> AddAdditionalEmailUsingPOST([Body] AdditionalEmailRequest body);

        /// <summary>Get information about a particular additional email</summary>
        /// <remarks>Use this resource to retrieve a single additional email. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-szczegolowe-informacje-o-adresie-e-mail" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-e-mail-details" target="_blank">EN</a>.</remarks>
        /// <param name="emailId">Id of the additional email.</param>
        /// <returns>Additional email returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Additional email not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, */*")]
        [Get("/account/additional-emails/{emailId}")]
        Task<AdditionalEmail> GetAdditionalEmailUsingGET(string emailId);

        /// <summary>Delete an additional email address</summary>
        /// <remarks>Use this resource to delete one of additional emails. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-usunac-adres-e-mail" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-remove-e-mail" target="_blank">EN</a>.</remarks>
        /// <param name="emailId">Id of the additional email to be deleted.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 404: Additional email not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, */*")]
        [Delete("/account/additional-emails/{emailId}")]
        Task DeleteAdditionalEmailUsingDELETE(string emailId);

        /// <summary>Payment operations history</summary>
        /// <remarks>Use this endpoint to get the list of the seller payment operations. Read more: <a href="https://developer.allegro.pl/tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-platniczych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-check-the-fees-3An6Wame3Um#payment-operations" target="_blank">EN</a>.</remarks>
        /// <param name="wallet_type">Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout.</param>
        /// <param name="wallet_paymentOperator">Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator.</param>
        /// <param name="payment_id">The payment ID.</param>
        /// <param name="participant_login">Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer.</param>
        /// <param name="occurredAt_gte">The minimum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">The maximum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="group">Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE, COMPENSATION. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION. * BLOCKADES - BLOCKADE, BLOCKADE_RELEASE.</param>
        /// <param name="marketplaceId">The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. Note, that there are operations not assigned to any marketplace.</param>
        /// <param name="currency">Currency of the operations.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>The payment operations history for given search criteria returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 422: Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/payments/payment-operations")]
        Task<PaymentOperations> GetPaymentsOperationHistory([Query, AliasAs("wallet.type")] Type? wallet_type = default, [Query, AliasAs("wallet.paymentOperator")] PaymentOperator? wallet_paymentOperator = default, [Query, AliasAs("payment.id")] System.Guid? payment_id = default, [Query, AliasAs("participant.login")] string? participant_login = default, [Query, AliasAs("occurredAt.gte")] System.DateTimeOffset? occurredAt_gte = default, [Query, AliasAs("occurredAt.lte")] System.DateTimeOffset? occurredAt_lte = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous6>? group = default, [Query] MarketplaceId? marketplaceId = default, [Query] string? currency = default, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Add a users to the blacklist</summary>
        /// <remarks>Use this resource to add new users to the blacklist on given account. At least one of id or login is required. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-kupujacego-do-listy-nieaktywnych-kupujacych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-add-the-buyer-to-the-blacklist" target="_blank">EN</a>.</remarks>
        /// <param name="body">request</param>
        /// <returns>Users successfully added to the blacklist.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 409: User already added to the blacklist.
        /// 400: Request is invalid
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/blacklisted-users")]
        Task<BlackListResponse> DoAddToBlackList([Body] BlacklistRequest body);

        /// <summary>Remove users from the blacklist</summary>
        /// <remarks>Use this resource to remove users from the blacklist on given account. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-usunac-uzytkownika-z-listy-nieaktywnych-kupujacych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-remove-a-user-from-blacklist" target="_blank">EN</a>.</remarks>
        /// <param name="excludedUserId">Remove users from the blacklist.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Delete("/sale/blacklisted-users/{excludedUserId}")]
        Task DoRemoveFromBlackList(long excludedUserId);

        /// <summary>Place a bid in an auction</summary>
        /// <remarks>Place a bid in an auction. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zloz-oferte-kupna-w-licytacji-q018m02vDT1" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-place-a-bid-in-an-auction-rjWwEj1e7sG" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid succesfully placed</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request.
        /// 401: Unauthorized
        /// 404: Auction not found.
        /// 422: If bidding was not allowed (see message for explanation).
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/bidding/offers/{offerId}/bid")]
        Task<MyBidResponse> PlaceBid(string offerId, [Body] BidRequest? body = default);

        /// <summary>Get current user's bid information</summary>
        /// <remarks>Get current user's bid information. Read more: <a href="https://developer.allegro.pl/news/nowe-zasoby-zloz-oferte-kupna-w-licytacji-q018m02vDT1" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/new-resources-place-a-bid-in-an-auction-rjWwEj1e7sG" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid information succesfully found.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: Auction not found or user did not bid in the auction.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/bidding/offers/{offerId}/bid")]
        Task<MyBidResponse> GetBid(string offerId);

        /// <summary>Get events about the seller's offers</summary>
        /// <remarks>
        /// Use this endpoint to get events concerning changes in the authorized seller's offers.
        /// At present we support the following events:
        /// - OFFER_ACTIVATED - offer is visible on site and available for purchase, occurs when offer status changes from ACTIVATING to ACTIVE.
        /// - OFFER_CHANGED - occurs when offer's fields has been changed e.g. description or photos.
        /// - OFFER_ENDED - offer is no longer available for purchase, occurs when offer status changes from ACTIVE to ENDED.
        /// - OFFER_STOCK_CHANGED - stock in an offer was changed either via purchase or by seller.
        /// - OFFER_PRICE_CHANGED - occurs when price in an offer was changed.
        /// - OFFER_ARCHIVED - offer is no longer available on listing and has been archived.
        /// - OFFER_BID_PLACED - bid was placed on the offer
        /// - OFFER_BID_CANCELED - bid for offer was canceled
        /// - OFFER_TRANSLATION_UPDATED - translation of offer was updated
        /// - OFFER_VISIBILITY_CHANGED - visibility of offer was changed on marketplaces
        /// 
        /// Returned events may occur by actions made via browser or API. The resource allows you to get events concerning active offers and offers scheduled for activation (status ACTIVE and ACTIVATING). Returned events do not concern offers in INACTIVE and ENDED status (the exception is OFFER_ARCHIVED event). External id is returned for all event types except OFFER_BID_PLACED and OFFER_BID_CANCELED. Please note that one change may result in more than one event. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zdarzen-w-ofertach-sprzedawcy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-concerning-changes-in-seller-s-offers" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="from">The ID of the last seen event. Events that occured after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of offer events returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid parameters supplied in the request.
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/sale/offer-events")]
        Task<SellerOfferEventsResponse> GetOfferEvents([Query] string? from = default, [Query] int? limit = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous7>? type = default);

        /// <summary>Get a list of available badge campaigns</summary>
        /// <remarks>
        /// Badge campaigns are another way to promote your offers. You can apply for a badge, which - depending on a type - will be displayed on your offer page of on the list of offers.
        /// First - use this resource to get a list of all available badge campaigns at the moment, then use *POST /sale/badges* to apply for badge. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-campaigns" target="_blank">EN</a>.
        /// </remarks>
        /// <returns>List of available badge campaigns.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// 403: The account is not a Business Account.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/badge-campaigns")]
        Task<GetBadgeCampaignsList> BadgeCampaignsGetAll();

        /// <summary>Apply for badge in selected offer</summary>
        /// <remarks>
        /// This resource allows you to apply for a badge. Most badges involve additional fee charged.
        /// Your badge application will be verified and you will be notified about the verification status via e-mail. You can use *Location* provided in header of the response to track your application status. Application will be removed after 30 days when status of the application was changed form PROCESSED or DECLINED.
        /// Fees will be charged in accordance with Annex No. 1 to the
        /// <a href="https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In"
        /// target="_blank">Daily deals zone terms and conditions</a>.
        /// 
        /// By using this resource you agree to the
        /// <a href="https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In"
        /// target="_blank">Daily deals zone terms and conditions</a>
        /// or
        /// <a href="https://allegro.pl/regulaminy/regulamin-programu-bonusowego-prowizja-nawet-0-5-0KPkAE7wkcv"
        /// target="_blank">Commission discount terms and conditions</a>.
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zglos-oferte-do-kampanii" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#submit-offer-to-a-campaign" target="_blank">EN</a>.
        /// </remarks>
        /// <returns>Successfully applied for a badge.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request.
        /// 401: Unauthorized
        /// 403: The account is not a Business Account.
        /// 422: Validation error. Invalid parameters provided in the request.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/sale/badges")]
        Task PostBadges([Body] BadgeApplicationRequest? body = default);

        /// <summary>Get a list of badges</summary>
        /// <remarks>Use this resource to get a list of badges in authorized seller's offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#kampanie-przypisane-do-ofert" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#check-badges-assigned-to-offers" target="_blank">EN</a>.</remarks>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of badges returned in the response.</param>
        /// <returns>Successfully returned list of badges.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid values supplied in the query parameters.
        /// 401: Unauthorized.
        /// 403: The account is not a Business Account.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/badges")]
        Task<BadgesList> GetBadges([Query, AliasAs("offer.id")] string? offer_id = default, [Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Get a badge application details</summary>
        /// <remarks>Use this resource to get a badge application details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-dane-zgloszenie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-campaign-application" target="_blank">EN</a>.</remarks>
        /// <param name="applicationId">Badge application ID.</param>
        /// <returns>Successfully returned badge application.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// 403: The account is not a Business Account.
        /// 404: Badge application not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/badge-applications/{applicationId}")]
        Task<BadgeApplication> BadgeApplicationsGetOne(string applicationId);

        /// <summary>Get a list of badge applications</summary>
        /// <remarks>Use this resource to get a list of badge applications. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-swoje-zgloszenia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-all-campaign-applications" target="_blank">EN</a>.</remarks>
        /// <param name="campaign_id">Campaign ID.</param>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of applications returned in the response.</param>
        /// <returns>Successfully returned badge applications list.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid values supplied in the query parameters.
        /// 401: Unauthorized.
        /// 403: The account is not a Business Account.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/badge-applications")]
        Task<BadgeApplications> BadgeApplicationsGetAll([Query, AliasAs("campaign.id")] string? campaign_id = default, [Query, AliasAs("offer.id")] string? offer_id = default, [Query] int? offset = default, [Query] int? limit = default);

        /// <summary>Get badge operation details</summary>
        /// <remarks>Use this resource to get badge operation details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge" target="_blank">EN</a>.</remarks>
        /// <param name="operationId">Badge operation ID.</param>
        /// <returns>Successfully returned badge operation details.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// 403: You don\'t have permission to access this resource.
        /// 404: Badge operation not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/badge-operations/{operationId}")]
        Task<BadgeOperation> BadgeOperationsGetOne(string operationId);

        /// <summary>Update campaign badge for the given offer</summary>
        /// <remarks>
        /// This resource allows you to update a campaign badge for the given offer. You can use *Location* provided in header of the response to track your update status. Update offer price in a campaign or finish marking an offer in a campaign.
        /// Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="offerId">Offer ID.</param>
        /// <param name="campaignId">Campaign ID.</param>
        /// <returns>Successfully requested badge update.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request.
        /// 401: Unauthorized.
        /// 403: You don\'t have permission to access this resource.
        /// 404: Resource not found.
        /// 409: Asynchronous badge operation for this offer already exists in status REQUESTED.
        /// 422: Validation error. Invalid parameters provided in the request.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Patch("/sale/badges/offers/{offerId}/campaigns/{campaignId}")]
        Task PatchBadge(string offerId, string campaignId, [Body] BadgePatchRequest? body = default);

        /// <summary>Initiate a refund of a payment</summary>
        /// <remarks>Use this endpoint to initiate a refund of a payment. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-wykonac-zwrot-platnosci" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-refund-a-payment" target="_blank">EN</a>.</remarks>
        /// <returns>Refund request created successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Syntactically incorrect request.
        /// 401: Unauthorized.
        /// 422: Unprocessable Entity.
        /// 403: Forbidden
        /// 404: Payment not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/payments/refunds")]
        Task<RefundDetails> InitiateRefund([Body] InitializeRefund? body = default);

        /// <summary>Get a list of refunded payments</summary>
        /// <remarks>Get a list of refunded payments. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow-platnosci" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-a-list-of-refunded-payment" target="_blank">EN</a>.</remarks>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <param name="id">ID of the refund.</param>
        /// <param name="payment_id">ID of the payment.</param>
        /// <param name="occurredAt_gte">Minimum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">Maximum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="status">Current status of payment refund.</param>
        /// <returns>List of payments refunds returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Unprocessable Entity. Returned when any of the given search parameters have an invalid value.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/payments/refunds")]
        Task<Response8> GetRefundedPayments([Query] int? limit = default, [Query] int? offset = default, [Query] System.Guid? id = default, [Query, AliasAs("payment.id")] System.Guid? payment_id = default, [Query, AliasAs("occurredAt.gte")] System.DateTimeOffset? occurredAt_gte = default, [Query, AliasAs("occurredAt.lte")] System.DateTimeOffset? occurredAt_lte = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous8>? status = default);

        /// <summary>Get a list of billing entries</summary>
        /// <remarks>The billing entries are sorted in a descending order (newest first) by date on which they occurred. Read more: <a href="https://developer.allegro.pl/tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations" target="_blank">EN</a>.</remarks>
        /// <param name="marketplaceId">The marketplace ID where operation was made. By default the marketplace ID where the user is registered.</param>
        /// <param name="occurredAt_gte">Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.</param>
        /// <param name="occurredAt_lte">Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.</param>
        /// <param name="type_id">List of billing types by which billing entries are filtered.</param>
        /// <param name="offer_id">Offer ID by which billing entries are filtered.</param>
        /// <param name="order_id">Order UUID by which billing entries are filtered.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>List of billing entries returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 406: Not Acceptable
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/billing/billing-entries")]
        Task<BillingEntries> GetBillingEntries([Query] string? marketplaceId = default, [Query, AliasAs("occurredAt.gte")] System.DateTimeOffset? occurredAt_gte = default, [Query, AliasAs("occurredAt.lte")] System.DateTimeOffset? occurredAt_lte = default, [Query(CollectionFormat.Multi), AliasAs("type.id")] IEnumerable<string>? type_id = default, [Query, AliasAs("offer.id")] string? offer_id = default, [Query, AliasAs("order.id")] System.Guid? order_id = default, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Get a list of billing types</summary>
        /// <remarks>List of all billing types. Type names are localized according to "Accept-Language" header. Read more: <a href="https://developer.allegro.pl/tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations" target="_blank">EN</a>.</remarks>
        /// <param name="accept_Language">Expected language of name translations.</param>
        /// <returns>List of billing types returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/billing/billing-types")]
        Task<ICollection<BillingType>> GetBillingTypes([Header("Accept-Language")] string? accept_Language = default);

        /// <summary>Get a refund application details</summary>
        /// <remarks>Use this resource to get refund application details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-pojedynczy-wniosek-o-rabat-transakcyjny" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-single-sale-commission-refund" target="_blank">EN</a>.</remarks>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Successfully returned refund application.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Refund application does not belong to you.
        /// 404: Refund application not found.
        /// 406: Not Acceptable
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/refund-claims/{claimId}")]
        Task<RefundClaim> GetRefundApplication(string claimId);

        /// <summary>Cancel a refund application</summary>
        /// <remarks>Use this resource to cancel a refund application. This cannot be undone. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-anulowac-wniosek-o-rabat-transakcyjny" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-cancel-sale-commission-refund" target="_blank">EN</a>.</remarks>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Refund application does not belong to you.
        /// 404: Refund application not found.
        /// 406: Not Acceptable
        /// 422: Refund application has already been processed.
        /// </throws>
        [Delete("/order/refund-claims/{claimId}")]
        Task CancelRefundApplication(string claimId);

        /// <summary>Get a list of refund applications</summary>
        /// <remarks>Use this resource to get a list of refund applications based on the provided query parameters. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-utworzonych-wnioskow-o-rabat-transakcyjny" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-list-of-sale-commission-refunds" target="_blank">EN</a>.</remarks>
        /// <param name="lineItem_offer_id">ID of the offer associated with the refund application.</param>
        /// <param name="buyer_login">Login of the buyer that made the purchase associated with the refund application.</param>
        /// <param name="status">Status of the refund application.</param>
        /// <param name="limit">Maximum number of returned refund applications in response.</param>
        /// <param name="offset">Index of the first returned refund application from all search results.</param>
        /// <returns>Successfully returned list of refund applications.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Refund application does not belong to you.
        /// 406: Not Acceptable
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/order/refund-claims")]
        Task<Response10> GetRefundApplications([Query, AliasAs("lineItem.offer.id")] string? lineItem_offer_id = default, [Query, AliasAs("buyer.login")] string? buyer_login = default, [Query] Status? status = default, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>Create a refund application</summary>
        /// <remarks>Use this resource to create a refund application. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-utworzyc-wniosek-o-rabat-transakcyjny" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-create-a-sale-commission-refund-application" target="_blank">EN</a>.</remarks>
        /// <returns>The refund application was created successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 406: Not Acceptable
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/order/refund-claims")]
        Task<RefundClaimResponse> CreateRefundApplication([Body] RefundClaimRequest body);

        /// <summary>Search fundraising campaigns</summary>
        /// <remarks>Use this resource to search fundraising campaigns. Read more: <a href="https://developer.allegro.pl/news/wystaw-oferte-charytatywna-na-allegro-MR87PBxZySY" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/list-a-charity-offer-on-allegro-LRV0572GOhr" target="_blank">EN</a>.</remarks>
        /// <param name="limit">Maximum number of returned results.</param>
        /// <param name="phrase">Fundraising campaign name or it's Organization name prefix to search for.</param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid or missing query parameters.
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.beta.v1+json")]
        [Get("/charity/fundraising-campaigns")]
        Task<FundraisingCampaigns> SearchFundraisingCampaigns([Query] int limit, [Query] string phrase);

        /// <summary>Get available delivery services</summary>
        /// <remarks>Use this resource to get delivery services available for user. It returns services provided by Allegro and contracts with carriers owned by user and configured by GUI. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-uslug-dostawy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-a-list-of-delivery-services" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/shipment-management/delivery-services")]
        Task<DeliveryServicesDto> GetDeliveryServices();

        /// <summary>Create new shipment</summary>
        /// <remarks>Use this resource to create shipment for delivery. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-utworzyc-nowa-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-create-a-new-shipment" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/shipments/create-commands")]
        Task<ShipmentCreateCommandDto> CreateNewShipment([Body] ShipmentCreateCommandDto body);

        /// <summary>Get shipment creation command status</summary>
        /// <remarks>Use this resource to get shipment creation status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-utworzenia-paczki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-the-creation-status-of-a-shipment" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/shipment-management/shipments/create-commands/{commandId}")]
        Task<CreateShipmentCommandStatusDto> GetShipmentCreationStatus(string commandId);

        /// <summary>Cancel shipment</summary>
        /// <remarks>Use this resource to cancel parcel. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-anulowac-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-cancel-a-shipment" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/shipments/cancel-commands")]
        Task<ShipmentCancelCommandDto> CancelShipment([Body] ShipmentCancelCommandDto body);

        /// <summary>Get shipment cancellation status</summary>
        /// <remarks>Use this resource to get parcel cancellation status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-anulowania-paczki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-shipment-cancellation-status" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/shipment-management/shipments/cancel-commands/{commandId}")]
        Task<CancelShipmentCommandStatusDto> GetShipmentCancellationStatus(string commandId);

        /// <summary>Get shipment details</summary>
        /// <remarks>Use this resource to get parcel details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-szczegolowe-informacje-o-paczce" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-shipment-details" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/shipment-management/shipments/{shipmentId}")]
        Task<ShipmentDto> GetShipmentDetails(string shipmentId);

        /// <summary>Get shipments labels</summary>
        /// <remarks>Use this resource to get label for created shipment. <br/>Returned content type depends on created shipment. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-utworzyc-etykiete-na-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-create-a-label-for-shipment" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Shipment Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/octet-stream, application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/label")]
        Task<FileResponse> GetShipmentLabels([Body] LabelRequestDto body);

        /// <summary>Get shipments protocol</summary>
        /// <remarks>Protocol availability depends on Carrier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-protokol-nadania-przesylek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-shipment-protocol" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 400: Bad Request
        /// 403: Forbidden
        /// 404: Shipment Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/octet-stream, application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/protocol")]
        Task<FileResponse> GetShipmentProtocol([Body] ShipmentIdsDto body);

        /// <summary>Get shipments pickup proposals</summary>
        /// <remarks>Use this resource to get parcels pickup date proposals. Pickup takes place, when courier arrives to take parcels for shipment. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-proponowana-date-odbioru-paczek-przez-kuriera" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-pickup-date-proposals" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/pickup-proposals")]
        Task<ICollection<PickupProposalsResponseDto>> GetPickupProposals([Body] PickupProposalsRequestDto body);

        /// <summary>Request shipments pickup</summary>
        /// <remarks>Use this resource to request a pickup of shipments. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-zamowic-odbior-paczek-przez-kuriera" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-request-shipment-pickup-by-a-courier" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/shipment-management/pickups/create-commands")]
        Task<PickupCreateCommandDto> CreatePickup([Body] PickupCreateCommandDto body);

        /// <summary>Create pickup command status</summary>
        /// <remarks>Use this resource to get pickup request status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-zamowienia-odbioru-paczek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-shipment-pickup-request-status" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/shipment-management/pickups/create-commands/{commandId}")]
        Task<CreatePickupCommandStatusDto> CreatePickupStatus(string commandId);

        /// <summary>Get available delivery services</summary>
        /// <remarks>Use this resource to get delivery services available for user. It returns services provided by Allegro and contracts with carriers owned by user and configured by GUI. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-uslug-dostawy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-a-list-of-delivery-services" target="_blank">EN</a>.</remarks>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/delivery-services")]
        Task<DeliveryServices> GetAvailableDeliveryServices();

        /// <summary>Create a new parcel</summary>
        /// <remarks>Use this resource to create parcel for delivery. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-utworzyc-nowa-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-create-a-new-parcel" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/parcel-management/parcel-create-commands/{commandId}")]
        Task<Response46> CreateNewParcel(string commandId, [Body] ParcelCreationParameters body);

        /// <summary>Get parcel creation status</summary>
        /// <remarks>Use this resource to get parcel creation status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-utworzenia-paczki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-parcel-creation-status" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcel-create-commands/{commandId}")]
        Task<Response49> GetParcelCreationStatus(string commandId);

        /// <summary>Get parcel details</summary>
        /// <remarks>Use this resource to get parcel details. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-szczegolowe-informacje-o-paczce" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcel-details" target="_blank">EN</a>.</remarks>
        /// <param name="parcelId">Id of parcel.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcels/{parcelId}")]
        Task<ParcelDetails> GetParcelDetails(string parcelId);

        /// <summary>Get parcels pickup date proposals</summary>
        /// <remarks>Use this resource to get parcels pickup date proposals. Pickup takes place, when courier arrives to take parcels for shipment. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-proponowana-date-odbioru-paczek-przez-kuriera" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-pickup-date-proposals" target="_blank">EN</a>.</remarks>
        /// <param name="parcelId">Ids of parcels. Passing more than one value will search pickup dates for all of them separately. Example: `parcelId=adc05c84-a9eb-4981-bbc0-773d8c0017e7&parcelId=adc05c84-a9eb-4981-bbc0-773d8c0017e8` - will return pickup date proposals for parcels with ID `adc05c84-a9eb-4981-bbc0-773d8c0017e7` and `adc05c84-a9eb-4981-bbc0-773d8c0017e8`.</param>
        /// <param name="readyDate">Date when parcels will be ready.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 414: URI Too Long
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/pickup-date-proposals")]
        Task<PickupDateParcelsProposals> GetParcelsPickupDateProposals([Query(CollectionFormat.Multi)] IEnumerable<string> parcelId, [Query] System.DateTimeOffset? readyDate = default);

        /// <summary>Request parcel pickup</summary>
        /// <remarks>Use this resource to request pickup for parcels. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-zamowic-odbior-paczek-przez-kuriera" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-request-parcel-pickup-by-a-courier" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/parcel-management/parcel-pickup-request-commands/{commandId}")]
        Task<Response61> RequestParcelPickup(string commandId, [Body] PickupParcelParameters body);

        /// <summary>Get parcel pickup status</summary>
        /// <remarks>Use this resource to get parcel pickup status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-zamowienia-odbioru-paczek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-parcel-pickup-request-status" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcel-pickup-request-commands/{commandId}")]
        Task<Response64> GetParcelPickupStatus(string commandId);

        /// <summary>Get parcel label</summary>
        /// <remarks>Use this resource to get label for created parcel. <br/>Returned content type depends on created parcel. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-utworzyc-etykiete-na-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-create-a-label-for-parcel" target="_blank">EN</a>.</remarks>
        /// <param name="parcelId">Id of parcel.</param>
        /// <param name="pageFormat">Label page format. Only for PDF file.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Parcel Not Found or Parcel Label Is Not Ready Yet
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/pdf, text/plain, application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcels/label")]
        Task<FileResponse> GetParcelLabel([Query] string parcelId, [Query] PageFormat? pageFormat = default);

        /// <summary>Get parcels protocol</summary>
        /// <remarks>Use this resource to get parcels protocol. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-protokol-nadania-przesylek" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcel-protocol" target="_blank">EN</a>.</remarks>
        /// <param name="parcelId">Ids of parcels. Passing more than one value will generate protocol for all of them. Example: `parcelId=2c6d5ca1-e892-455f-ae24-89ba7c12abcd&parcelId=2c6d5ca1-e892-455f-ae24-89ba7c12abc1` - returns protocol for parcels with ID `2c6d5ca1-e892-455f-ae24-89ba7c12abcd` and `2c6d5ca1-e892-455f-ae24-89ba7c12abc1`.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 400: Bad Request
        /// 403: Forbidden
        /// 404: Parcels Not Found or Parcels Protocol Is Not Ready Yet
        /// 414: URI Too Long
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/pdf, application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcels/protocol")]
        Task<FileResponse> GetParcelsProtocol([Query(CollectionFormat.Multi)] IEnumerable<string> parcelId);

        /// <summary>Cancel parcel</summary>
        /// <remarks>Use this resource to cancel parcel. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-anulowac-paczke" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-cancel-a-parcel" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>Created</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/parcel-management/parcel-cancel-commands/{commandId}")]
        Task<Response76> CancelParcel(string commandId, [Body] CancelParcelParameters body);

        /// <summary>Get parcel cancellation status</summary>
        /// <remarks>Use this resource to get parcel cancellation status. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-sprawdzic-status-anulowania-paczki" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-check-parcel-cancellation-status" target="_blank">EN</a>.</remarks>
        /// <param name="commandId">Command UUID.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 504: Gateway Timeout
        /// </throws>
        [System.Obsolete]
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/parcel-management/parcel-cancel-commands/{commandId}")]
        Task<Response79> GetParcelCancellationStatus(string commandId);

        /// <summary>Get categories suggestions</summary>
        /// <remarks>Use this resource to receive suggested categories for given phrase. Read more: <a href="https://developer.allegro.pl/news/udostepnilismy-nowy-zasob-dzieki-ktoremu-sprawdzisz-sugerowane-kategorie-dla-podanej-frazy-4RAl9jwX1FW" target="_blank">PL</a> / <a href="https://developer.allegro.pl/news/we-have-introduced-a-new-resource-that-allows-you-to-retrieve-the-suggested-categories-for-the-given-phrase-v8Wdy1EOyF0" target="_blank">EN</a>.</remarks>
        /// <param name="name">Product name for which you want to get suggested categories.</param>
        /// <returns>Category suggestion returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 406: Not Acceptable
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/matching-categories")]
        Task<CategorySuggestionResponse> CategorySuggestionUsingGET([Query] string name);

        /// <summary>Get all tax settings for category</summary>
        /// <remarks>Use this resource to receive tax settings for given category. Based on received settings you may set VAT tax settings for your offers. Read more: <a href="https://developer.allegro.pl/tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#opcje-faktury-i-stawki-vat" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#invoice-and-vat-settings" target="_blank">EN</a>.</remarks>
        /// <param name="category_id">An identifier of a category for which all available tax settings will be returned.</param>
        /// <param name="countryCode">Country code for which tax settings will be returned. If not provided settings for all countries will be returned.</param>
        /// <returns>Tax settings for given category returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad Request
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 406: Not Acceptable
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/vnd.allegro.beta.v1+json")]
        [Get("/sale/tax-settings")]
        Task<TaxSettings> GetTaxSettingsForCategory([Query, AliasAs("category.id")] string category_id, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous9>? countryCode = default);

        /// <summary>Get the current consents' state for an offer</summary>
        /// <remarks>Use this resource to get the current Allegro Prices consent value for the offer on each of the available marketplaces. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#allegro-ceny-jak-zarzadzac-zgodami-na-uczestnictwo-w-programie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#allegro-prices-how-to-manage-program-participation-consents" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Consent value returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// 403: Offer does not belong to seller.
        /// 404: Offer not found.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/allegro-prices-offer-consents/{offerId}")]
        Task<AllegroPricesOfferConsentChangeResponse> GetAllegroPricesConsentForOffer(string offerId);

        /// <summary>Update consents for an offer</summary>
        /// <remarks>Use this resource to update the Allegro Prices consent value for the offer on chosen marketplaces. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#allegro-ceny-jak-zarzadzac-zgodami-na-uczestnictwo-w-programie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#allegro-prices-how-to-manage-program-participation-consents" target="_blank">EN</a>.</remarks>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Allegro Prices consents' state for the offer updated successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request.
        /// 401: Unauthorized.
        /// 403: Offer does not belong to seller.
        /// 404: Offer not found.
        /// 422: Unprocessable Entity.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/allegro-prices-offer-consents/{offerId}")]
        Task<AllegroPricesOfferConsentChangeResponse> UpdateAllegroPricesConsentForOffer(string offerId, [Body] AllegroPricesOfferChangeRequest body);

        /// <summary>Get the current eligibility information for the account</summary>
        /// <remarks>Use this resource to get the current Allegro Prices eligibility information for the account on each of the available marketplaces. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#allegro-ceny-jak-zarzadzac-zgodami-na-uczestnictwo-w-programie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#allegro-prices-how-to-manage-program-participation-consents" target="_blank">EN</a>.</remarks>
        /// <returns>Allegro Prices eligibility information for the account returned successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/allegro-prices-account-eligibility")]
        Task<AllegroPricesEligibilityResponse> GetAllegroPricesEligibilityForAccount();

        /// <summary>Update consents for the account</summary>
        /// <remarks>Use this resource to update the Allegro Prices consent value for the account on chosen marketplaces. Read more: <a href="https://developer.allegro.pl/tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#allegro-ceny-jak-zarzadzac-zgodami-na-uczestnictwo-w-programie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#allegro-prices-how-to-manage-program-participation-consents" target="_blank">EN</a>.</remarks>
        /// <returns>Allegro Prices consents' state for the account was updated successfully.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Bad request
        /// 401: Unauthorized
        /// 422: Unprocessable Entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/sale/allegro-prices-account-consent")]
        Task<AllegroPricesAccountConsentChangeResponse> UpdateAllegroPricesConsentForAccount([Body] AllegroPricesAccountChangeRequest body);

        /// <summary>Get Smart! seller classification report</summary>
        /// <remarks>Use this resource to get a full Smart! seller classification report. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#klasyfikacja-sprzedawcy" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/account-and-user-data-management-jn9vBjqjnsw#seller-classification" target="_blank">EN</a>.</remarks>
        /// <param name="marketplaceId">Marketplace for which seller classification report will be returned. If not specified, the classification result for the seller's registration marketplace will be returned.</param>
        /// <returns>Successfully returned seller Smart! classification report</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized action
        /// 404: Not Found
        /// 422: Unprocessable entity
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/sale/smart")]
        Task<SmartSellerClassificationReport> GetSellerSmartClassificationGET([Query] string? marketplaceId = default);

        /// <summary>Get details for all marketplaces in allegro</summary>
        /// <remarks>Use this resource to get ID of services, on which seller can display offers. Read more: <a href="https://developer.allegro.pl/tutorials/wystawianie-i-zarzadzanie-oferta-w-serwisach-zagranicznych-wwzjP4M8gTZ#serwis-bazowy-uzytkownika-oraz-lista-dostepnych-serwisow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/listing-and-managing-offers-on-foreign-marketplaces-7GndGjeAATn#user-s-base-marketplace-and-list-of-available-marketplaces" target="_blank">EN</a>.</remarks>
        /// <returns>Successfully returned all available marketplaces in allegro</returns>
        /// <throws cref="ApiException">Thrown when the request returns a non-success status code.</throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/marketplaces")]
        Task<AllegroMarketplaces> MarketplacesGET();

        /// <summary>List user threads</summary>
        /// <remarks>Use this resource to get the list of user threads sorted by last message date, starting from newest. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-watkow-na-koncie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-threads" target="_blank">EN</a>.</remarks>
        /// <param name="limit">The maximum number of threads returned in the response.</param>
        /// <param name="offset">Index of the first returned thread from all results.</param>
        /// <returns>OK</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 422: Incorrect limit or offset
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/messaging/threads")]
        Task<ThreadsList> ListThreadsGET([Query] int? limit = default, [Query] long? offset = default);

        /// <summary>Get user thread</summary>
        /// <remarks>Use this resource to get thread with provided identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-danym-watku" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-thread" target="_blank">EN</a>.</remarks>
        /// <param name="threadId">Identifier of thread to get.</param>
        /// <returns>Thread returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 404: Thread not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/messaging/threads/{threadId}")]
        Task<Thread> GetThreadGET(string threadId);

        /// <summary>Mark a particular thread as read</summary>
        /// <remarks>Use this resource to mark thread with provided identifier as read. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message" target="_blank">EN</a>.</remarks>
        /// <param name="threadId">Identifier of thread to be marked.</param>
        /// <param name="body">Updated read flag</param>
        /// <returns>Thread marked as read successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 403: User not allowed to update thread read flag
        /// 404: Thread not found
        /// 422: Validation errors - missing flag in the request body
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/messaging/threads/{threadId}/read")]
        Task<Thread> ChangeReadFlagOnThreadPUT(string threadId, [Body] ThreadReadFlag body);

        /// <summary>Write a new message</summary>
        /// <remarks>Use this resource to write new message to recipient. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message" target="_blank">EN</a>.</remarks>
        /// <param name="body">Object representing new message.</param>
        /// <returns>Message successfully written</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Authentication required
        /// 422: Validation errors
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/messaging/messages")]
        Task<Message> NewMessagePOST([Body] NewMessage body);

        /// <summary>List messages in thread</summary>
        /// <remarks>Use this resource to list messages in thread with provided identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-wiadomosci-dla-wybranego-watku" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-the-messages-for-the-particular-thread" target="_blank">EN</a>.</remarks>
        /// <param name="threadId">Identifier of thread to get messages from.</param>
        /// <param name="limit">The maximum number of messages returned in the response.</param>
        /// <param name="offset">Index of the first returned message from all results.</param>
        /// <param name="before">Message creation date before filter parameter (exclusive) - cannot be used with offset.</param>
        /// <param name="after">Message creation date after filter parameter (exclusive).</param>
        /// <returns>Thread message list returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 403: User not allowed to list messages in selected thread
        /// 404: Thread not found
        /// 422: Incorrect limit, offset, after or before
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/messaging/threads/{threadId}/messages")]
        Task<MessagesList> ListMessagesGET(string threadId, [Query] int? limit = default, [Query] long? offset = default, [Query] System.DateTimeOffset? before = default, [Query] System.DateTimeOffset? after = default);

        /// <summary>Write a new message in thread</summary>
        /// <remarks>Use this resource to write new message in existing thread. This resource is rate limited to 1 request per second for a user. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message" target="_blank">EN</a>.</remarks>
        /// <param name="threadId">Identifier of thread to write message to.</param>
        /// <returns>Message in thread successfully written</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 403: User not allowed to list messages in selected thread
        /// 404: Thread not found
        /// 422: Validation errors
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/messaging/threads/{threadId}/messages")]
        Task<Message> NewMessageInThreadPOST(string threadId, [Body] NewMessageInThread body);

        /// <summary>Get single message</summary>
        /// <remarks>Use this resource to get message with provided identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message" target="_blank">EN</a>.</remarks>
        /// <param name="messageId">Identifier of message to be returned.</param>
        /// <returns>Message returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 404: Message not found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/messaging/messages/{messageId}")]
        Task<Message> GetMessageGET(string messageId);

        /// <summary>Delete single message</summary>
        /// <remarks>Use this resource to delete message with provided identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#usuniecie-wiadomosci" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#delete-a-message" target="_blank">EN</a>.</remarks>
        /// <param name="messageId">Identifier of the message to delete.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 403: User not allowed to delete particular message
        /// 404: Message not found
        /// </throws>
        [Delete("/messaging/messages/{messageId}")]
        Task DeleteMessageDELETE(string messageId);

        /// <summary>Add attachment declaration</summary>
        /// <remarks>Use this resource to add attachment declaration before uploading. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#deklaracja-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-declaration" target="_blank">EN</a>.</remarks>
        /// <returns>Attachment declaration successfully added</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 415: Unsupported mime type
        /// 422: Validation errors
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Post("/messaging/message-attachments")]
        Task<MessageAttachmentId> NewAttachmentDeclarationPOST([Body] NewAttachmentDeclaration body);

        /// <summary>Upload attachment binary data</summary>
        /// <remarks>Use this resource to upload attachment using identifier that was declared. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#dodanie-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-an-attachment" target="_blank">EN</a>.</remarks>
        /// <param name="attachmentId">The identifier of attachment that will be uploaded.</param>
        /// <returns>Attachment succesfully uploaded.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 403: User does not have
        /// 404: Attachment declaration not found
        /// 413: Exceeded size limit
        /// 415: Unsupported mime type
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Put("/messaging/message-attachments/{attachmentId}")]
        Task<MessageAttachmentId> UploadAttachmentPUT(string attachmentId,  StreamPart body);

        /// <summary>Download attachment</summary>
        /// <remarks>Use this resource to download attachment with provided identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#pobranie-zalacznika" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-related-to-the-message" target="_blank">EN</a>.</remarks>
        /// <param name="attachmentId">Identifier of the attachment that will be downloaded.</param>
        /// <returns>Attachment file returned successfully</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: User not authorized
        /// 404: Attachment not found
        /// </throws>
        [Headers("Accept: */*")]
        [Get("/messaging/message-attachments/{attachmentId}")]
        Task<FileResponse> DownloadAttachmentGET(string attachmentId);

        /// <summary>[BETA] Get customer returns by provided query parameters</summary>
        /// <remarks>Use this resource to get all customer returns filtered by query parameters. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-customer-returns-list" target="_blank">EN</a>.</remarks>
        /// <param name="customerReturnId">One or more customer return id's.</param>
        /// <param name="orderId">One or more order id's.</param>
        /// <param name="items_offerId">One or more returned item offer id's.</param>
        /// <param name="items_name">One or more item names.</param>
        /// <param name="parcels_waybill">One or more waybill id's.</param>
        /// <param name="parcels_carrierId">One or more carrier id's.</param>
        /// <param name="parcels_sender_phoneNumber">One or more phone numbers.</param>
        /// <param name="referenceNumber">One or more reference numbers.</param>
        /// <param name="from">The ID of the last seen customer return. Customer returns created after the given customer return will be returned.</param>
        /// <param name="createdAt_gte">Date of the return in ISO 8601 format to search by greater or equal.</param>
        /// <param name="createdAt_lte">Date of the return in ISO 8601 format to search by lower or equal.</param>
        /// <param name="marketplaceId">The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces.</param>
        /// <param name="limit">Limit of customer returns per page.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully retrieved customer returns.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 406: Not Acceptable
        /// </throws>
        [Headers("Accept: application/vnd.allegro.beta.v1+json")]
        [Get("/order/customer-returns")]
        Task<CustomerReturnResponse> GetCustomerReturns([Query] string? customerReturnId = default, [Query] string? orderId = default, [Query, AliasAs("items.offerId")] string? items_offerId = default, [Query, AliasAs("items.name")] string? items_name = default, [Query, AliasAs("parcels.waybill")] string? parcels_waybill = default, [Query, AliasAs("parcels.carrierId")] string? parcels_carrierId = default, [Query, AliasAs("parcels.sender.phoneNumber")] string? parcels_sender_phoneNumber = default, [Query] string? referenceNumber = default, [Query] string? from = default, [Query, AliasAs("createdAt.gte")] string? createdAt_gte = default, [Query, AliasAs("createdAt.lte")] string? createdAt_lte = default, [Query] string? marketplaceId = default, [Query] int? limit = default, [Query] int? offset = default);

        /// <summary>[BETA] Get customer return by id</summary>
        /// <remarks>Use this resource to get customer returns by its identifier. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-szczegolowe-informacje-o-zwrocie" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-detailed-information-about-customer-return" target="_blank">EN</a>.</remarks>
        /// <param name="customerReturnId">Id of the customer return.</param>
        /// <returns>Successfully retrieved customer return.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not found
        /// 406: Not Acceptable
        /// </throws>
        [Headers("Accept: application/vnd.allegro.beta.v1+json")]
        [Get("/order/customer-returns/{customerReturnId}")]
        Task<CustomerReturn> GetCustomerReturnById(string customerReturnId);

        /// <summary>[BETA] Reject customer return refund</summary>
        /// <remarks>Use this resource to reject customer return refund with provided reason. Read more: <a href="https://developer.allegro.pl/tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-odmowic-zwrotu-wplaty" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/process-orders-PgPMlWDr8Cv#how-to-reject-customer-return-refund" target="_blank">EN</a>.</remarks>
        /// <param name="customerReturnId">Id of the customer return.</param>
        /// <returns>Successfully rejected customer return.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 406: Not Acceptable
        /// 422: Unprocessable Entity. Might occur when customer return has already been rejected
        /// </throws>
        [Headers("Accept: application/vnd.allegro.beta.v1+json")]
        [Post("/order/customer-returns/{customerReturnId}/rejection")]
        Task<CustomerReturn> RejectCustomerReturnRefund(string customerReturnId, [Body] CustomerReturnRefundRejectionRequest body);

        /// <summary>Get list of Advance Ship Notices</summary>
        /// <remarks>Use this resource to get a list of Advance Ship Notices. The list is ordered by **createdAt** property. Default **offset** is 0, default **limit** is 50. A list can be filtered by statuses. Multiple status query parameters are allowed. In such cases, filters are joined with **OR** logical operator. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices" target="_blank">EN</a>.</remarks>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">Maximum number of elements in response.</param>
        /// <param name="status">A status of the Advance Ship Notices in the response.</param>
        /// <returns>Returns list of Advance Ship Notices that belong to a seller.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/fulfillment/advance-ship-notices")]
        Task<AdvanceShipNoticeList> GetAdvanceShipNotices([Query] int? offset = default, [Query] int? limit = default, [Query(CollectionFormat.Multi)] IEnumerable<AdvanceShipNoticeStatus>? status = default);

        /// <summary>Create an Advance Ship Notice</summary>
        /// <remarks>Use this resource to create an Advance Ship Notice. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#utworz-draft-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-a-draft-of-the-advance-ship-notice" target="_blank">EN</a>.</remarks>
        /// <returns>Advance Ship Notice created.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: Invalid request body.
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Advance Ship Notice cannot be created due to improper input data.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Post("/fulfillment/advance-ship-notices")]
        Task<CreateAdvanceShipNoticeResponse> CreateAdvanceShipNotice([Body] CreateAdvanceShipNoticeRequest body);

        /// <summary>Get single Advance Ship Notice</summary>
        /// <remarks>Use this resource to get an Advance Ship Notice. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices" target="_blank">EN</a>.</remarks>
        /// <param name="id">The identifier of returned Advance Ship Notice.</param>
        /// <returns>Returns single Advance Ship Notice.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/fulfillment/advance-ship-notices/{id}")]
        Task<AdvanceShipNoticeResponse> GetAdvanceShipNotice(System.Guid id);

        /// <summary>Update Advance Ship Notice</summary>
        /// <remarks>
        /// Use this resource to update an Advance Ship Notice. Any content property update will clear labels property. Use Create labels command to create new labels for provided content.
        /// If a client wants to update read-only property, an error is returned (only in cases when sent value will be different than actual on the server). Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#uzupelnij-dane-o-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/one-fulfillment-by-allegro-4R9dXyMPlc9#complete-the-data-of-advance-ship-notice" target="_blank">EN</a>.
        /// </remarks>
        /// <param name="id">An identifier of Advance Ship Notice.</param>
        /// <param name="if_match">A current version of Advance Ship Notice (e.g. from etag header obtained via get).</param>
        /// <returns>Advance Ship Notice updated</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: If-match header missing
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 412: Concurrent modification of ASN
        /// 422: ASN is invalid or attempting to update read-only property
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Put("/fulfillment/advance-ship-notices/{id}")]
        Task<AdvanceShipNoticeResponse> UpdateAdvanceShipNotice(System.Guid id, [Body] AdvanceShipNotice body, [Header("if-match")] string if_match);

        /// <summary>Delete Advance Ship Notice</summary>
        /// <remarks>Use this resource to delete an Advance Ship Notice. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-usunac-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-delete-advance-ship-notice" target="_blank">EN</a>.</remarks>
        /// <param name="id">An identifier of the Advance Ship Notice to delete.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// 422: ASN cannot be deleted - it is not in DRAFT status.
        /// </throws>
        [Delete("/fulfillment/advance-ship-notices/{id}")]
        Task DeleteAdvanceShipNotice(System.Guid id, [Header("accept")] Accept accept);

        /// <summary>Get labels for Advance Ship Notice</summary>
        /// <remarks>Use this resource to get labels for Advance Ship Notice after being created with "create labels command". Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes" target="_blank">EN</a>.</remarks>
        /// <param name="id">An identifier of the Advance Ship Notice.</param>
        /// <param name="accept">Content-type of generated labels</param>
        /// <returns>Returns PDF or ZPL file with labels.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found
        /// </throws>
        [Headers("Accept: application/pdf, x-application/zpl")]
        [Get("/fulfillment/advance-ship-notices/{id}/labels")]
        Task<FileResponse> GetAdvanceShipNoticeLabels(System.Guid id, [Header("accept")] Accept2 accept);

        /// <summary>Create labels</summary>
        /// <remarks>Use this resource to create labels for the Advance Ship Notice. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes" target="_blank">EN</a>.</remarks>
        /// <param name="command_id">The identifier of the command.</param>
        /// <returns>
        /// Returns command output with status and possible errors.
        /// The command could fail with following error codes:
        /// * ASN_NOT_FOUND - Cannot find ASN with id given in command input.
        /// * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.
        /// * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has empty content.
        /// * COMMAND_FAILED - Any other error.
        /// </returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Put("/fulfillment/create-labels-commands/{command-id}")]
        Task<CreateLabelsCommand> CreateLabelsCommand([AliasAs("command-id")] System.Guid command_id, [Body] CreateLabelsCommandOnlyInput body);

        /// <summary>Get labels</summary>
        /// <remarks>Use this resource to check the status of the "create labels command" and get the URL to download labels. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes" target="_blank">EN</a>.</remarks>
        /// <param name="command_id">An identifier of the command.</param>
        /// <returns>Returns command output with status and possible errors.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/fulfillment/create-labels-commands/{command-id}")]
        Task<CreateLabelsCommand> GetLabelCommand([AliasAs("command-id")] System.Guid command_id);

        /// <summary>Submit the Advance Ship Notice</summary>
        /// <remarks>Use this resource to submit the Advance Ship Notice. After this operation, updates of the Advance Ship Notice are limited to selected properties only. See <a href="https://developer.allegro.pl/documentation#operation/updateSubmittedAdvanceShipNotice">PUT /fulfillment/advance-ship-notices/{id}/submitted</a>. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice" target="_blank">EN</a>.</remarks>
        /// <param name="command_id">The identifier of the command.</param>
        /// <returns>
        /// Returns command output with status and possible errors.
        /// The command could fail with following error codes:
        /// * ASN_NOT_FOUND - Cannot find ASN with id given in command input.
        /// * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.
        /// * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has no shipping information.
        /// * COMMAND_FAILED - Any other error.
        /// </returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Put("/fulfillment/submit-commands/{command-id}")]
        Task<SubmitCommand> SubmitCommand([AliasAs("command-id")] System.Guid command_id, [Body] SubmitCommand body);

        /// <summary>Get submit status</summary>
        /// <remarks>Use this resource to get submit status of the Advance Ship Notice. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice" target="_blank">EN</a>.</remarks>
        /// <param name="command_id">An identifier of the command.</param>
        /// <returns>Returns command output with status and possible errors.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/fulfillment/submit-commands/{command-id}")]
        Task<SubmitCommand> GetSubmitCommand([AliasAs("command-id")] System.Guid command_id);

        /// <summary>Update submitted Advance Ship Notice</summary>
        /// <remarks>
        /// Use this resource to update already submitted Advance Ship Notice. Update is allowed only when Advance Ship Notice is in "IN_TRANSIT" status. Modifications are limited to:
        /// - changing items quantity
        /// - removing items
        /// - changing handling unit amount
        /// - changing shipping tracking number or vehicle licence plate or third party delivery details (depending on the selected shipping method in the submitted advance ship notice)
        /// Handling unit's amount property update clears labels property. Use Create labels command to create new labels for provided content.
        /// </remarks>
        /// <param name="id">An identifier of Advance Ship Notice.</param>
        /// <param name="if_match">A current version of Advance Ship Notice (e.g. from etag header obtained via get).</param>
        /// <returns>Advance Ship Notice updated</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 400: If-match header missing
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 412: Concurrent modification of ASN
        /// 422: Validation error
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Put("/fulfillment/advance-ship-notice/{id}/submitted")]
        Task<AdvanceShipNoticeResponse> UpdateSubmittedAdvanceShipNotice(System.Guid id, [Body] UpdateSubmittedAdvanceShipNoticeRequest body, [Header("if-match")] string if_match);

        /// <summary>Get available stock</summary>
        /// <remarks>Use this resource to get a list of the products belonging to the seller, which are in Allegro Warehouse. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-pobrac-aktualne-stany-magazynowe" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#get-available-stock" target="_blank">EN</a>.</remarks>
        /// <param name="accept_Language">Expected language of product name translation.</param>
        /// <param name="offset">The offset of elements in the response. Ignored for text/csv content type.</param>
        /// <param name="limit">Maximum number of elements in response. Ignored for text/csv content type.</param>
        /// <param name="phrase">Filtering search results by product name.</param>
        /// <param name="sort">
        /// Defines how elements are sorted in response. Minus sign can be added to imply descending sort order. Ignored for text/csv content type.
        /// Possible values for the "sort" parameter:
        /// * -available - sorting by quantity of available products (descending)
        /// * available - sorting by quantity of available products (ascending)
        /// * -unfulfillable - sorting by quantity of unfulfillable products (descending)
        /// * unfulfillable - sorting by quantity of unfulfillable products (ascending)
        /// * -name - sorting by product’s name (descending)
        /// * name - sorting by product’s name (ascending)
        /// * lastWeekSalesAverage - sorting by product last week average sales (ascending)
        /// * -lastWeekSalesAverage - sorting by product last week average sales (descending)
        /// * reserve - sorting by reserve.outOfStockIn field (ascending)
        /// * -reserve - sorting by reserve.outOfStockIn field (descending)
        /// * lastThirtyDaysSalesSum - sorting by product last month sum sales (ascending)
        /// * -lastThirtyDaysSalesSum - sorting by product last month sum sales (descending)
        /// * storageFee - sorting by storage fee (ascending). The order by fee status is: NOT_APPLICABLE, then INCLUDED_IN_STORAGE_FEE, then PREDICTION, then CHARGED ordered by amountGross ascending.
        /// * -storageFee - sorting by storage fee (descending). The order by fee status is: CHARGED ordered by amountGross descending, then PREDICTION, then INCLUDED_IN_STORAGE_FEE, then NOT_APPLICABLE.
        /// </param>
        /// <param name="productId">Filtering search results by fulfillment product identifier. Ignored for text/csv content type.</param>
        /// <param name="productAvailability">Filtering search results by availability</param>
        /// <param name="productStatus">Filtering search results by status</param>
        /// <param name="storageFee">Filtering search results storage fee. Two values are possible: FREE - products storage fee is included in basic fee or merchant is in grace period PAID - products for which an extra storage fee is calculated TO_BE_PAID_SOON - products for which storage will soon be payable</param>
        /// <param name="asnStatus">Filtering search results by ASN status. Following values are allowed: SUBMITTED - Advanced Ship Notice document has been submitted and it contains a particular product. Only the products that have ASN with products on it are returned. NOT_FOUND - Advanced Ship Notice that contains a particular product was not found. It has not been submitted, may be expired, or products have already been delivered to the warehouse. Only the products that don't have related ASN with products on it are returned.</param>
        /// <param name="outOfStockInFrom">Filter by products with outOfStockIn greater than or equal</param>
        /// <param name="outOfStockInTo">Filter by products with outOfStockIn less than or equal</param>
        /// <returns>Returns available stock for the seller.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, text/csv, application/json")]
        [Get("/fulfillment/stock")]
        Task<StockProductList> GetFulfillmentStock([Query] int? offset = default, [Query] int? limit = default, [Query] string? phrase = default, [Query] Sort4? sort = default, [Query] System.Guid? productId = default, [Query(CollectionFormat.Multi)] IEnumerable<Anonymous10>? productAvailability = default, [Query] ProductStatus? productStatus = default, [Query] StorageFee? storageFee = default, [Query] AsnStatus? asnStatus = default, [Query] int? outOfStockInFrom = default, [Query] int? outOfStockInTo = default, [Header("Accept-Language")] AcceptLanguage? accept_Language = default);

        /// <summary>Get list of shipped parcels</summary>
        /// <remarks>Use this resource to get list of parcels and included items for a given order. Items include detailed information such as expiration dates and serial numbers. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-obslugiwac-zamowienia" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-handle-orders" target="_blank">EN</a>.</remarks>
        /// <param name="orderId">The Allegro's platform order identifier.</param>
        /// <returns>Returns list of parcels shipped by warehouse in a given order.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 404: Not Found
        /// 401: User not authenticated or token is expired
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/fulfillment/orders/{orderId}/parcels")]
        Task<FulfillmentOrder> GetFulfillmentOrderParcels(System.Guid orderId);

        /// <summary>Get list of available products</summary>
        /// <remarks>Use this resource to get a list of products that can be added to Advance Ship Notice. The list contains products for which the seller has created offers and is ordered by product's name. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#sprawdz-dostepne-produkty-do-awizacji" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#check-available-products-for-asn" target="_blank">EN</a>.</remarks>
        /// <param name="accept_Language">Expected language of product name translation.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">Maximum number of elements in response.</param>
        /// <returns>Returns list of products that can be added to Advance Ship Notice.</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 422: Invalid request parameters.
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json, application/json")]
        [Get("/fulfillment/available-products")]
        Task<AvailableProductsList> GetAvailableProducts([Query] int? offset = default, [Query] int? limit = default, [Header("Accept-Language")] AcceptLanguage2? accept_Language = default);

        /// <summary>Check current state and details of Advance Ship Notice receiving</summary>
        /// <remarks>Use this resource to check the state of Advance Ship Notice receiving in Fulfillment Center in real time. The response contains a receiving progress and information about particular items - their quantities and conditions. While the Advance Ship Notice is in UNPACKING state, report is updated dynamically, which might result in different responses even at short time intervals. Read more: <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#sprawdz-postep-odbioru-awizo-przez-magazyn" target="_blank">PL</a> / <a href="https://developer.allegro.pl/tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#check-current-state-and-details-of-advance-ship-notice-receiving" target="_blank">EN</a>.</remarks>
        /// <param name="id">An identifier of advance ship notice.</param>
        /// <returns>Returns the state of Advance Ship Notice receiving in Fulfillment Center</returns>
        /// <throws cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// 401: Unauthorized
        /// 403: Forbidden
        /// 404: Not Found (ASN doesn\'t exist or is in state DRAFT or IN_TRANSIT)
        /// </throws>
        [Headers("Accept: application/vnd.allegro.public.v1+json")]
        [Get("/fulfillment/advance-ship-notices/{id}/receiving-state")]
        Task<ReceivingState> GetAdvanceShipNoticeReceivingState(System.Guid id);


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace JadeX.AllegroAPI
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingEntries
    {
        /// <summary>
        /// List of billing types.
        /// </summary>

        [JsonPropertyName("billingEntries")]
        public ICollection<BillingEntry>? BillingEntries1 { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingEntry
    {
        /// <summary>
        /// ID of the returned billing entry.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// Date of billing entry.
        /// </summary>

        [JsonPropertyName("occurredAt")]
        public System.DateTimeOffset? OccurredAt { get; set; } = default!;

        [JsonPropertyName("type")]
        public Type2? Type { get; set; } = default!;

        /// <summary>
        /// Offer associated with the returned billing entry.
        /// </summary>

        [JsonPropertyName("offer")]
        public Offer? Offer { get; set; } = default!;

        /// <summary>
        /// Money value of the returned billing entry.
        /// </summary>

        [JsonPropertyName("value")]
        public Value? Value { get; set; } = default!;

        /// <summary>
        /// Tax rate applied to the returned billing entry. Optional field percentage is present if the returned billing entry is subject to tax. In this case, annotation is not returned. Optional field annotation is present if the returned billing entry is exempt from tax or tax is not applicable; the possible value is "OUT_OF_SCOPE". In this case, percentage is not returned.
        /// </summary>

        [JsonPropertyName("tax")]
        public Tax2? Tax { get; set; } = default!;

        /// <summary>
        /// User account balance calculated on billing date.
        /// </summary>

        [JsonPropertyName("balance")]
        public Balance? Balance { get; set; } = default!;

        /// <summary>
        /// Order associated with the returned billing entry.
        /// </summary>

        [JsonPropertyName("order")]
        public Order2? Order { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingType
    {
        /// <summary>
        /// ID of the billing type.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Localized type name.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitializeRefund
    {

        [JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public RefundPayment Payment { get; set; } = new RefundPayment();

        /// <summary>
        /// Reason for a payment refund.
        /// </summary>

        [JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public InitializeRefundReason Reason { get; set; } = default!;

        /// <summary>
        /// List of order's line items which can be refunded.
        /// </summary>

        [JsonPropertyName("lineItems")]
        public ICollection<RefundLineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// Payment refund for delivery.
        /// </summary>

        [JsonPropertyName("delivery")]
        public Delivery? Delivery { get; set; } = default!;

        /// <summary>
        /// Payment refund for overpaid.
        /// </summary>

        [JsonPropertyName("overpaid")]
        public Overpaid? Overpaid { get; set; } = default!;

        /// <summary>
        /// List of surcharges for payment which can be refunded.
        /// </summary>

        [JsonPropertyName("surcharges")]
        public ICollection<PaymentsSurcharge>? Surcharges { get; set; } = default!;

        /// <summary>
        /// Payment refund for additional services.
        /// </summary>

        [JsonPropertyName("additionalServices")]
        public AdditionalServices? AdditionalServices { get; set; } = default!;

        /// <summary>
        /// Sellers optional justification for refund.
        /// </summary>

        [JsonPropertyName("sellerComment")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string? SellerComment { get; set; } = default!;

    }

    /// <summary>
    /// Detailed information about the refund application.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundClaim
    {
        /// <summary>
        /// ID of the returned refund application.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// Status of the returned refund application. - `IN_PROGRESS` - the application is being processed or awaits user or admin action. - `WAITING_FOR_PAYMENT_REFUND` - the application is being processed and awaits payment refund to buyer. - `GRANTED` - the application was accepted and a commission refund was granted as requested,
        /// <br/>  or the application was rejected and the seller successfully appealed.
        /// <br/>- `REJECTED` - the application was rejected and no commission was refunded. - `REJECTED_AFTER_APPEAL` - the application was initially rejected and the seller unsuccessfully appealed. - `CANCELLED` - the application was cancelled by the seller. - `APPEALED` - the application was rejected and the seller appealed, but the appeal has not yet finished processing.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RefundClaimStatus? Status { get; set; } = default!;

        /// <summary>
        /// Quantity of product for which the seller filed the refund application.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// Money value of the returned refund application.
        /// </summary>

        [JsonPropertyName("commission")]
        public Commission? Commission { get; set; } = default!;

        /// <summary>
        /// Buyer associated with the refund application.
        /// </summary>

        [JsonPropertyName("buyer")]
        public Buyer? Buyer { get; set; } = default!;

        /// <summary>
        /// Date when the refund application was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Purchase associated with the refund application.
        /// </summary>

        [JsonPropertyName("lineItem")]
        public LineItem? LineItem { get; set; } = default!;

        /// <summary>
        /// Type of commission refund application. - `MANUAL` - the application was created manually by the seller. - `AUTOMATIC` - the application was created automatically.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RefundClaimType? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundClaimRequest
    {
        /// <summary>
        /// Purchase for which a refund application will be created.
        /// </summary>

        [JsonPropertyName("lineItem")]
        public LineItem2? LineItem { get; set; } = default!;

        /// <summary>
        /// Quantity of product for which the refund application will be created. Must be greater than zero.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundClaimResponse
    {
        /// <summary>
        /// ID of created claim.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Detailed information about the refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundDetails
    {
        /// <summary>
        /// The payment refund identifier.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public RefundPayment Payment { get; set; } = new RefundPayment();

        /// <summary>
        /// Reason for a payment refund.
        /// </summary>

        [JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RefundDetailsReason Reason { get; set; } = default!;

        /// <summary>
        /// Current status of payment refund.
        /// </summary>

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RefundDetailsStatus Status { get; set; } = default!;

        /// <summary>
        /// Date and time when the refund was created provided in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        [JsonPropertyName("totalValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public RefundTotalValue TotalValue { get; set; } = default!;

        /// <summary>
        /// List of order's line items which can be refunded.
        /// </summary>

        [JsonPropertyName("lineItems")]
        public ICollection<RefundLineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// Payment refund for delivery.
        /// </summary>

        [JsonPropertyName("delivery")]
        public Delivery2? Delivery { get; set; } = default!;

        /// <summary>
        /// Payment refund for overpaid.
        /// </summary>

        [JsonPropertyName("overpaid")]
        public Overpaid2? Overpaid { get; set; } = default!;

        /// <summary>
        /// List of surcharges for payment which can be refunded.
        /// </summary>

        [JsonPropertyName("surcharges")]
        public ICollection<PaymentsSurcharge>? Surcharges { get; set; } = default!;

        /// <summary>
        /// Payment refund for additional services.
        /// </summary>

        [JsonPropertyName("additionalServices")]
        public AdditionalServices2? AdditionalServices { get; set; } = default!;

        /// <summary>
        /// Sellers optional justification for refund.
        /// </summary>

        [JsonPropertyName("sellerComment")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string? SellerComment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundLineItem
    {
        /// <summary>
        /// The line-item identifier.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Type for line items refund. QUANTITY is provided when you can refund one or more items. AMOUNT is provided when you can refund a partial price.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RefundLineItemType Type { get; set; } = default!;

        /// <summary>
        /// This field is provided for QUANTITY type only. It specifies how many items will be refunded.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double? Quantity { get; set; } = default!;

        /// <summary>
        /// This field is available for AMOUNT type only and specifies the amount refunded to the customer.
        /// </summary>

        [JsonPropertyName("value")]
        public Value2? Value { get; set; } = default!;

    }

    /// <summary>
    /// Payment affected by refund operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundPayment
    {
        /// <summary>
        /// The payment identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnRefundRejectionRequest
    {
        /// <summary>
        /// Refund rejection
        /// </summary>

        [JsonPropertyName("rejection")]
        [System.ComponentModel.DataAnnotations.Required]
        public Rejection Rejection { get; set; } = new Rejection();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnResponse
    {

        [JsonPropertyName("count")]
        public long Count { get; set; } = default!;

        /// <summary>
        /// List of matching customer returns.
        /// </summary>

        [JsonPropertyName("customerReturns")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CustomerReturn> CustomerReturns { get; set; } = new System.Collections.ObjectModel.Collection<CustomerReturn>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturn
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [JsonPropertyName("orderId")]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// List of returned items.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<CustomerReturnItem>? Items { get; set; } = default!;

        [JsonPropertyName("refund")]
        public CustomerReturnRefund? Refund { get; set; } = default!;

        /// <summary>
        /// List of returned parcels.
        /// </summary>

        [JsonPropertyName("parcels")]
        public ICollection<CustomerReturnReturnParcel>? Parcels { get; set; } = default!;

        [JsonPropertyName("rejection")]
        public CustomerReturnRejection? Rejection { get; set; } = default!;

        /// <summary>
        /// The marketplace ID where operation was made.
        /// </summary>

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnRejection
    {
        /// <summary>
        /// Refund rejection code
        /// </summary>

        [JsonPropertyName("code")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CustomerReturnRejectionCode? Code { get; set; } = default!;

        /// <summary>
        /// Reason of refund cancellation.
        /// </summary>

        [JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnItem
    {

        [JsonPropertyName("offerId")]
        public string? OfferId { get; set; } = default!;

        [JsonPropertyName("quantity")]
        public long? Quantity { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

        [JsonPropertyName("reason")]
        public CustomerReturnItemReason? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnRefund
    {

        [JsonPropertyName("bankAccount")]
        public CustomerReturnRefundBankAccount? BankAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnReturnParcel
    {

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [JsonPropertyName("waybill")]
        public string? Waybill { get; set; } = default!;

        [JsonPropertyName("carrierId")]
        public string? CarrierId { get; set; } = default!;

        [JsonPropertyName("sender")]
        public CustomerReturnParcelSender? Sender { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnItemReason
    {
        /// <summary>
        /// Possible values: "NONE", "MISTAKE", "TRANSPORT", "DAMAGED", "NOT_AS_DESCRIBED", "DONT_LIKE_IT", "OVERDUE_DELIVERY", "INCOMPLETE", "HIDDEN_FLAW", "OTHER_FLAW", "DIFFERENT".
        /// </summary>

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [JsonPropertyName("userComment")]
        public string? UserComment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnRefundBankAccount
    {

        [JsonPropertyName("owner")]
        public string? Owner { get; set; } = default!;

        [JsonPropertyName("accountNumber")]
        public string? AccountNumber { get; set; } = default!;

        [JsonPropertyName("iban")]
        public string? Iban { get; set; } = default!;

        [JsonPropertyName("swift")]
        public string? Swift { get; set; } = default!;

        [JsonPropertyName("address")]
        public CustomerReturnRefundBankAccountAddress? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnRefundBankAccountAddress
    {

        [JsonPropertyName("street")]
        public string? Street { get; set; } = default!;

        [JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        [JsonPropertyName("postCode")]
        public string? PostCode { get; set; } = default!;

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReturnParcelSender
    {

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentsSurcharge
    {
        /// <summary>
        /// The payment identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("value")]
        public RefundSurchargeValue? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceDefinitionRequest
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceRequest
    {

        [JsonPropertyName("definition")]
        [System.ComponentModel.DataAnnotations.Required]
        public AdditionalServiceDefinitionRequest Definition { get; set; } = new AdditionalServiceDefinitionRequest();

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Description { get; set; } = default!;

        [JsonPropertyName("configurations")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Configuration> Configurations { get; set; } = new System.Collections.ObjectModel.Collection<Configuration>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceResponse
    {

        [JsonPropertyName("configurations")]
        public ICollection<Configuration>? Configurations { get; set; } = default!;

        [JsonPropertyName("definition")]
        public BasicDefinitionResponse? Definition { get; set; } = default!;

        /// <summary>
        /// This is a description provided by merchant while configuring additional service group.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroup
    {
        /// <summary>
        /// Id of additional service group
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroupRequest
    {
        /// <summary>
        /// Name of the group provided by merchant, invisible for buyers.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// IETF language tag. Must be equal to main language for given marketplace: 'pl-PL' on allegro.pl and 'cs-CZ' on allegro.cz while creating new group.&lt;br/&gt; Cannot change the language of already created group while modifying existing group.
        /// </summary>

        [JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 5)]
        public string Language { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<AdditionalServiceRequest> AdditionalServices { get; set; } = new System.Collections.ObjectModel.Collection<AdditionalServiceRequest>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroupResponse
    {

        [JsonPropertyName("additionalServices")]
        public ICollection<AdditionalServiceResponse>? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Name of the group provided by merchant, invisible for buyers.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("seller")]
        public Reference? Seller { get; set; } = default!;

        /// <summary>
        /// IETF language tag.
        /// </summary>

        [JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 5)]
        public string? Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroups
    {

        [JsonPropertyName("additionalServicesGroups")]
        public ICollection<AdditionalServicesGroupResponse>? AdditionalServicesGroups1 { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroupTranslationRequest
    {

        [JsonPropertyName("additionalServices")]
        public AdditionalServicesGroupTranslationWrapper? AdditionalServices { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroupTranslationWrapper
    {

        [JsonPropertyName("translation")]
        public ICollection<AdditionalServiceTranslation>? Translation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceTranslation
    {

        [JsonPropertyName("definition")]
        public AdditionalServiceDefinitionRequest? Definition { get; set; } = default!;

        /// <summary>
        /// Description of an additional service - provided by merchants and visible by customers.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceGroupTranslationResponse
    {

        [JsonPropertyName("translations")]
        public ICollection<AdditionalServiceGroupTranslation>? Translations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceGroupTranslation
    {
        /// <summary>
        /// IETF language tag.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public AdditionalServicesGroupTranslationWrapperWithType? AdditionalServices { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServicesGroupTranslationWrapperWithType
    {

        [JsonPropertyName("translation")]
        public ICollection<AdditionalServiceTranslation>? Translation { get; set; } = default!;

        /// <summary>
        /// Type of translation.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdditionalServicesGroupTranslationWrapperWithTypeType? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceGroupTranslationPatchResponse
    {
        /// <summary>
        /// IETF language tag.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public AdditionalServicesGroupTranslationWrapperWithType? AdditionalServices { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? Street { get; set; } = default!;

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; } = default!;

        [JsonPropertyName("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ZipCode { get; set; } = default!;

        [JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string State { get; set; } = default!;

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        [JsonPropertyName("coordinates")]
        public Coordinates? Coordinates { get; set; } = default!;

    }

    /// <summary>
    /// Settings for each additional marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplaces
    {

    }

    /// <summary>
    /// Additional marketplace settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferAdditionalMarketplace
    {

        [JsonPropertyName("publication")]
        public AdditionalMarketplacePublication? Publication { get; set; } = default!;

        [JsonPropertyName("sellingMode")]
        public AdditionalMarketplaceSellingMode? SellingMode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacePublication
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdditionalMarketplacePublicationStatus? Status { get; set; } = default!;

    }

    /// <summary>
    /// The publication status of the offer on additional marketplace. The possible values:
    /// <br/>
    /// <br/>  - *NOT_REQUESTED* - seller has not declared a willingness to list this offer on given marketplace
    /// <br/>  - *PENDING* - seller declared a willingness to list this offer on given marketplace, but the process has not started yet; e.g. the offer is not published yet
    /// <br/>  - *IN_PROGRESS* - we process the offer's qualification for given marketplace; the offer is not listed yet
    /// <br/>  - *APPROVED* - the offer is approved to list on given marketplace
    /// <br/>  - *REFUSED* - the offer is refused to list on given marketplace
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalMarketplacePublicationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REQUESTED")]
        NOT_REQUESTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED")]
        REFUSED = 4,

    }

    /// <summary>
    /// Offer's selling mode on given marketplace
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplaceSellingMode
    {

        [JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder Price { get; set; } = new PriceModificationFixedPriceHolder();

    }

    /// <summary>
    /// The definitions of the different after sales services assigned to the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AfterSalesServices
    {

        [JsonPropertyName("impliedWarranty")]
        public ImpliedWarranty? ImpliedWarranty { get; set; } = default!;

        [JsonPropertyName("returnPolicy")]
        public ReturnPolicy? ReturnPolicy { get; set; } = default!;

        [JsonPropertyName("warranty")]
        public Warranty? Warranty { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AfterSalesServicesAttachment
    {
        /// <summary>
        /// The Id of the attachment.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// Attachment file name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Direct link to the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// The implied warranty information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarranty
    {
        /// <summary>
        /// The ID of the implied warranty definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    /// <summary>
    /// The return policy information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicy
    {
        /// <summary>
        /// The ID of the return policy definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    /// <summary>
    /// The warranty information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranty
    {
        /// <summary>
        /// The ID of the warranty definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyRequest
    {
        /// <summary>
        /// Warranty name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public WarrantyType? Type { get; set; } = default!;

        [JsonPropertyName("individual")]
        public WarrantyPeriod? Individual { get; set; } = default!;

        [JsonPropertyName("corporate")]
        public WarrantyPeriod? Corporate { get; set; } = default!;

        [JsonPropertyName("attachment")]
        public WarrantyAttachment? Attachment { get; set; } = default!;

        /// <summary>
        /// Warranty description.
        /// </summary>

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyResponse
    {
        /// <summary>
        /// The ID of the warranty definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("seller")]
        public Seller? Seller { get; set; } = default!;

        /// <summary>
        /// Warranty name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public WarrantyType? Type { get; set; } = default!;

        [JsonPropertyName("individual")]
        public WarrantyPeriod? Individual { get; set; } = default!;

        [JsonPropertyName("corporate")]
        public WarrantyPeriod? Corporate { get; set; } = default!;

        [JsonPropertyName("attachment")]
        public AfterSalesServicesAttachment? Attachment { get; set; } = default!;

        /// <summary>
        /// Warranty description.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    /// <summary>
    /// Defines who is warrantor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WarrantyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MANUFACTURER")]
        MANUFACTURER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyPeriod
    {
        /// <summary>
        /// Period in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("period")]
        public string? Period { get; set; } = default!;

        /// <summary>
        /// Indices if it is lifetime warranty.
        /// </summary>

        [JsonPropertyName("lifetime")]
        public bool? Lifetime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyAttachment
    {
        /// <summary>
        /// The Id of the attachment received in a response from *POST /afters-sales-service-conditions/attachments*
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// Attachment file name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarrantyRequest
    {
        /// <summary>
        /// Warranty name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("individual")]
        public ImpliedWarrantyPeriod? Individual { get; set; } = default!;

        [JsonPropertyName("corporate")]
        public ImpliedWarrantyPeriod? Corporate { get; set; } = default!;

        [JsonPropertyName("address")]
        public AfterSalesServicesAddress? Address { get; set; } = default!;

        /// <summary>
        /// Implied warranty description.
        /// </summary>

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarrantyResponse
    {
        /// <summary>
        /// The ID of the implied warranty definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("seller")]
        public Seller? Seller { get; set; } = default!;

        /// <summary>
        /// Implied warranty name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("individual")]
        public ImpliedWarrantyPeriod? Individual { get; set; } = default!;

        [JsonPropertyName("corporate")]
        public ImpliedWarrantyPeriod? Corporate { get; set; } = default!;

        [JsonPropertyName("address")]
        public AfterSalesServicesAddress? Address { get; set; } = default!;

        /// <summary>
        /// Implied warranty description.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarrantyPeriod
    {
        /// <summary>
        /// Period in ISO 8601 format. Only periods in full years are accepted.
        /// </summary>

        [JsonPropertyName("period")]
        public string? Period { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AfterSalesServicesAddress
    {
        /// <summary>
        /// Company or person name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Street name.
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// Post code.
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; } = default!;

        /// <summary>
        /// City name.
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Country code.
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyAddress
    {
        /// <summary>
        /// Company or person name. Length is dependent on specified 'countryCode' - for CZ and SK length is equal to 50 characters, for other countries - 200.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Street name. Length is dependent on specified 'countryCode' - for PL, CZ and SK length is equal to 35 characters, for other countries - 200.
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// Post code format is dependent on 'countryCode' - PL='XX-XXX', CZ='XXX XX', SK='XXX XX' for other countries format is less restrictive - 16 characters alphanumeric with ' '(space) and '-' allowed.
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; } = default!;

        /// <summary>
        /// City name. Length is dependent on specified 'countryCode' - for PL, CZ and SK length is equal to 30 characters, for other countries - 200.
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Country code.
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyRequest
    {
        /// <summary>
        /// Return policy name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("availability")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyAvailability Availability { get; set; } = new ReturnPolicyAvailability();

        /// <summary>
        /// Period in ISO 8601 format. Only periods in full days are accepted.
        /// </summary>

        [JsonPropertyName("withdrawalPeriod")]
        public string? WithdrawalPeriod { get; set; } = default!;

        [JsonPropertyName("returnCost")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyReturnCost ReturnCost { get; set; } = new ReturnPolicyReturnCost();

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyAddress Address { get; set; } = new ReturnPolicyAddress();

        [JsonPropertyName("contact")]
        public ReturnPolicyContact? Contact { get; set; } = default!;

        [JsonPropertyName("options")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyOptions Options { get; set; } = new ReturnPolicyOptions();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyResponse
    {
        /// <summary>
        /// The ID of the return policy definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("seller")]
        public Seller? Seller { get; set; } = default!;

        /// <summary>
        /// Return policy name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("availability")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyAvailability Availability { get; set; } = new ReturnPolicyAvailability();

        /// <summary>
        /// Period in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("withdrawalPeriod")]
        public string? WithdrawalPeriod { get; set; } = default!;

        [JsonPropertyName("returnCost")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyReturnCost ReturnCost { get; set; } = new ReturnPolicyReturnCost();

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnPolicyAddress Address { get; set; } = new ReturnPolicyAddress();

        /// <summary>
        /// Return policy description.
        /// </summary>

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string? Description { get; set; } = default!;

        [JsonPropertyName("contact")]
        public ReturnPolicyContact? Contact { get; set; } = default!;

        [JsonPropertyName("options")]
        public ReturnPolicyOptions? Options { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyAvailability
    {
        /// <summary>
        /// Indicates if return policy is full, restricted or disabled.
        /// </summary>

        [JsonPropertyName("range")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReturnPolicyAvailabilityRange? Range { get; set; } = default!;

        [JsonPropertyName("restrictionCause")]
        public RestrictionCause? RestrictionCause { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestrictionCause
    {
        /// <summary>
        /// Type of return policy restrictions. Required if range of policy is set to RESTRICTED or DISABLED, otherwise must be empty. Selected restriction depends on the chosen range of policy. Read more info [PL](https://developer.allegro.pl/tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-zarzadzac-warunkami-zwrotow) / [EN](https://developer.allegro.pl/tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-manage-return-policies).
        /// </summary>

        [JsonPropertyName("name")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RestrictionCauseName? Name { get; set; } = default!;

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyReturnCost
    {
        /// <summary>
        /// Indicates who covers the return delivery costs.
        /// </summary>

        [JsonPropertyName("coveredBy")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReturnPolicyReturnCostCoveredBy? CoveredBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyContact
    {
        /// <summary>
        /// A valid phone number of the seller
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        /// <summary>
        /// A valid email address of the seller
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyOptions
    {
        /// <summary>
        /// Order sent back with cash on pickup is not allowed
        /// </summary>

        [JsonPropertyName("cashOnDeliveryNotAllowed")]
        public bool CashOnDeliveryNotAllowed { get; set; } = default!;

        /// <summary>
        /// If free accessories were added to the order, the client needs to send them back
        /// </summary>

        [JsonPropertyName("freeAccessoriesReturnRequired")]
        public bool FreeAccessoriesReturnRequired { get; set; } = default!;

        /// <summary>
        /// If there was a discount granted after the order, the return is lowered by the received discount
        /// </summary>

        [JsonPropertyName("refundLoweredByReceivedDiscount")]
        public bool RefundLoweredByReceivedDiscount { get; set; } = default!;

        /// <summary>
        /// Returns for B2B purchases allowed
        /// </summary>

        [JsonPropertyName("businessReturnAllowed")]
        public bool BusinessReturnAllowed { get; set; } = default!;

        /// <summary>
        /// Return items are picked up by the seller
        /// </summary>

        [JsonPropertyName("collectBySellerOnly")]
        public bool CollectBySellerOnly { get; set; } = default!;

        /// <summary>
        /// If ordering a shipment outside Poland, different rules of return, complaint and warranty may apply
        /// </summary>

        [JsonPropertyName("abroadReturnTermsMayDiffer")]
        [System.Obsolete]
        public bool? AbroadReturnTermsMayDiffer { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attachment
    {
        /// <summary>
        /// The ID of an attachment received in a response from *POST /sale/offer-attachments*
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Answer for user's rating.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRatingAnswerRequest
    {
        /// <summary>
        /// Answer message.
        /// </summary>

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Message { get; set; } = default!;

    }

    /// <summary>
    /// Seller's answer, if null seller did not publish answer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Answer
    {
        /// <summary>
        /// Answer creation datetime in ISO 8601 format
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

        /// <summary>
        /// Answer message
        /// </summary>

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableConstraint
    {
        /// <summary>
        /// One of the type COUNTRY_SAME_QUANTITY or COUNTRY_DELIVERY_SAME_QUANTITY
        /// </summary>

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// All delivery methods ids, which are available for given additional service.
        /// </summary>

        [JsonPropertyName("availableDeliveryMethods")]
        public ICollection<string>? AvailableDeliveryMethods { get; set; } = default!;

    }

    /// <summary>
    /// The rates broken down into detailed categories. Note that this information is only available if the seller has received enough detailed ratings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AverageRates
    {
        /// <summary>
        /// The average value of delivery rate.
        /// </summary>

        [JsonPropertyName("delivery")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double? Delivery { get; set; } = default!;

        /// <summary>
        /// The average value of delivery cost rate.
        /// </summary>

        [JsonPropertyName("deliveryCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double? DeliveryCost { get; set; } = default!;

        /// <summary>
        /// The average value of description rate.
        /// </summary>

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double? Description { get; set; } = default!;

        /// <summary>
        /// The average value of service rate.
        /// </summary>

        [JsonPropertyName("service")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double? Service { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicDefinitionResponse
    {
        /// <summary>
        /// Id of an additional service definition.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Benefit
    {

        [JsonPropertyName("specification")]
        [System.ComponentModel.DataAnnotations.Required]
        public BenefitSpecification Specification { get; set; } = new BenefitSpecification();

    }

    /// <summary>
    /// One of: LargeOrderDiscountBenefitSpecification, WholesalePriceListBenefitSpecification, BundleBenefitSpecification, MultiPackBenefitSpecification
    /// </summary>
    [JsonInheritanceConverter(typeof(BenefitSpecification), "type")]
    [JsonInheritanceAttribute("LARGE_ORDER_DISCOUNT", typeof(LargeOrderDiscountBenefitSpecification))]
    [JsonInheritanceAttribute("WHOLESALE_PRICE_LIST", typeof(WholesalePriceListBenefitSpecification))]
    [JsonInheritanceAttribute("ORDER_FIXED_DISCOUNT", typeof(BundleBenefitSpecification))]
    [JsonInheritanceAttribute("UNIT_PERCENTAGE_DISCOUNT", typeof(MultiPackBenefitSpecification))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BenefitSpecification
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LargeOrderDiscountBenefitSpecification : BenefitSpecification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "LARGE_ORDER_DISCOUNT";

        /// <summary>
        /// List of order discount thresholds. A threshold with a higher orderValue.lowerBound.amount than another one must also have a higher discount.percentage.
        /// </summary>

        [JsonPropertyName("thresholds")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Thresholds> Thresholds { get; set; } = new System.Collections.ObjectModel.Collection<Thresholds>();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WholesalePriceListBenefitSpecification : BenefitSpecification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "WHOLESALE_PRICE_LIST";

        /// <summary>
        /// Price list name (visible to you only).
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// List of discount thresholds. A threshold with a higher quantity.lowerBound than another must also have a higher discount.percentage.
        /// </summary>

        [JsonPropertyName("thresholds")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<thresholds> Thresholds { get; set; } = new System.Collections.ObjectModel.Collection<thresholds>();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BundleBenefitSpecification : BenefitSpecification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "ORDER_FIXED_DISCOUNT";

        [JsonPropertyName("value")]
        public PriceModificationFixedPriceHolder? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultiPackBenefitSpecification : BenefitSpecification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "UNIT_PERCENTAGE_DISCOUNT";

        /// <summary>
        /// What rebate will be given.
        /// </summary>

        [JsonPropertyName("configuration")]
        [System.ComponentModel.DataAnnotations.Required]
        public Configuration2 Configuration { get; set; } = new Configuration2();

        /// <summary>
        /// Describes what will cause the rebate.
        /// </summary>

        [JsonPropertyName("trigger")]
        [System.ComponentModel.DataAnnotations.Required]
        public Trigger Trigger { get; set; } = new Trigger();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Caption
    {

        [JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Index { get; set; } = default!;

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

    }

    /// <summary>
    /// The list of categories.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoriesDto
    {

        [JsonPropertyName("categories")]
        public ICollection<CategoryDto>? Categories { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category
    {
        /// <summary>
        /// Category identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Category in which the offer is listed for sale. You can indicate a category from the product's 'similar categories' to set the offer's category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferCategoryRequest : Category
    {

    }

    /// <summary>
    /// The category to which the offer is listed for sale.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferCategory : Category
    {

    }

    /// <summary>
    /// Product category
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductCategory : Category
    {

    }

    /// <summary>
    /// The category data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryDto
    {
        /// <summary>
        /// The ID of the category. This can be either in UUID format or an integer format. You should be ready to accept any string value as the category ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Indicates whether the category is at the lowest level. Leaf categories do not have any children. Offers can be listed only in leaf categories.
        /// </summary>

        [JsonPropertyName("leaf")]
        public bool? Leaf { get; set; } = default!;

        /// <summary>
        /// Name of the category in Polish.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("options")]
        public CategoryOptionsDto? Options { get; set; } = default!;

        /// <summary>
        /// The parent category data.
        /// </summary>

        [JsonPropertyName("parent")]
        public Parent? Parent { get; set; } = default!;

    }

    /// <summary>
    /// A list of the different options which can be used with this category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryOptionsDto
    {
        /// <summary>
        /// Indicates whether offers of type ADVERTISEMENT can be listed in this category.
        /// </summary>

        [JsonPropertyName("advertisement")]
        public bool? Advertisement { get; set; } = default!;

        /// <summary>
        /// Indicates whether advertisements listed in this category must have a price given. If the value is `true` then you don't have to provide a price when listing an advertisement in this category.
        /// </summary>

        [JsonPropertyName("advertisementPriceOptional")]
        public bool? AdvertisementPriceOptional { get; set; } = default!;

        /// <summary>
        /// Indicates whether you can combine offers from this category into variant sets based on the color and pattern.
        /// </summary>

        [JsonPropertyName("variantsByColorPatternAllowed")]
        public bool? VariantsByColorPatternAllowed { get; set; } = default!;

        /// <summary>
        /// Information whether the category supports assigning offers to a product.
        /// </summary>

        [JsonPropertyName("offersWithProductPublicationEnabled")]
        public bool? OffersWithProductPublicationEnabled { get; set; } = default!;

        /// <summary>
        /// Indicates whether the category supports creating products.
        /// </summary>

        [JsonPropertyName("productCreationEnabled")]
        public bool? ProductCreationEnabled { get; set; } = default!;

        /// <summary>
        /// Indicates whether custom parameters can be added to offers in this category.
        /// </summary>

        [JsonPropertyName("customParametersEnabled")]
        public bool? CustomParametersEnabled { get; set; } = default!;

        /// <summary>
        /// Indicates whether the category supports message to seller in `REQUIRED` mode.
        /// </summary>

        [JsonPropertyName("sellerCanRequirePurchaseComments")]
        public bool? SellerCanRequirePurchaseComments { get; set; } = default!;

    }

    /// <summary>
    /// Category suggestion category object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategorySuggestionCategoryNode
    {
        /// <summary>
        /// ID of category.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Category name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("parent")]
        public CategorySuggestionCategoryNode? Parent { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategorySuggestionResponse
    {
        /// <summary>
        /// List of categories matching with given phrase.
        /// </summary>

        [JsonPropertyName("matchingCategories")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategorySuggestionCategoryNode> MatchingCategories { get; set; } = new System.Collections.ObjectModel.Collection<CategorySuggestionCategoryNode>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnfilledParametersResponse
    {
        /// <summary>
        /// List of offers unfilled parameters.
        /// </summary>

        [JsonPropertyName("offers")]
        public ICollection<Offers>? Offers { get; set; } = default!;

        /// <summary>
        /// Number of returned elements.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available elements.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParametersScheduledChangesResponse
    {
        /// <summary>
        /// The list of scheduled changes.
        /// </summary>

        [JsonPropertyName("scheduledChanges")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategoryParametersScheduledBaseChange> ScheduledChanges { get; set; } = new System.Collections.ObjectModel.Collection<CategoryParametersScheduledBaseChange>();

    }

    /// <summary>
    /// The data of an scheduled change.
    /// </summary>
    [JsonInheritanceConverter(typeof(CategoryParametersScheduledBaseChange), "type")]
    [JsonInheritanceAttribute("REQUIREMENT_CHANGE", typeof(RequirementChange))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParametersScheduledBaseChange
    {
        /// <summary>
        /// The date and time when the change was scheduled, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        /// </summary>

        [JsonPropertyName("scheduledAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ScheduledAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the change will be effective from, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        /// </summary>

        [JsonPropertyName("scheduledFor")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ScheduledFor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequirementChange : CategoryParametersScheduledBaseChange
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "REQUIREMENT_CHANGE";

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryParametersScheduledBaseChangeCategory Category { get; set; } = new CategoryParametersScheduledBaseChangeCategory();

        [JsonPropertyName("parameter")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryParametersScheduledBaseChangeParameter Parameter { get; set; } = new CategoryParametersScheduledBaseChangeParameter();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Category parameter scheduled change category data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParametersScheduledBaseChangeCategory
    {
        /// <summary>
        /// The ID of the category. This can be either in UUID format or an integer format. You should be ready to accept any string value as the category ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Category parameter scheduled change parameter data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParametersScheduledBaseChangeParameter
    {
        /// <summary>
        /// The ID of the Parameter. This can be either in UUID format or an integer format. You should be ready to accept any string value as the parameter ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryEventsResponse
    {
        /// <summary>
        /// The list of events.
        /// </summary>

        [JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategoryBaseEvent> Events { get; set; } = new System.Collections.ObjectModel.Collection<CategoryBaseEvent>();

    }

    /// <summary>
    /// The data of an event.
    /// </summary>
    [JsonInheritanceConverter(typeof(CategoryBaseEvent), "type")]
    [JsonInheritanceAttribute("CATEGORY_CREATED", typeof(CategoryCreatedEvent))]
    [JsonInheritanceAttribute("CATEGORY_RENAMED", typeof(CategoryRenamedEvent))]
    [JsonInheritanceAttribute("CATEGORY_MOVED", typeof(CategoryMovedEvent))]
    [JsonInheritanceAttribute("CATEGORY_DELETED", typeof(CategoryDeletedEvent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryBaseEvent
    {
        /// <summary>
        /// The ID of the event. It can be used in the `from` parameter of the query.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The date and time when the change occurred, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryCreatedEvent : CategoryBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CATEGORY_CREATED";

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryEventBaseCategory Category { get; set; } = new CategoryEventBaseCategory();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryRenamedEvent : CategoryBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CATEGORY_RENAMED";

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryEventBaseCategory Category { get; set; } = new CategoryEventBaseCategory();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryMovedEvent : CategoryBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CATEGORY_MOVED";

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryEventBaseCategory Category { get; set; } = new CategoryEventBaseCategory();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryDeletedEvent : CategoryBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CATEGORY_DELETED";

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public CategoryEventBaseCategory Category { get; set; } = new CategoryEventBaseCategory();

        /// <summary>
        /// Category that should be used instead of deleted one.
        /// </summary>

        [JsonPropertyName("redirectCategory")]
        public RedirectCategory? RedirectCategory { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Category event category data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryEventBaseCategory
    {
        /// <summary>
        /// The ID of the category. This can be either in UUID format or an integer format. You should be ready to accept any string value as the category ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Indicates whether the category is at the lowest level. Leaf categories do not have any children. Offers can be listed only in leaf categories.
        /// </summary>

        [JsonPropertyName("leaf")]
        public bool? Leaf { get; set; } = default!;

        /// <summary>
        /// Name of the category.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The parent category data.
        /// </summary>

        [JsonPropertyName("parent")]
        public Parent2? Parent { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListSupportedCategoriesDto
    {
        /// <summary>
        /// List with information about categories where compatibility list is supported. &lt;a href=" https://developer.allegro.pl/compatibility_list/" target="_blank"&gt;Read more&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("supportedCategories")]
        public ICollection<SupportedCategories>? SupportedCategories { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibleProductsGroupsDto
    {
        /// <summary>
        /// List of groups for given type of compatible products.
        /// </summary>

        [JsonPropertyName("groups")]
        public ICollection<Groups>? Groups { get; set; } = default!;

        /// <summary>
        /// Number of returned elements.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available elements.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibleProductsListDto
    {
        /// <summary>
        /// List of compatible products for given type and parameters.
        /// </summary>

        [JsonPropertyName("compatibleProducts")]
        public ICollection<CompatibleProductDto>? CompatibleProducts { get; set; } = default!;

        /// <summary>
        /// Number of returned elements.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available elements. Field is not present when `phrase` parameter is used.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibleProductDto
    {
        /// <summary>
        /// Identifier of the compatible product.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Textual representation of the compatible product.
        /// </summary>

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        /// <summary>
        /// Group to which compatible product is assigned to.
        /// </summary>

        [JsonPropertyName("group")]
        public Group? Group { get; set; } = default!;

        /// <summary>
        /// List of compatible products attributes.
        /// </summary>

        [JsonPropertyName("attributes")]
        public ICollection<Attributes>? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cells
    {

        [JsonPropertyName("cells")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<string> Cells1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rules
    {
        /// <summary>
        /// List of rules.
        /// </summary>

        [JsonPropertyName("rules")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<rules> Rules1 { get; set; } = new System.Collections.ObjectModel.Collection<rules>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferRules
    {
        /// <summary>
        /// List of assigned rules.
        /// </summary>

        [JsonPropertyName("rules")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<rules2> Rules { get; set; } = new System.Collections.ObjectModel.Collection<rules2>();

        /// <summary>
        /// The date the rule assignments to offer were last modified in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPriceAutomationCommand
    {
        /// <summary>
        /// The Command identifier. This field is optional. If the client does not provide their own command id then the service will generate a command id and return it in the response.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("modification")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferPriceAutomationModificationSet Modification { get; set; } = default!;

        /// <summary>
        /// List of offer criteria.
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OfferCriterium> OfferCriteria { get; set; } = new System.Collections.ObjectModel.Collection<OfferCriterium>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPriceAutomationModificationSet
    {
        /// <summary>
        /// List of marketplaces to which the rules will be added.
        /// </summary>

        [JsonPropertyName("set")]
        public ICollection<Set>? Set { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPriceAutomationModificationRemove
    {
        /// <summary>
        /// List of marketplaces from which rules will be removed.
        /// </summary>

        [JsonPropertyName("remove")]
        public ICollection<Remove>? Remove { get; set; } = default!;

    }

    /// <summary>
    /// The rule type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PriceAutomationRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE_RATE")]
        EXCHANGE_RATE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePrice
    {
        /// <summary>
        /// The unique command id provided in the input.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ChangePriceInput Input { get; set; } = new ChangePriceInput();

        [JsonPropertyName("output")]
        public CommandOutput? Output { get; set; } = default!;

    }

    /// <summary>
    /// The input of the command, i.e. the new Buy Now price for the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePriceInput
    {

        [JsonPropertyName("buyNowPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder BuyNowPrice { get; set; } = new PriceModificationFixedPriceHolder();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePriceWithoutOutput
    {
        /// <summary>
        /// The unique command id generated by you. This should be the same UUID as used in the path.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ChangePriceInput Input { get; set; } = new ChangePriceInput();

    }

    /// <summary>
    /// The output of the command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommandOutput
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ProcessingStatus? Status { get; set; } = default!;

        [JsonPropertyName("errors")]
        public ICollection<Error>? Errors { get; set; } = default!;

    }

    /// <summary>
    /// Status of single command task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommandTask
    {
        /// <summary>
        /// Modified field as JSON path.
        /// </summary>

        [JsonPropertyName("field")]
        public string? Field { get; set; } = default!;

        /// <summary>
        /// General fail reason. You should check the errors structure to get more detailed information of the encountered errors.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        [JsonPropertyName("offer")]
        public OfferId? Offer { get; set; } = default!;

        /// <summary>
        /// Available statuses: NEW, SUCCESS, FAIL
        /// </summary>

        [JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The list of error objects explaining the problems with command processing for the given offer.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error>? Errors { get; set; } = default!;

    }

    [JsonInheritanceConverter(typeof(CompatibilityList), "type")]
    [JsonInheritanceAttribute("MANUAL", typeof(CompatibilityListManual))]
    [JsonInheritanceAttribute("PRODUCT_BASED", typeof(CompatibilityListProductBased))]
    [JsonInheritanceAttribute("CompatibilityListProductBasedProductOfferResponse", typeof(CompatibilityListProductBasedProductOfferResponse))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityList
    {

    }

    [JsonInheritanceConverter(typeof(CompatibilityListProductOfferResponse), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListProductOfferResponse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListManual : CompatibilityList
    {
        /// <summary>
        /// List of the compatible items. Maximum number of elements on the list depends on type of included compatible items. Configuration and details concerning the compatible items in selected category are provided in the response for GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource in `validationRules` object.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CompatibilityListItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<CompatibilityListItem>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListManualType
    {
        /// <summary>
        /// List of the compatible items. Maximum number of elements on the list depends on type of included compatible items. Configuration and details concerning the compatible items in selected category are provided in the response for GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource in `validationRules` object.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CompatibilityListItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<CompatibilityListItem>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListProductBased : CompatibilityList
    {
        /// <summary>
        /// Id of product-based compatibility list.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Text representation of the compatibility list items. Provided for informational purposes only - ignored when creating (Post) or updating (Put) compatibility list in the offer.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<CompatibilityListItemProductBased>? Items { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListProductBasedProductOfferResponse : CompatibilityList
    {
        /// <summary>
        /// Text representation of the compatibility list items. Provided for informational purposes only - ignored when creating (Post) or updating (Put) compatibility list in the offer.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<CompatibilityListItemProductBased>? Items { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [JsonInheritanceConverter(typeof(CompatibilityListItem), "type")]
    [JsonInheritanceAttribute("TEXT", typeof(CompatibilityListTextItem))]
    [JsonInheritanceAttribute("ID", typeof(CompatibilityListIdItem))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListItem
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListItemProductBased
    {
        /// <summary>
        /// Text description of the compatible item.
        /// </summary>

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListTextItem : CompatibilityListItem
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "TEXT";

        /// <summary>
        /// Text description of the compatible item. Maximum length of the text depends on category where compatible item is used. Should be used in categories where TEXT version of compatible list is supported. See &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource. &lt;a href="../../compatibility_list" target="_blank"&gt;Read more&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListIdItem : CompatibilityListItem
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "ID";

        /// <summary>
        /// Id of the compatible item. Should be used in categories where ID version of compatible list is supported. See &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource. &lt;a href="../../compatibility_list" target="_blank"&gt;Read more&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Text description of the compatible item. When creating (Post) or updating (Put) a compatibility list the field is ignored.
        /// </summary>

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        /// <summary>
        /// Details of the compatible item represented by ID.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        public ICollection<CompatibilityListIdItemAdditionalInfo>? AdditionalInfo { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompatibilityListIdItemAdditionalInfo
    {
        /// <summary>
        /// Additional information describing the compatible item. E.g. for cars it can be an engine code or an equipment version.
        /// </summary>

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Configuration
    {

        [JsonPropertyName("constraintCriteria")]
        public ConstraintCriteria? ConstraintCriteria { get; set; } = default!;

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConstraintCriteria
    {

        [JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// Constraint type. COUNTRY_SAME_QUANTITY is used by additional services that are realised before shipping (e.g. GIFT_WRAP), while COUNTRY_DELIVERY_SAME_QUANTITY is for additional services that are realised in delivery (e.g. CARRY_IN).
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ConstraintCriteriaType? Type { get; set; } = default!;

        /// <summary>
        /// This is used by additional services that are realised in transport (e.g. CARRY_IN), and this field exists together with COUNTRY_DELIVERY_SAME_QUANTITY constraint type. It describes which delivery methods can realise particular service.
        /// </summary>

        [JsonPropertyName("deliveryMethods")]
        public ICollection<JustId>? DeliveryMethods { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactRequest
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("emails")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public ICollection<EmailRequest>? Emails { get; set; } = default!;

        [JsonPropertyName("phones")]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public ICollection<PhonesRequest>? Phones { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactResponse
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("emails")]
        public ICollection<EmailResponse>? Emails { get; set; } = default!;

        [JsonPropertyName("phones")]
        public ICollection<PhonesResponse>? Phones { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactResponseList
    {

        [JsonPropertyName("contacts")]
        public ICollection<ContactResponse>? Contacts { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coordinates
    {

        [JsonPropertyName("lat")]
        [System.ComponentModel.DataAnnotations.Range(-90D, 90D)]
        public double Lat { get; set; } = default!;

        [JsonPropertyName("lon")]
        [System.ComponentModel.DataAnnotations.Range(-180D, 180D)]
        public double Lon { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoriesResponse
    {

        [JsonPropertyName("categories")]
        public ICollection<CategoryResponse>? Categories { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryBasic
    {
        /// <summary>
        /// Additional information about delivery. Parameter is deprecated and will be removed in the future. Additional information is only visible on marketplace `allegro-pl`.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(650)]
        [System.Obsolete]
        public string? AdditionalInfo { get; set; } = default!;

        /// <summary>
        /// Handling time, ISO 8601 duration format. This field must be set to one of the following: PT0S for immediately, PT24H, P2D, P3D, P4D, P5D, P7D, P10D, P14D, P21D, P30D, P60D.
        /// </summary>

        [JsonPropertyName("handlingTime")]
        public string? HandlingTime { get; set; } = default!;

        [JsonPropertyName("shippingRates")]
        public JustId? ShippingRates { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryFull : DeliveryBasic
    {
        /// <summary>
        /// Shipment date, Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
        /// </summary>

        [JsonPropertyName("shipmentDate")]
        public System.DateTimeOffset? ShipmentDate { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionSection
    {

        [JsonPropertyName("items")]
        public ICollection<DescriptionSectionItem>? Items { get; set; } = default!;

    }

    /// <summary>
    /// One of: TextItem, ImageItem
    /// </summary>
    [JsonInheritanceConverter(typeof(DescriptionSectionItem), "type")]
    [JsonInheritanceAttribute("TEXT", typeof(DescriptionSectionItemText))]
    [JsonInheritanceAttribute("IMAGE", typeof(DescriptionSectionItemImage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionSectionItem
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionSectionItemText : DescriptionSectionItem
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "TEXT";

        [JsonPropertyName("content")]
        public string? Content { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionSectionItemImage : DescriptionSectionItem
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "IMAGE";

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailRequest
    {
        /// <summary>
        /// The contact's email address. The user part (before `@`) cannot be longer than 64 characters.
        /// </summary>

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailResponse
    {

        [JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error. This field can be empty.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message will always be in English and give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field. This field can be empty
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the "Accept-Language" header. By default message in English is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    /// <summary>
    /// The list of all the error objects explaining the error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors : System.Collections.ObjectModel.Collection<Error>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorsHolder
    {

        [JsonPropertyName("errors")]
        public Errors? Errors { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthError
    {
        /// <summary>
        /// Authorization error code
        /// </summary>

        [JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        /// <summary>
        /// Authorization error message
        /// </summary>

        [JsonPropertyName("error_description")]
        public string? Error_description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee
    {

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponse
    {
        /// <summary>
        /// Name of the additional services category.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("definitions")]
        public ICollection<CategoryDefinitionResponse>? Definitions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryDefinitionResponse
    {
        /// <summary>
        /// Id of additional service definition.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of additional service definition, that should be shown to the customer.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("description")]
        public CategoryDefinitionDescriptionResponse? Description { get; set; } = default!;

        [JsonPropertyName("maxPrice")]
        public PriceModificationFixedPriceHolder? MaxPrice { get; set; } = default!;

        [JsonPropertyName("availableConstraints")]
        public ICollection<AvailableConstraint>? AvailableConstraints { get; set; } = default!;

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryDefinitionDescriptionResponse
    {
        /// <summary>
        /// Hint for the seller for better description for customers.
        /// </summary>

        [JsonPropertyName("hint")]
        public string? Hint { get; set; } = default!;

        /// <summary>
        /// Determines whether the description of additional service can be set by the seller, or it's provided by Allegro and cannot be changed.
        /// </summary>

        [JsonPropertyName("editable")]
        public bool? Editable { get; set; } = default!;

        /// <summary>
        /// Default description of special additional service, provided by Allegro.
        /// </summary>

        [JsonPropertyName("default")]
        public string? Default { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeePreviewResponse
    {
        /// <summary>
        /// An array of commissions.
        /// </summary>

        [JsonPropertyName("commissions")]
        public ICollection<CommissionResponse>? Commissions { get; set; } = default!;

        /// <summary>
        /// An array of quotes.
        /// </summary>

        [JsonPropertyName("quotes")]
        public ICollection<QuoteResponse>? Quotes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommissionResponse
    {
        /// <summary>
        /// Commission fee name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Commission fee type.
        /// </summary>

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [JsonPropertyName("fee")]
        public PriceModificationFixedPriceHolder? Fee { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteResponse
    {
        /// <summary>
        /// Quote fee name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Quote fee type.
        /// </summary>

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [JsonPropertyName("fee")]
        public PriceModificationFixedPriceHolder? Fee { get; set; } = default!;

        /// <summary>
        /// Duration in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("cycleDuration")]
        public string? CycleDuration { get; set; } = default!;

        [JsonPropertyName("classifiedsPackage")]
        public ClassifiedPackage? ClassifiedsPackage { get; set; } = default!;

    }

    /// <summary>
    /// Command execution summary
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralReport
    {
        /// <summary>
        /// Command ID
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Date of command creation. Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Date of command completion. Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
        /// </summary>

        [JsonPropertyName("completedAt")]
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        [JsonPropertyName("taskCount")]
        public TaskCount? TaskCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Header
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

    }

    /// <summary>
    /// Image url
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageUrl
    {

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarrantyBasic
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JustId
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// The information on the offer in an external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalId
    {
        /// <summary>
        /// The ID of the offer in the external system.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// for offer with a delivery method it is a parcel dispatch location. For offers with personal pick-up it is a pick-up location, additionally we recommend to use points of service (&lt;a href="../../documentation/#tag/Points-of-service" target="_blank"&gt;https://developer.allegro.pl/documentation/#tag/Points-of-service&lt;/a&gt;)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The 2-letter country code as defined in ISO 3166.
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The format of post code depends on 'countryCode'. For countryCode equal to 'PL', the expected format is 'XX-XXX', for other countries format is less restrictive - 12 characters or less are expected.
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? PostCode { get; set; } = default!;

        /// <summary>
        /// This field is mandatory if countryCode is set to "PL", for other values, currently, it is ignored. For countryCode equalling "PL", this field must be set to one of the following: DOLNOSLASKIE, KUJAWSKO_POMORSKIE, LUBELSKIE, LUBUSKIE, LODZKIE, MALOPOLSKIE, MAZOWIECKIE, OPOLSKIE, PODKARPACKIE, PODLASKIE, POMORSKIE, SLASKIE, SWIETOKRZYSKIE, WARMINSKO_MAZURSKIE, WIELKOPOLSKIE, ZACHODNIOPOMORSKIE.
        /// </summary>

        [JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

    }

    /// <summary>
    /// Contains fields to change
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Modification
    {

        [JsonPropertyName("additionalServicesGroup")]
        public AdditionalServicesGroup? AdditionalServicesGroup { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public ModificationDelivery? Delivery { get; set; } = default!;

        [JsonPropertyName("discounts")]
        public ModificationDiscounts? Discounts { get; set; } = default!;

        [JsonPropertyName("location")]
        public Location? Location { get; set; } = default!;

        [JsonPropertyName("payments")]
        public ModificationPayments? Payments { get; set; } = default!;

        [JsonPropertyName("sizeTable")]
        public SizeTable? SizeTable { get; set; } = default!;

        [JsonPropertyName("publication")]
        public ModificationPublication? Publication { get; set; } = default!;

    }

    /// <summary>
    /// Contains shipping rates to change
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificationDelivery
    {

        [JsonPropertyName("shippingRates")]
        public ShippingRates? ShippingRates { get; set; } = default!;

    }

    /// <summary>
    /// Allows you to assign/unassign discounts (rebates) to/from offers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificationDiscounts
    {

        [JsonPropertyName("wholesalePriceList")]
        public WholesalePriceList? WholesalePriceList { get; set; } = default!;

    }

    /// <summary>
    /// Allows you to change duration or additional marketplaces of the offers. You can include only property in a request "duration" or "durationUnlimited" or "marketplaces".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificationPublication
    {
        /// <summary>
        /// Offer duration time provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        /// </summary>

        [JsonPropertyName("duration")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ModificationPublicationDuration? Duration { get; set; } = default!;

        /// <summary>
        /// Unlimited duration time.
        /// </summary>

        [JsonPropertyName("durationUnlimited")]
        public bool? DurationUnlimited { get; set; } = default!;

        /// <summary>
        /// Additional marketplaces change
        /// </summary>

        [JsonPropertyName("marketplaces")]
        public Marketplaces? Marketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificationPayments
    {
        /// <summary>
        /// Invoice type: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE
        /// </summary>

        [JsonPropertyName("invoice")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ModificationPaymentsInvoice? Invoice { get; set; } = default!;

        [JsonPropertyName("tax")]
        public Tax? Tax { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTable
    {
        /// <summary>
        /// Id of size table
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Id of contact.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferFundraisingCampaignRequest
    {
        /// <summary>
        /// Id of fundraising campaign.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of fundraising campaign.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferFundraisingCampaignResponse
    {
        /// <summary>
        /// Id of fundraising campaign.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Offer additional services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferAdditionalServicesRequest
    {
        /// <summary>
        /// Id of additional services.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of additional services.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferAdditionalServicesResponse
    {
        /// <summary>
        /// Id of additional services.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// An array of offer attachments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferAttachment : System.Collections.ObjectModel.Collection<Anonymous11>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferAttachment
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AttachmentType? Type { get; set; } = default!;

        [JsonPropertyName("file")]
        public AttachmentFile? File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicOfferPreviewRequest
    {

        [JsonPropertyName("offer")]
        public PricingOffer? Offer { get; set; } = default!;

        [JsonPropertyName("classifiedsPackages")]
        public ClassifiedsPackages? ClassifiedsPackages { get; set; } = default!;

        /// <summary>
        /// The marketplace on which the offer should be previewed. If omitted, it will default to the base marketplace.
        /// </summary>

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedsPackages
    {

        [JsonPropertyName("basePackage")]
        public ClassifiedPackage? BasePackage { get; set; } = default!;

        /// <summary>
        /// An array of extra packages.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<ClassifiedExtraPackage>? ExtraPackages { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPackage
    {
        /// <summary>
        /// The classifieds package ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedExtraPackage
    {
        /// <summary>
        /// The classifieds extra package ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Extra package with this flag set to true will be recreated when offer is being republished
        /// </summary>

        [JsonPropertyName("republish")]
        public bool? Republish { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferAttachmentRequest
    {

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AttachmentType? Type { get; set; } = default!;

        [JsonPropertyName("file")]
        public AttachmentFileRequest? File { get; set; } = default!;

    }

    /// <summary>
    /// offer attachment type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttachmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SPECIAL_OFFER_RULES")]
        SPECIAL_OFFER_RULES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPETITION_RULES")]
        COMPETITION_RULES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOOK_EXCERPT")]
        BOOK_EXCERPT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_MANUAL")]
        USER_MANUAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INSTALLATION_INSTRUCTIONS")]
        INSTALLATION_INSTRUCTIONS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_INSTRUCTIONS")]
        GAME_INSTRUCTIONS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ENERGY_LABEL")]
        ENERGY_LABEL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_INFORMATION_SHEET")]
        PRODUCT_INFORMATION_SHEET = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TIRE_LABEL")]
        TIRE_LABEL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SAFETY_INFORMATION_MANUAL")]
        SAFETY_INFORMATION_MANUAL = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentFile
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Url { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentFileRequest
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferImageLinkUploadRequest
    {
        /// <summary>
        /// URL of the image. It has to contain domain name, not an IP address. Currently we support http and https protocols. When using https the certificate chain needs to be valid.
        /// </summary>

        [JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferImageUploadResponse
    {
        /// <summary>
        /// Date of file expiration (removal from the server). We will remove it unless you use it in your offer.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        public System.DateTimeOffset? ExpiresAt { get; set; } = default!;

        /// <summary>
        /// Link to the uploaded image
        /// </summary>

        [JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

    }

    /// <summary>
    /// Single offer data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingOffer
    {

        [JsonPropertyName("fundraisingCampaign")]
        public JustId? FundraisingCampaign { get; set; } = default!;

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("category")]
        public Category? Category { get; set; } = default!;

        [JsonPropertyName("parameters")]
        public ICollection<Parameter>? Parameters { get; set; } = default!;

        [JsonPropertyName("promotion")]
        public Promotion? Promotion { get; set; } = default!;

        [JsonPropertyName("publication")]
        public PricingPublication? Publication { get; set; } = default!;

        [JsonPropertyName("sellingMode")]
        public SellingModeWithNetPrice? SellingMode { get; set; } = default!;

    }

    /// <summary>
    /// Modification command payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferChangeCommand
    {

        [JsonPropertyName("modification")]
        public Modification? Modification { get; set; } = default!;

        /// <summary>
        /// List of offer criteria
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        public ICollection<OfferCriterium>? OfferCriteria { get; set; } = default!;

    }

    /// <summary>
    /// Price modification command payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPriceChangeCommand
    {

        [JsonPropertyName("modification")]
        public PriceModification? Modification { get; set; } = default!;

        /// <summary>
        /// List of offer criteria
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        public ICollection<OfferCriterium>? OfferCriteria { get; set; } = default!;

    }

    /// <summary>
    /// The way the offer price should be changed. One of three ways is possible: new price, increase/decrease price, percentage change and only one can be chosen at once.
    /// </summary>
    [JsonInheritanceConverter(typeof(PriceModification), "type")]
    [JsonInheritanceAttribute("FIXED_PRICE", typeof(PriceModificationFixedPrice))]
    [JsonInheritanceAttribute("INCREASE_PRICE", typeof(PriceModificationValueChangeIncrease))]
    [JsonInheritanceAttribute("DECREASE_PRICE", typeof(PriceModificationValueChangeDecrease))]
    [JsonInheritanceAttribute("INCREASE_PERCENTAGE", typeof(PriceModificationPercentageChangeIncrease))]
    [JsonInheritanceAttribute("DECREASE_PERCENTAGE", typeof(PriceModificationPercentageChangeDecrease))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModification
    {
        /// <summary>
        /// The marketplace on which the price of the offer should be changed. If omitted, the price will be changed on the base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationFixedPrice : PriceModification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "FIXED_PRICE";

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationValueChangeIncrease : PriceModification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "INCREASE_PRICE";

        [JsonPropertyName("value")]
        public PriceModificationFixedPriceHolder? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationValueChangeDecrease : PriceModification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "DECREASE_PRICE";

        [JsonPropertyName("value")]
        public PriceModificationFixedPriceHolder? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationPercentageChangeIncrease : PriceModification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "INCREASE_PERCENTAGE";

        [JsonPropertyName("percentage")]
        public string Percentage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationPercentageChangeDecrease : PriceModification
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "DECREASE_PERCENTAGE";

        [JsonPropertyName("percentage")]
        public string Percentage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The price data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceModificationFixedPriceHolder
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

    }

    /// <summary>
    /// Quantity modification command payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferQuantityChangeCommand
    {

        [JsonPropertyName("modification")]
        public QuantityModification? Modification { get; set; } = default!;

        /// <summary>
        /// List of offer criteria
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        public ICollection<OfferCriterium>? OfferCriteria { get; set; } = default!;

    }

    /// <summary>
    /// The way the offer quantity should be changed. One of two ways is possible: new quantity, increase/decrease quantity and only one can be chosen at once.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuantityModification
    {
        /// <summary>
        /// modification type
        /// </summary>

        [JsonPropertyName("changeType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public QuantityModificationChangeType? ChangeType { get; set; } = default!;

        /// <summary>
        /// - For changeType = "FIXED", a new stock quantity &gt; 0
        /// <br/>- For changeType = "GAIN", an increase/decrease in stock quantity
        /// </summary>

        [JsonPropertyName("value")]
        public int? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerRebateOfferCriterion
    {
        /// <summary>
        /// Set of offers – only if `type` is `CONTAINS_OFFERS`
        /// </summary>

        [JsonPropertyName("offers")]
        public ICollection<offers>? Offers { get; set; } = default!;

        /// <summary>
        /// Criteria type: CONTAINS_OFFERS or OFFERS_ASSIGNED_EXTERNALLY
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SellerRebateOfferCriterionType Type { get; set; } = default!;

    }

    /// <summary>
    /// Contains offers criteria
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferCriterium
    {
        /// <summary>
        /// Set of offers
        /// </summary>

        [JsonPropertyName("offers")]
        public ICollection<OfferId>? Offers { get; set; } = default!;

        /// <summary>
        /// Criteria type: CONTAINS_OFFERS
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferCriteriumType? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferId
    {
        /// <summary>
        /// Offer id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferQuoteDto
    {

        [JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [JsonPropertyName("fee")]
        public Fee? Fee { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("nextDate")]
        public System.DateTimeOffset? NextDate { get; set; } = default!;

        [JsonPropertyName("offer")]
        public OfferId? Offer { get; set; } = default!;

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferQuotesDto
    {

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("quotes")]
        public ICollection<OfferQuoteDto>? Quotes { get; set; } = default!;

    }

    /// <summary>
    /// Data objects containing details for counted events per offer. Includes a list of OfferStatResponseDto grouped by date and a list of ClassifiedEventStat grouped by EventType for a specific period.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferStatsResponseDto
    {

        [JsonPropertyName("offerStats")]
        public ICollection<OfferStatResponseDto>? OfferStats { get; set; } = default!;

    }

    /// <summary>
    /// Data class for a specific seller events. Includes a list of OfferStatResponseDto grouped by date and a list of ClassifiedEventStat grouped by EventType for a specific period.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerOfferStatsResponseDto
    {

        [JsonPropertyName("eventStatsTotal")]
        public ICollection<ClassifiedEventStat>? EventStatsTotal { get; set; } = default!;

        [JsonPropertyName("eventsPerDay")]
        public ICollection<ClassifiedDailyEventStatResponseDto>? EventsPerDay { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferStatResponseDto
    {

        [JsonPropertyName("offer")]
        public OfferStatModelDto? Offer { get; set; } = default!;

        [JsonPropertyName("eventStatsTotal")]
        public ICollection<ClassifiedEventStat>? EventStatsTotal { get; set; } = default!;

        [JsonPropertyName("eventsPerDay")]
        public ICollection<ClassifiedDailyEventStatResponseDto>? EventsPerDay { get; set; } = default!;

    }

    /// <summary>
    /// Offer details data, containg offer identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferStatModelDto
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedEventStat
    {

        [JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("eventType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ClassifiedStatEventType? EventType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedDailyEventStatResponseDto
    {
        /// <summary>
        /// Date in format yyyy-MM-dd
        /// </summary>

        [JsonPropertyName("date")]
        public string? Date { get; set; } = default!;

        /// <summary>
        /// List of event types with number of occurrences.
        /// </summary>

        [JsonPropertyName("eventStats")]
        public ICollection<ClassifiedEventStat>? EventStats { get; set; } = default!;

    }

    /// <summary>
    /// Classified statistical event type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassifiedStatEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHOWED_PHONE_NUMBER")]
        SHOWED_PHONE_NUMBER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ASKED_QUESTION")]
        ASKED_QUESTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLICKED_ASK_QUESTION")]
        CLICKED_ASK_QUESTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDED_TO_FAVOURITES")]
        ADDED_TO_FAVOURITES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED_FROM_FAVOURITES")]
        REMOVED_FROM_FAVOURITES = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenHour
    {
        /// <summary>
        /// Days of the week: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY. Date format ISO 8601
        /// </summary>

        [JsonPropertyName("dayOfWeek")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DayOfWeek { get; set; } = default!;

        /// <summary>
        /// Date format (ISO 8601) - HH:mm:ss.SSS
        /// </summary>

        [JsonPropertyName("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; } = default!;

        /// <summary>
        /// Date format (ISO 8601) - HH:mm:ss.SSS
        /// </summary>

        [JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {
        /// <summary>
        /// Order id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// List of order offers
        /// </summary>

        [JsonPropertyName("offers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<offers2> Offers { get; set; } = new System.Collections.ObjectModel.Collection<offers2>();

    }

    /// <summary>
    /// Offer's parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

    }

    [JsonInheritanceConverter(typeof(CategoryParameter), "type")]
    [JsonInheritanceAttribute("integer", typeof(IntegerCategoryParameter))]
    [JsonInheritanceAttribute("float", typeof(FloatCategoryParameter))]
    [JsonInheritanceAttribute("string", typeof(StringCategoryParameter))]
    [JsonInheritanceAttribute("dictionary", typeof(DictionaryCategoryParameter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameter
    {
        /// <summary>
        /// The ID of the parameter.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The name of the parameter in Polish.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Indicates whether the value of this parameter must be set in an offer. Offers without required parameters set cannot be published. See also `requiredIf`.
        /// </summary>

        [JsonPropertyName("required")]
        public bool? Required { get; set; } = default!;

        /// <summary>
        /// Indicates whether the value of this parameter must be set in a product. Product without required parameters set cannot be created.
        /// </summary>

        [JsonPropertyName("requiredForProduct")]
        public bool? RequiredForProduct { get; set; } = default!;

        [JsonPropertyName("requiredIf")]
        public CategoryParameterRequirementConditions? RequiredIf { get; set; } = default!;

        [JsonPropertyName("displayedIf")]
        public CategoryParameterDisplayConditions? DisplayedIf { get; set; } = default!;

        /// <summary>
        /// The unit in which values of the parameter are used. May be `null`.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        [JsonPropertyName("options")]
        public CategoryParameterOptions? Options { get; set; } = default!;

    }

    [JsonInheritanceConverter(typeof(CategoryProductParameter), "type")]
    [JsonInheritanceAttribute("integer", typeof(IntegerCategoryProductParameter))]
    [JsonInheritanceAttribute("float", typeof(FloatCategoryProductParameter))]
    [JsonInheritanceAttribute("string", typeof(StringCategoryProductParameter))]
    [JsonInheritanceAttribute("dictionary", typeof(DictionaryCategoryProductParameter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryProductParameter
    {
        /// <summary>
        /// The ID of the parameter.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The name of the parameter in Polish.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Indicates whether the value of this parameter must be set in a product. Product without required parameters set cannot be created. See also `requiredIf`.
        /// </summary>

        [JsonPropertyName("required")]
        public bool? Required { get; set; } = default!;

        [JsonPropertyName("requiredIf")]
        public CategoryParameterRequirementConditions? RequiredIf { get; set; } = default!;

        [JsonPropertyName("displayedIf")]
        public CategoryParameterDisplayConditions? DisplayedIf { get; set; } = default!;

        /// <summary>
        /// The unit in which values of the parameter are used. May be `null`.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DictionaryCategoryProductParameter : CategoryProductParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "dictionary";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions? Restrictions { get; set; } = default!;

        /// <summary>
        /// Defines the values accepted for this parameter.
        /// </summary>

        [JsonPropertyName("dictionary")]
        public ICollection<Dictionary>? Dictionary { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegerCategoryProductParameter : CategoryProductParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "integer";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions2? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FloatCategoryProductParameter : CategoryProductParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "float";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions3? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringCategoryProductParameter : CategoryProductParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "string";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions4? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A list of the different options which can be used with this parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterOptions
    {
        /// <summary>
        /// Parameters with this option enabled can be used for offer variants creation.
        /// </summary>

        [JsonPropertyName("variantsAllowed")]
        public bool? VariantsAllowed { get; set; } = default!;

        /// <summary>
        /// All offer variants must have the same values in parameters with this option enabled.
        /// </summary>

        [JsonPropertyName("variantsEqual")]
        public bool? VariantsEqual { get; set; } = default!;

        /// <summary>
        /// Indicates what value in the dictionary is defined as an ambiguous one. Only parameters with dictionaries might have this option defined.
        /// </summary>

        [JsonPropertyName("ambiguousValueId")]
        public string? AmbiguousValueId { get; set; } = default!;

        /// <summary>
        /// Indicates whether this parameter's allowed values depend on another parameter's values. This field is set
        /// <br/>only for dictionary parameters which have at least one dictionary value with dependent values (see also
        /// <br/>`dictionary[].dependsOnValueIds`). Otherwise this field is null.
        /// <br/>
        /// </summary>

        [JsonPropertyName("dependsOnParameterId")]
        public string? DependsOnParameterId { get; set; } = default!;

        /// <summary>
        /// Indicates if parameter is used to define products.
        /// </summary>

        [JsonPropertyName("describesProduct")]
        public bool? DescribesProduct { get; set; } = default!;

        /// <summary>
        /// Indicates if a custom value can be added to a parameter with an ambiguous value.
        /// </summary>

        [JsonPropertyName("customValuesEnabled")]
        public bool? CustomValuesEnabled { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DictionaryCategoryParameter : CategoryParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "dictionary";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions5? Restrictions { get; set; } = default!;

        /// <summary>
        /// Defines the values accepted for this parameter.
        /// </summary>

        [JsonPropertyName("dictionary")]
        public ICollection<dictionary>? Dictionary { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegerCategoryParameter : CategoryParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "integer";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions6? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FloatCategoryParameter : CategoryParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "float";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions7? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringCategoryParameter : CategoryParameter
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "string";

        /// <summary>
        /// The restrictions on values of this parameter.
        /// </summary>

        [JsonPropertyName("restrictions")]
        public Restrictions8? Restrictions { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameter's range value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterRangeValue
    {

        [JsonPropertyName("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; } = default!;

        [JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; } = default!;

    }

    /// <summary>
    /// Restricts the circumstances when this parameter is required. `null` if solely the `required` flag determines if this parameter is required. Present if this parameter is required only if all of the contained conditions of all condition types are fulfilled. At least one condition is contained if this field is present.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterRequirementConditions
    {
        /// <summary>
        /// Condition type which requires this parameter only if each of the given other parameters has filled in one of the respective given value ids in an offer or product. Empty if no condition of this type is present.
        /// </summary>

        [JsonPropertyName("parametersWithValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategoryParameterWithValue> ParametersWithValue { get; set; } = new System.Collections.ObjectModel.Collection<CategoryParameterWithValue>();

        /// <summary>
        /// Condition type which requires this parameter only if each of the given other parameters has filled neither a value nor a value id in an offer or product. Empty if no condition of this type is present.
        /// </summary>

        [JsonPropertyName("parametersWithoutValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategoryParameterWithoutValue> ParametersWithoutValue { get; set; } = new System.Collections.ObjectModel.Collection<CategoryParameterWithoutValue>();

    }

    /// <summary>
    /// Restricts the circumstances when this parameter should be displayed e.g. on a user form. `null` if this parameter is displayed always. Present if this parameter should be displayed only if all of the contained conditions of all condition types are fulfilled. At least one condition is contained if this field is present.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterDisplayConditions
    {
        /// <summary>
        /// Condition type which displays this parameter only if each of the given other parameters has filled in one of the respective given value ids in an offer or product. Empty if no condition of this type is present.
        /// </summary>

        [JsonPropertyName("parametersWithValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CategoryParameterWithValue> ParametersWithValue { get; set; } = new System.Collections.ObjectModel.Collection<CategoryParameterWithValue>();

        /// <summary>
        /// Always empty. This field will be removed.
        /// </summary>

        [JsonPropertyName("parametersWithoutValue")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.Obsolete]
        public ICollection<CategoryParameterWithoutValue> ParametersWithoutValue { get; set; } = new System.Collections.ObjectModel.Collection<CategoryParameterWithoutValue>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterWithValue
    {
        /// <summary>
        /// Id of another parameter with a value dictionary.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A list of value ids. One of them must be chosen in order to fulfill this condition. Not empty.
        /// </summary>

        [JsonPropertyName("oneOfValueIds")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<string> OneOfValueIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterWithoutValue
    {
        /// <summary>
        /// Id of another parameter.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryParameterList
    {
        /// <summary>
        /// The list of parameters supported by the category.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<CategoryParameter>? Parameters { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryProductParameterList
    {
        /// <summary>
        /// The list of product parameters supported by the category.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<CategoryProductParameter>? Parameters { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        /// <summary>
        /// Available forms of payment: CASH - cash, CARD - card.
        /// </summary>

        [JsonPropertyName("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payments
    {
        /// <summary>
        /// Invoice type
        /// </summary>

        [JsonPropertyName("invoice")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PaymentsInvoice? Invoice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhonesRequest
    {
        /// <summary>
        /// A valid phone number
        /// </summary>

        [JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string? Number { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhonesResponse
    {

        [JsonPropertyName("number")]
        public string? Number { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pos
    {
        /// <summary>
        /// UUID. When creating a point of service (Post) the field is ignored. It is required when updating (Put) a point of service.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// ID from external client system.
        /// </summary>

        [JsonPropertyName("externalId")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? ExternalId { get; set; } = default!;

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("seller")]
        public Seller? Seller { get; set; } = default!;

        /// <summary>
        /// Indicates point type. The only valid value so far is PICKUP_POINT.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        [JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PhoneNumber { get; set; } = default!;

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// IDs for a location. When creating (Post) or updating (Put) a point of service the field is ignored.
        /// </summary>

        [JsonPropertyName("locations")]
        public ICollection<PosLocation>? Locations { get; set; } = default!;

        /// <summary>
        /// Possible empty list of opening hours.
        /// </summary>

        [JsonPropertyName("openHours")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OpenHour> OpenHours { get; set; } = new System.Collections.ObjectModel.Collection<OpenHour>();

        /// <summary>
        /// Delivery time / Time period for receipt. Date format ISO 8601 e.g. 'PT24H'
        /// </summary>

        [JsonPropertyName("serviceTime")]
        public string? ServiceTime { get; set; } = default!;

        /// <summary>
        /// An empty list of payment types is available.
        /// </summary>

        [JsonPropertyName("payments")]
        public ICollection<Payment>? Payments { get; set; } = default!;

        /// <summary>
        /// Confirmation method: AWAIT_CONTACT - We will inform you about the time of receipt, CALL_US - Please make an appointment, CONTACT_NOT_REQUIRED - Contact is not required.
        /// </summary>

        [JsonPropertyName("confirmationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmationType { get; set; } = default!;

        /// <summary>
        /// Point of service status: ACTIVE - active, TEMPORARILY_CLOSED - temporarily closed, CLOSED_DOWN - closed down, DELETED - deleted.
        /// </summary>

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Creation date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service the field is ignored.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public string? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Modification date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service the field is ignored.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public string? UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PosLocation
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// The processing status of the command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"QUEUEING")]
        QUEUEING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATED_AND_RUNNING")]
        VALIDATED_AND_RUNNING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING_BUT_WITH_ERRORS")]
        RUNNING_BUT_WITH_ERRORS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL")]
        SUCCESSFUL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_SUCCESS")]
        PARTIAL_SUCCESS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 6,

    }

    /// <summary>
    /// Promo options on base marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Promotion
    {

        [JsonPropertyName("emphasized1d")]
        public bool? Emphasized1d { get; set; } = default!;

        [JsonPropertyName("emphasized10d")]
        public bool? Emphasized10d { get; set; } = default!;

        [JsonPropertyName("promoPackage")]
        public bool? PromoPackage { get; set; } = default!;

        [JsonPropertyName("departmentPage")]
        public bool? DepartmentPage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicTableDto
    {
        /// <summary>
        /// size table headers
        /// </summary>

        [JsonPropertyName("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Header> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Header>();

        /// <summary>
        /// size table id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// size table name
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("template")]
        public JustId? Template { get; set; } = default!;

        /// <summary>
        /// size table cells
        /// </summary>

        [JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Cells> Values { get; set; } = new System.Collections.ObjectModel.Collection<Cells>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicTablesDto
    {

        [JsonPropertyName("tables")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PublicTableDto> Tables { get; set; } = new System.Collections.ObjectModel.Collection<PublicTableDto>();

    }

    /// <summary>
    /// size table template image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTableTemplateImageResponse
    {

        [JsonPropertyName("captions")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Caption> Captions { get; set; } = new System.Collections.ObjectModel.Collection<Caption>();

        [JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTableTemplateResponse
    {
        /// <summary>
        /// size table template id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// size table template name
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("image")]
        public SizeTableTemplateImageResponse? Image { get; set; } = default!;

        /// <summary>
        /// size table template headers
        /// </summary>

        [JsonPropertyName("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Header> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Header>();

        /// <summary>
        /// size table template cells
        /// </summary>

        [JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Cells> Values { get; set; } = new System.Collections.ObjectModel.Collection<Cells>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTableTemplatesResponse
    {
        /// <summary>
        /// size tables templates
        /// </summary>

        [JsonPropertyName("templates")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SizeTableTemplateResponse> Templates { get; set; } = new System.Collections.ObjectModel.Collection<SizeTableTemplateResponse>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTablePostRequest
    {
        /// <summary>
        /// size table name
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required]
        public JustId Template { get; set; } = new JustId();

        /// <summary>
        /// size table headers
        /// </summary>

        [JsonPropertyName("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Header> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Header>();

        /// <summary>
        /// size table cells
        /// </summary>

        [JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Cells> Values { get; set; } = new System.Collections.ObjectModel.Collection<Cells>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTablePutRequest
    {
        /// <summary>
        /// size table name
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// size table headers
        /// </summary>

        [JsonPropertyName("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Header> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Header>();

        /// <summary>
        /// size table cells
        /// </summary>

        [JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Cells> Values { get; set; } = new System.Collections.ObjectModel.Collection<Cells>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingPublication
    {

        [JsonPropertyName("duration")]
        public string Duration { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication
    {

        [JsonPropertyName("duration")]
        public string Duration { get; set; } = default!;

        [JsonPropertyName("endingAt")]
        public System.DateTimeOffset EndingAt { get; set; } = default!;

        [JsonPropertyName("marketplaces")]
        public OfferMarketplaces? Marketplaces { get; set; } = default!;

        [JsonPropertyName("startingAt")]
        public System.DateTimeOffset StartingAt { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferStatus? Status { get; set; } = default!;

        /// <summary>
        /// Indicates the reason for ending the offer:
        /// <br/> - `USER` - offer ended by the seller.
        /// <br/> - `ADMIN` - offer ended by an admin.
        /// <br/> - `EXPIRATION` - offer duration had expired (valid for offers with specified duration).
        /// <br/> - `EMPTY_STOCK` - offer ended because all available items had been sold out.
        /// <br/> - `PRODUCT_DETACHMENT` - offer ended because its link to the product was removed. Status will only occur
        /// <br/>   if the base marketplace of offer requires full productization.
        /// <br/> - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
        /// <br/>   success status, but further processing failed.
        /// </summary>

        [JsonPropertyName("endedBy")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PublicationEndedBy? EndedBy { get; set; } = default!;

        /// <summary>
        /// Whether to republish an offer after ending. Automatically republish offers or auctions:&lt;/br&gt; - `BUY_NOW` offer type are republished with initial stock, regardless of how many items you have sold.&lt;/br&gt; - `AUCTION` offer type are republished only if they were not concluded with purchase.&lt;/br&gt; - `ADVERTISEMENT` offer type are republished until it will be finished manually.
        /// </summary>

        [JsonPropertyName("republish")]
        public bool? Republish { get; set; } = default!;

    }

    /// <summary>
    /// Publication modification command payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicationChangeCommandDto
    {
        /// <summary>
        /// List of offer criteria
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        public ICollection<OfferCriterium>? OfferCriteria { get; set; } = default!;

        [JsonPropertyName("publication")]
        public Publication_modification? Publication { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rates
    {
        /// <summary>
        /// Delivery rate value
        /// </summary>

        [JsonPropertyName("delivery")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public RatesDelivery? Delivery { get; set; } = default!;

        /// <summary>
        /// Delivery cost rate value
        /// </summary>

        [JsonPropertyName("deliveryCost")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public RatesDeliveryCost? DeliveryCost { get; set; } = default!;

        /// <summary>
        /// Description rate value
        /// </summary>

        [JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public RatesDescription? Description { get; set; } = default!;

        /// <summary>
        /// Service rate value
        /// </summary>

        [JsonPropertyName("service")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public RatesService? Service { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Removal
    {
        /// <summary>
        /// Date until a removal request can be submitted in ISO 8601 format
        /// </summary>

        [JsonPropertyName("possibleTo")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PossibleTo { get; set; } = default!;

        [JsonPropertyName("request")]
        public RemovalRequest? Request { get; set; } = default!;

    }

    /// <summary>
    /// Submitted removal request, null if removal was not requested
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemovalRequest
    {
        /// <summary>
        /// Removal request creation datetime in ISO 8601 format
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

        /// <summary>
        /// Message containing explanation for removing rating
        /// </summary>

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        /// <summary>
        /// Message containing information who requested removing of a rating
        /// </summary>

        [JsonPropertyName("source")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RemovalRequestSource? Source { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRatingRemovalRequest
    {

        [JsonPropertyName("request")]
        [System.ComponentModel.DataAnnotations.Required]
        public Request Request { get; set; } = new Request();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicyBasic
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult
    {

        [JsonPropertyName("posList")]
        public ICollection<Pos>? PosList { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Seller
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerCreateRebateRequestDto
    {
        /// <summary>
        /// What kind of rebate will be given
        /// </summary>

        [JsonPropertyName("benefits")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Benefit> Benefits { get; set; } = new System.Collections.ObjectModel.Collection<Benefit>();

        /// <summary>
        /// What offers will be included
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SellerRebateOfferCriterion> OfferCriteria { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateOfferCriterion>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerRebateDto
    {
        /// <summary>
        /// What kind of rebate will be given
        /// </summary>

        [JsonPropertyName("benefits")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Benefit> Benefits { get; set; } = new System.Collections.ObjectModel.Collection<Benefit>();

        /// <summary>
        /// when was this rebate created
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Rebate identifier
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// What offers will be included
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SellerRebateOfferCriterion> OfferCriteria { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateOfferCriterion>();

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SellerRebateDtoStatus Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerRebatesDto
    {

        [JsonPropertyName("promotions")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SellerRebateDto> Promotions { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateDto>();

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingRate
    {

        [JsonPropertyName("deliveryMethod")]
        [System.ComponentModel.DataAnnotations.Required]
        public DeliveryMethod DeliveryMethod { get; set; } = new DeliveryMethod();

        /// <summary>
        /// Maximum quantity per package for the given delivery method. Minimum value is 1.
        /// </summary>

        [JsonPropertyName("maxQuantityPerPackage")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int MaxQuantityPerPackage { get; set; } = default!;

        /// <summary>
        /// Maximum weight of a package for the given delivery method (allowed only for methods with shippingRatesConstraints.maxPackageWeight.supported set to true in the delivery-methods resource). If not set, only maxQuantityPerPackage will be used to calculate the number of packages. Please note that the weight value must be the same for both related delivery methods, i.e. with `IN_ADVANCE` and `CASH_ON_DELIVERY` payment policy if both methods are in the shipping rates set.
        /// </summary>

        [JsonPropertyName("maxPackageWeight")]
        public MaxPackageWeight? MaxPackageWeight { get; set; } = default!;

        /// <summary>
        /// Rate for the first item in the parcel for the given delivery method. The rate amount and currency must comply with the shippingRatesConstraints.firstItemRate restrictions described in the delivery-methods resource.
        /// </summary>

        [JsonPropertyName("firstItemRate")]
        [System.ComponentModel.DataAnnotations.Required]
        public FirstItemRate FirstItemRate { get; set; } = new FirstItemRate();

        /// <summary>
        /// Rate for every other item, after the first, in the same parcel for the given delivery method. The rate amount and currency must comply with the shippingRatesConstraints.nextItemRate restrictions described in the delivery-methods resource.
        /// </summary>

        [JsonPropertyName("nextItemRate")]
        [System.ComponentModel.DataAnnotations.Required]
        public NextItemRate NextItemRate { get; set; } = new NextItemRate();

        /// <summary>
        /// Custom shipping time for the given delivery method (allowed only for methods with shippingRatesConstraints.shippingTime.customizable set to true in the delivery-methods resource). If not set the default shipping time specified in the delivery-methods resource is used.
        /// </summary>

        [JsonPropertyName("shippingTime")]
        public ShippingTime? ShippingTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingRates
    {
        /// <summary>
        /// Id of shipping rates
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferShippingRates
    {
        /// <summary>
        /// If empty there is the shipping rates set attached to offer. You should use the GET /sale/offers/{offerId} resource to retrieve the shipping rates set ID.
        /// </summary>

        [JsonPropertyName("rates")]
        public ICollection<ShippingRate>? Rates { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingRatesSet
    {
        /// <summary>
        /// Shipping rates set ID (UUID) When creating a shipping rates set (Post) the field is ignored. It is required when updating (Put) a shipping rates.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// User defined name of the shipping rates set. It may only contain: letters, numbers, hyphens, dots, commas and spaces.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("rates")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ShippingRate> Rates { get; set; } = new System.Collections.ObjectModel.Collection<ShippingRate>();

        /// <summary>
        /// Date and time of the last modification of the set in UTC ISO 8601 format. When creating (Post) or updating (Put) a shipping rates set the field is ignored.
        /// </summary>

        [JsonPropertyName("lastModified")]
        public string? LastModified { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliverySettingsResponse
    {
        /// <summary>
        /// Marketplace for which delivery settings were returned.
        /// </summary>

        [JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace Marketplace { get; set; } = new Marketplace();

        /// <summary>
        /// A minimum total order amount required to qualify for free domestic delivery (for example for allegro-cz marketplace, only Czechia is treated as domestic).
        /// </summary>

        [JsonPropertyName("freeDelivery")]
        public FreeDelivery? FreeDelivery { get; set; } = default!;

        /// <summary>
        /// A minimum total order amount required to qualify for free foreign delivery (for example for allegro-cz marketplace, all delivery countries other than Czechia are treated as foreign).
        /// </summary>

        [JsonPropertyName("abroadFreeDelivery")]
        public AbroadFreeDelivery? AbroadFreeDelivery { get; set; } = default!;

        /// <summary>
        /// Policy of calculating delivery costs.
        /// </summary>

        [JsonPropertyName("joinPolicy")]
        [System.ComponentModel.DataAnnotations.Required]
        public JoinPolicy JoinPolicy { get; set; } = new JoinPolicy();

        /// <summary>
        /// Policy of custom delivery cost.
        /// </summary>

        [JsonPropertyName("customCost")]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomCost CustomCost { get; set; } = new CustomCost();

        /// <summary>
        /// Date and time of the last modification of the set in UTC ISO 8601 format.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliverySettingsRequest
    {
        /// <summary>
        /// The marketplace for which delivery settings will be modified. By default (if the marketplace parameter is not set) the marketplace on which the seller has registered is used. However, we recommend that the marketplace parameter should always be explicitly set.
        /// </summary>

        [JsonPropertyName("marketplace")]
        public Marketplace2? Marketplace { get; set; } = default!;

        /// <summary>
        /// A minimum total order amount required to qualify for free domestic delivery (for example for allegro-cz marketplace, only Czechia is treated as domestic). If you do not want to set free domestic delivery threshold, do not set this value.
        /// </summary>

        [JsonPropertyName("freeDelivery")]
        public FreeDelivery2? FreeDelivery { get; set; } = default!;

        /// <summary>
        /// A minimum total order amount required to qualify for free foreign delivery (for example for allegro-cz marketplace, all delivery countries other than Czechia are treated as foreign). If you do not want to set free foreign delivery threshold, do not set this value.
        /// </summary>

        [JsonPropertyName("abroadFreeDelivery")]
        public AbroadFreeDelivery2? AbroadFreeDelivery { get; set; } = default!;

        /// <summary>
        /// Policy of calculating delivery costs.
        /// </summary>

        [JsonPropertyName("joinPolicy")]
        [System.ComponentModel.DataAnnotations.Required]
        public JoinPolicy2 JoinPolicy { get; set; } = new JoinPolicy2();

        /// <summary>
        /// Policy of custom delivery cost.
        /// </summary>

        [JsonPropertyName("customCost")]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomCost2 CustomCost { get; set; } = new CustomCost2();

    }

    /// <summary>
    /// The description section cannot have more than 40000 bytes in length.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardizedDescription
    {

        [JsonPropertyName("sections")]
        public ICollection<DescriptionSection>? Sections { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Discounts
    {

        [JsonPropertyName("wholesalePriceList")]
        public WholesalePriceList2? WholesalePriceList { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stock
    {
        /// <summary>
        /// Quantity of this offer available for sale - how many times this offer can be sold. Offer can be activated only with stock being greater then 0. Setting this quantity to 0 for 'ACTIVE' or 'ACTIVATING' offer will trigger changing its status to 'ENDED'.
        /// </summary>

        [JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Available { get; set; } = default!;

        /// <summary>
        /// Stock unit
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public StockUnit? Unit { get; set; } = default!;

    }

    /// <summary>
    /// Offers updates summary
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCount
    {
        /// <summary>
        /// Current number of failed offers updates
        /// </summary>

        [JsonPropertyName("failed")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Failed { get; set; } = default!;

        /// <summary>
        /// Current number of success offers updates
        /// </summary>

        [JsonPropertyName("success")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Success { get; set; } = default!;

        /// <summary>
        /// Total number of scheduled offers updates
        /// </summary>

        [JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Total { get; set; } = default!;

    }

    /// <summary>
    /// Contains list of task results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskReport
    {
        /// <summary>
        /// List of task results
        /// </summary>

        [JsonPropertyName("tasks")]
        public ICollection<CommandTask>? Tasks { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// Buyer id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Buyer's login
        /// </summary>

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRating
    {

        [JsonPropertyName("answer")]
        public Answer? Answer { get; set; } = default!;

        [JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public User Buyer { get; set; } = new User();

        /// <summary>
        /// Buyer's text comment
        /// </summary>

        [JsonPropertyName("comment")]
        public string? Comment { get; set; } = default!;

        /// <summary>
        /// Creation datetime in ISO 8601 format
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

        /// <summary>
        /// Edition datetime in ISO 8601 format
        /// </summary>

        [JsonPropertyName("editedAt")]
        public string? EditedAt { get; set; } = default!;

        /// <summary>
        /// If true this rating was not included in calculating average user rates
        /// </summary>

        [JsonPropertyName("excludedFromAverageRates")]
        public bool? ExcludedFromAverageRates { get; set; } = default!;

        /// <summary>
        /// The reason why the rating was excluded from calculating average user rates. The message is translated based on the value of the "Accept-Language" header and exists only when the rating was excluded.
        /// </summary>

        [JsonPropertyName("excludedFromAverageRatesReason")]
        public string? ExcludedFromAverageRatesReason { get; set; } = default!;

        /// <summary>
        /// Rating id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Last change (creation or latest edition) datetime in ISO 8601 format
        /// </summary>

        [JsonPropertyName("lastChangedAt")]
        public string? LastChangedAt { get; set; } = default!;

        [JsonPropertyName("order")]
        public Order? Order { get; set; } = default!;

        [JsonPropertyName("rates")]
        public Rates? Rates { get; set; } = default!;

        /// <summary>
        /// Whether buyer recommends the order
        /// </summary>

        [JsonPropertyName("recommended")]
        public bool Recommended { get; set; } = default!;

        [JsonPropertyName("removal")]
        public Removal? Removal { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRatingListResponse
    {
        /// <summary>
        /// List of ratings that match requested filter. Empty when no rating matched.
        /// </summary>

        [JsonPropertyName("ratings")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<UserRating> Ratings { get; set; } = new System.Collections.ObjectModel.Collection<UserRating>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRatingSummaryResponse
    {

        [JsonPropertyName("averageRates")]
        public AverageRates? AverageRates { get; set; } = default!;

        /// <summary>
        /// Summary of data concerning users that do not recommend the seller.
        /// </summary>

        [JsonPropertyName("notRecommended")]
        [System.ComponentModel.DataAnnotations.Required]
        public NotRecommended NotRecommended { get; set; } = new NotRecommended();

        /// <summary>
        /// Summary of data concerning users that recommend the seller.
        /// </summary>

        [JsonPropertyName("recommended")]
        [System.ComponentModel.DataAnnotations.Required]
        public Recommended2 Recommended { get; set; } = new Recommended2();

        /// <summary>
        /// Percentage of unique buyers recommending the seller.
        /// </summary>

        [JsonPropertyName("recommendedPercentage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecommendedPercentage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validation
    {

        [JsonPropertyName("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ValidationError> Errors { get; set; } = new System.Collections.ObjectModel.Collection<ValidationError>();

        [JsonPropertyName("warnings")]
        public ICollection<ValidationWarning>? Warnings { get; set; } = default!;

        [JsonPropertyName("validatedAt")]
        public System.DateTimeOffset? ValidatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationError
    {

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationWarning
    {

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantyBasic
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Describes_listing_fee
    {

        [JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        /// <summary>
        /// Pricing cycle duration, ISO 8601 duration format
        /// </summary>

        [JsonPropertyName("cycleDuration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CycleDuration { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Describes_success_commission_fee
    {

        [JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarrantiesList_ImpliedWarrantyBasic_
    {

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("impliedWarranties")]
        public ICollection<ImpliedWarrantyBasic>? ImpliedWarranties { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParametersForPreviewPrice
    {

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();

        /// <summary>
        /// Offer condition, if is new, used or other.
        /// </summary>

        [JsonPropertyName("condition")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParametersForPreviewPriceCondition? Condition { get; set; } = default!;

        [JsonPropertyName("duration")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParametersForPreviewPriceDuration? Duration { get; set; } = default!;

        [JsonPropertyName("hasAnyQuantity")]
        public bool? HasAnyQuantity { get; set; } = default!;

        /// <summary>
        /// If set, minimum value 0
        /// </summary>

        [JsonPropertyName("numberOfBigPhotos")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? NumberOfBigPhotos { get; set; } = default!;

        /// <summary>
        /// If set, minimum value 0
        /// </summary>

        [JsonPropertyName("numberOfPhotos")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? NumberOfPhotos { get; set; } = default!;

        /// <summary>
        /// Quantity of items to be sold. If set, minimum value 1
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// Deprecated. Value 'true' sets the 'offer.type' field to 'shop', value 'false' to 'offer'. This field is ignored if 'offer.type' field is set.
        /// </summary>

        [JsonPropertyName("shop")]
        public bool? Shop { get; set; } = default!;

        /// <summary>
        /// Quantity of sold items. Relates to commission success fee. If set, minimum value 1
        /// </summary>

        [JsonPropertyName("soldQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? SoldQuantity { get; set; } = default!;

        /// <summary>
        /// Offer type. 'type' or 'shop' fields must be provided. Takes precedence over 'shop' field. Note: if type = 'advertisement' then either 'quantity' or 'soldQuantity' field must be set.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParametersForPreviewPriceType? Type { get; set; } = default!;

        [JsonPropertyName("unitPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double UnitPrice { get; set; } = default!;

        [JsonPropertyName("bold")]
        public bool? Bold { get; set; } = default!;

        [JsonPropertyName("highlight")]
        public bool? Highlight { get; set; } = default!;

        [JsonPropertyName("departmentPage")]
        public bool? DepartmentPage { get; set; } = default!;

        [JsonPropertyName("emphasized")]
        public bool? Emphasized { get; set; } = default!;

        [JsonPropertyName("emphasizedHighlightBoldPackage")]
        public bool? EmphasizedHighlightBoldPackage { get; set; } = default!;

        [JsonPropertyName("multiVariant")]
        public bool? MultiVariant { get; set; } = default!;

    }

    /// <summary>
    /// Contains publication's fields to change
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication_modification
    {
        /// <summary>
        /// Action to perform
        /// </summary>

        [JsonPropertyName("action")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Publication_modificationAction? Action { get; set; } = default!;

        /// <summary>
        /// Date and time for scheduling ACTIVATE action, will be ignored for another actions
        /// </summary>

        [JsonPropertyName("scheduledFor")]
        public System.DateTimeOffset? ScheduledFor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPoliciesList_ReturnPolicyBasic_
    {

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("returnPolicies")]
        public ICollection<ReturnPolicyBasic>? ReturnPolicies { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarrantiesList_WarrantyBasic_
    {

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("warranties")]
        public ICollection<WarrantyBasic>? Warranties { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Wrapper_type_for_preview_conditions
    {
        /// <summary>
        /// Include in calculation user's active bundles which allow to publish for free offer or use for free promotion options.
        /// </summary>

        [JsonPropertyName("includeQuotingBundles")]
        public bool? IncludeQuotingBundles { get; set; } = default!;

        [JsonPropertyName("offer")]
        public ParametersForPreviewPrice? Offer { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Wraps_listing_and_commissions_fees
    {

        [JsonPropertyName("commissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Describes_success_commission_fee> Commissions { get; set; } = new System.Collections.ObjectModel.Collection<Describes_success_commission_fee>();

        [JsonPropertyName("quotes")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Describes_listing_fee> Quotes { get; set; } = new System.Collections.ObjectModel.Collection<Describes_listing_fee>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSet
    {

        [JsonPropertyName("offers")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<VariantSet_Offer> Offers { get; set; } = new System.Collections.ObjectModel.Collection<VariantSet_Offer>();

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(75)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<VariantSet_Parameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<VariantSet_Parameter>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSetResponse : VariantSet
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSet_Offer
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Label that allows to group variants via image. All variants having the same image should have identical identifier in this field.
        /// </summary>

        [JsonPropertyName("colorPattern")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ColorPattern { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSet_Parameter
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSets
    {
        /// <summary>
        /// Total number of variant sets matching the query.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        [JsonPropertyName("offerVariants")]
        public ICollection<VariantSets_VariantSet>? OfferVariants { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariantSets_VariantSet
    {
        /// <summary>
        /// Variant set id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Variant set name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingOffer
    {
        /// <summary>
        /// The offer ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The title of the offer.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("seller")]
        public OfferSeller? Seller { get; set; } = default!;

        [JsonPropertyName("promotion")]
        public OfferPromotion? Promotion { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public OfferDelivery? Delivery { get; set; } = default!;

        /// <summary>
        /// The gallery of images. Only the URL of the original sized image is provided. The first image represents the thumbnail image used on listing.
        /// </summary>

        [JsonPropertyName("images")]
        public ICollection<OfferImages>? Images { get; set; } = default!;

        [JsonPropertyName("sellingMode")]
        public OfferSellingMode? SellingMode { get; set; } = default!;

        [JsonPropertyName("stock")]
        public OfferStock? Stock { get; set; } = default!;

        [JsonPropertyName("vendor")]
        public OfferVendor? Vendor { get; set; } = default!;

        [JsonPropertyName("category")]
        public OfferCategory? Category { get; set; } = default!;

        [JsonPropertyName("publication")]
        public OfferPublication? Publication { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingCategoryWithCount
    {
        /// <summary>
        /// The category ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The category name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Results count in this category.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingCategory
    {
        /// <summary>
        /// The Category ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The category name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponse
    {

        [JsonPropertyName("items")]
        public ListingResponseOffers? Items { get; set; } = default!;

        [JsonPropertyName("categories")]
        public ListingResponseCategories? Categories { get; set; } = default!;

        /// <summary>
        /// An array of filters with counters available for given search. This can be used to refine the search results.
        /// </summary>

        [JsonPropertyName("filters")]
        public ICollection<ListingResponseFilters>? Filters { get; set; } = default!;

        [JsonPropertyName("searchMeta")]
        public ListingResponseSearchMeta? SearchMeta { get; set; } = default!;

        /// <summary>
        /// Available sorting options.
        /// </summary>

        [JsonPropertyName("sort")]
        public ICollection<ListingResponseSort>? Sort { get; set; } = default!;

    }

    /// <summary>
    /// Information about the seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferSeller
    {
        /// <summary>
        /// The seller ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The seller login.
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

        /// <summary>
        /// Indicates whether the seller represents a registered business.
        /// </summary>

        [JsonPropertyName("company")]
        public bool? Company { get; set; } = default!;

        /// <summary>
        /// Indicates whether the seller has the "Super Sprzedawca" status.
        /// </summary>

        [JsonPropertyName("superSeller")]
        public bool? SuperSeller { get; set; } = default!;

    }

    /// <summary>
    /// Information about the stock.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferStock
    {
        /// <summary>
        /// The unit type of the stock.
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferStockUnit? Unit { get; set; } = default!;

        /// <summary>
        /// The available stock value.
        /// </summary>

        [JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Available { get; set; } = default!;

    }

    /// <summary>
    /// Information about promotion options for the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPromotion
    {
        /// <summary>
        /// Indicates whether the offer is promoted.
        /// </summary>

        [JsonPropertyName("emphasized")]
        public bool? Emphasized { get; set; } = default!;

        /// <summary>
        /// Indicates whether the offer has bold title option.
        /// </summary>

        [JsonPropertyName("bold")]
        public bool? Bold { get; set; } = default!;

        /// <summary>
        /// Indicates whether the offer has highlight option.
        /// </summary>

        [JsonPropertyName("highlight")]
        public bool? Highlight { get; set; } = default!;

    }

    /// <summary>
    /// The lowest shipping cost available. Lack of this entity means that the offer has no shipping options (i.e. it is an advertisement or an offer with electronic delivery only).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferLowestPrice
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// The price of the offer. It is the buy now price for *BUY_NOW* selling format and current auction price for *AUCTION* format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPrice
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// Fixed (buy now) price of the offer in case of *AUCTION* selling format with buy now option enabled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferFixedPrice
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// Information about shipping options for the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferDelivery
    {
        /// <summary>
        /// Indicates whether the offer has free shipping option.
        /// </summary>

        [JsonPropertyName("availableForFree")]
        public bool? AvailableForFree { get; set; } = default!;

        [JsonPropertyName("lowestPrice")]
        public OfferLowestPrice? LowestPrice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferImages
    {
        /// <summary>
        /// The URL of the original sized image.
        /// </summary>

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// This section describes the selling format and prices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferSellingMode
    {

        [JsonPropertyName("format")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SellingModeFormat? Format { get; set; } = default!;

        [JsonPropertyName("price")]
        public OfferPrice? Price { get; set; } = default!;

        [JsonPropertyName("fixedPrice")]
        public OfferFixedPrice? FixedPrice { get; set; } = default!;

        /// <summary>
        /// Lower bound of popularity range of the offer for *BUY_NOW* selling format.
        /// </summary>

        [JsonPropertyName("popularity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Popularity { get; set; } = default!;

        /// <summary>
        /// Popularity ranges of the offer for *BUY_NOW* selling format. Possible values: 0, [1-5], [6-10], [11-20], [21-50], [51-100] and [101+]
        /// </summary>

        [JsonPropertyName("popularityRange")]
        public string? PopularityRange { get; set; } = default!;

        /// <summary>
        /// Number of bidders for *AUCTION* selling format.
        /// </summary>

        [JsonPropertyName("bidCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? BidCount { get; set; } = default!;

    }

    /// <summary>
    /// This section is available only for the charity, allegrolokalnie.pl, morizon.pl and ebilet.pl offers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferVendor
    {
        /// <summary>
        /// Identifier of the external service.
        /// </summary>

        [JsonPropertyName("id")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferVendorId? Id { get; set; } = default!;

        /// <summary>
        /// URL to the web page of the offer.
        /// </summary>

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// This section is available only for offers with a defined end of publication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPublication
    {
        /// <summary>
        /// Publication ending date and time in UTC.
        /// </summary>

        [JsonPropertyName("endingAt")]
        public string? EndingAt { get; set; } = default!;

    }

    /// <summary>
    /// The lists of search results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseOffers
    {
        /// <summary>
        /// List of promoted offers.
        /// </summary>

        [JsonPropertyName("promoted")]
        public ICollection<ListingOffer>? Promoted { get; set; } = default!;

        /// <summary>
        /// List of regular (non-promoted) offers.
        /// </summary>

        [JsonPropertyName("regular")]
        public ICollection<ListingOffer>? Regular { get; set; } = default!;

    }

    /// <summary>
    /// Information about categories.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseCategories
    {
        /// <summary>
        /// Categories with counters, which can be used to refine search results.
        /// </summary>

        [JsonPropertyName("subcategories")]
        public ICollection<ListingCategoryWithCount>? Subcategories { get; set; } = default!;

        /// <summary>
        /// Categories path to the current listing category (breadcrumbs).
        /// </summary>

        [JsonPropertyName("path")]
        public ICollection<ListingCategory>? Path { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseFiltersValues
    {
        /// <summary>
        /// Name of the option; for NUMERIC parameters - word indicating start or end of range (i.e. *from*, *to*).
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Filter value. Should be used as query parameter value in the request. This can be:
        /// <br/>
        /// <br/> - for MULTI and SINGLE parameters - a value identifier (e.g. KUJAWSKO_POMORSKIE option in location.province
        /// <br/> filter),
        /// <br/> - for other types - a value entered by user.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Suffix used as a second part of query parameter name to be used in the request (the first part is the filter ID). Applicable for NUMERIC values only.
        /// </summary>

        [JsonPropertyName("idSuffix")]
        public string? IdSuffix { get; set; } = default!;

        /// <summary>
        /// Number of search results matching this filter value.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Indicates whether this filter value was used in the current request.
        /// </summary>

        [JsonPropertyName("selected")]
        public bool? Selected { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseFilters
    {
        /// <summary>
        /// Identifier of the filter. Should be used as query parameter key, optionally followed by idSuffix from parameter value (only for NUMERIC filters).
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The type of the filter:
        /// <br/>
        /// <br/> - *MULTI* - multiple choice filter,
        /// <br/> - *SINGLE* - single select (dropdown) filter,
        /// <br/> - *NUMERIC* - range of numeric values (search offers with value matching this range),
        /// <br/> - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),
        /// <br/> - *TEXT* - filter allowing user to input any text.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ListingResponseFiltersType? Type { get; set; } = default!;

        /// <summary>
        /// Name of the filter.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Available filter values.
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<ListingResponseFiltersValues>? Values { get; set; } = default!;

        /// <summary>
        /// Minimum valid value for filters of type NUMERIC.
        /// </summary>

        [JsonPropertyName("minValue")]
        public double? MinValue { get; set; } = default!;

        /// <summary>
        /// Maximum valid value for filters of type NUMERIC.
        /// </summary>

        [JsonPropertyName("maxValue")]
        public double? MaxValue { get; set; } = default!;

        /// <summary>
        /// Unit of the NUMERIC/NUMERIC_SINGLE filter.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

    }

    /// <summary>
    /// Search metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseSearchMeta
    {
        /// <summary>
        /// The number of results available for navigation. If this number is less than total count, the search criteria (categories, filters, etc.) should be narrowed down to make all results available.
        /// </summary>

        [JsonPropertyName("availableCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? AvailableCount { get; set; } = default!;

        /// <summary>
        /// The total number of search results with given parameters.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

        /// <summary>
        /// Indicates whether the search fallback was used. If true, no items matching exact given phrase were found and related items are presented.
        /// </summary>

        [JsonPropertyName("fallback")]
        public bool? Fallback { get; set; } = default!;

    }

    /// <summary>
    /// Available sort options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListingResponseSort
    {
        /// <summary>
        /// The query parameter value which should be used for this sorting option.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The sorting option name in Polish.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The order label in Polish specifying ascending or descending mode.
        /// </summary>

        [JsonPropertyName("order")]
        public string? Order { get; set; } = default!;

        /// <summary>
        /// Indicates whether this sorting option was used in the current request.
        /// </summary>

        [JsonPropertyName("selected")]
        public bool? Selected { get; set; } = default!;

    }

    /// <summary>
    /// The definition of the additional services assigned to the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferAdditionalServices
    {
        /// <summary>
        /// The ID of the additional services definition.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OffersSearchResultDto
    {
        /// <summary>
        /// The list of seller's offers matching the request's criteria.
        /// </summary>

        [JsonPropertyName("offers")]
        public ICollection<OfferListingDto>? Offers { get; set; } = default!;

        /// <summary>
        /// Number of offers in the search result.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// The total number of offers matching the request's criteria.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

    }

    /// <summary>
    /// An offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDto
    {
        /// <summary>
        /// The offer ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The title of the offer.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("category")]
        public OfferCategory? Category { get; set; } = default!;

        [JsonPropertyName("primaryImage")]
        public OfferListingDtoImage? PrimaryImage { get; set; } = default!;

        [JsonPropertyName("sellingMode")]
        public SellingMode? SellingMode { get; set; } = default!;

        [JsonPropertyName("saleInfo")]
        public OfferListingDtoV1SaleInfo? SaleInfo { get; set; } = default!;

        [JsonPropertyName("stock")]
        public OfferListingDtoV1Stock? Stock { get; set; } = default!;

        [JsonPropertyName("stats")]
        public OfferListingDtoV1Stats? Stats { get; set; } = default!;

        [JsonPropertyName("publication")]
        public OfferListingDtoV1Publication? Publication { get; set; } = default!;

        [JsonPropertyName("afterSalesServices")]
        public AfterSalesServices? AfterSalesServices { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public OfferAdditionalServices? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public OfferListingDtoV1Delivery? Delivery { get; set; } = default!;

        [JsonPropertyName("b2b")]
        public OfferListingDtoV1B2b? B2b { get; set; } = default!;

        [JsonPropertyName("fundraisingCampaign")]
        public JustId? FundraisingCampaign { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public OfferListingDtoV1AdditionalMarketplaces? AdditionalMarketplaces { get; set; } = default!;

    }

    /// <summary>
    /// The image used as a thumbnail on the listings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoImage
    {
        /// <summary>
        /// The url to the image in its original size.
        /// </summary>

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// Information on the offer's selling mode.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellingMode
    {

        [JsonPropertyName("format")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SellingModeFormat? Format { get; set; } = default!;

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        [JsonPropertyName("minimalPrice")]
        public PriceModificationFixedPriceHolder? MinimalPrice { get; set; } = default!;

        [JsonPropertyName("startingPrice")]
        public PriceModificationFixedPriceHolder? StartingPrice { get; set; } = default!;

    }

    /// <summary>
    /// Information on the offer's selling mode.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellingModeWithNetPrice
    {

        [JsonPropertyName("format")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SellingModeFormat? Format { get; set; } = default!;

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        [JsonPropertyName("minimalPrice")]
        public PriceModificationFixedPriceHolder? MinimalPrice { get; set; } = default!;

        [JsonPropertyName("startingPrice")]
        public PriceModificationFixedPriceHolder? StartingPrice { get; set; } = default!;

        [JsonPropertyName("netPrice")]
        public PriceModificationFixedPriceHolder? NetPrice { get; set; } = default!;

    }

    /// <summary>
    /// The selling format of the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SellingModeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY_NOW")]
        BUY_NOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUCTION")]
        AUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTISEMENT")]
        ADVERTISEMENT = 2,

    }

    /// <summary>
    /// VAT tax rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax
    {
        /// <summary>
        /// The buy now tax rate, Format 0.00. The tax is linked to the default country that corresponds to the base marketplace of this offer.
        /// </summary>

        [JsonPropertyName("percentage")]
        public string? Percentage { get; set; } = default!;

    }

    /// <summary>
    /// VAT tax settings. Available settings can be found under &lt;a href="#operation/getTaxSettingsForCategory" target="_blank"&gt;"get all tax settings for category" resource&lt;/a&gt;. This field is deprecated in favor of taxSettings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class ExtendedTax
    {
        /// <summary>
        /// A unique identifier of an immutable VAT setting consisting of rate, subject and exemption.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The tax rate.
        /// </summary>

        [JsonPropertyName("rate")]
        public string? Rate { get; set; } = default!;

        /// <summary>
        /// The subject of taxation.
        /// </summary>

        [JsonPropertyName("subject")]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// The exemption of taxation.
        /// </summary>

        [JsonPropertyName("exemption")]
        public string? Exemption { get; set; } = default!;

        /// <summary>
        /// The tax rate. This field is deprecated in favor of `rate`. Format `0.00`.
        /// </summary>

        [JsonPropertyName("percentage")]
        [System.Obsolete]
        public string? Percentage { get; set; } = default!;

    }

    /// <summary>
    /// Tax settings for offer. Available settings can be found under &lt;a href="#operation/getTaxSettingsForCategory" target="_blank"&gt;"get all tax settings for category" resource&lt;/a&gt;.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTaxSettings
    {
        /// <summary>
        /// Tax rates for offer.
        /// </summary>

        [JsonPropertyName("rates")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OfferTaxRate> Rates { get; set; } = new System.Collections.ObjectModel.Collection<OfferTaxRate>();

        /// <summary>
        /// The subject of taxation for offer.
        /// </summary>

        [JsonPropertyName("subject")]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// The exemption of taxation for offer.
        /// </summary>

        [JsonPropertyName("exemption")]
        public string? Exemption { get; set; } = default!;

    }

    /// <summary>
    /// Offer tax rate for country.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTaxRate
    {
        /// <summary>
        /// Tax rate value.
        /// </summary>

        [JsonPropertyName("rate")]
        public string? Rate { get; set; } = default!;

        /// <summary>
        /// Tax rate country code.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

    }

    /// <summary>
    /// Information about offer's business properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1B2b
    {

        [JsonPropertyName("buyableOnlyByBusiness")]
        public bool? BuyableOnlyByBusiness { get; set; } = default!;

    }

    /// <summary>
    /// Delivery information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1Delivery
    {

        [JsonPropertyName("shippingRates")]
        public ShippingRates? ShippingRates { get; set; } = default!;

    }

    /// <summary>
    /// Additional information about offers in auction format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1SaleInfo
    {

        [JsonPropertyName("currentPrice")]
        public PriceModificationFixedPriceHolder? CurrentPrice { get; set; } = default!;

        /// <summary>
        /// The number of bidders.
        /// </summary>

        [JsonPropertyName("biddersCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? BiddersCount { get; set; } = default!;

    }

    /// <summary>
    /// Information on the offer's stock.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1Stock
    {
        /// <summary>
        /// The available stock value.
        /// </summary>

        [JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Available { get; set; } = default!;

        /// <summary>
        /// The number of sold items in the last 30 days on the base marketplace.
        /// </summary>

        [JsonPropertyName("sold")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Sold { get; set; } = default!;

    }

    /// <summary>
    /// The offer's statistics on the base marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1Stats
    {
        /// <summary>
        /// The number of users who added this offer to their watch lists.
        /// </summary>

        [JsonPropertyName("watchersCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? WatchersCount { get; set; } = default!;

        /// <summary>
        /// The number of unique users viewing this offer in the past 30 days.
        /// </summary>

        [JsonPropertyName("visitsCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? VisitsCount { get; set; } = default!;

    }

    /// <summary>
    /// Information on the offer's publication status and dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1Publication
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferStatus? Status { get; set; } = default!;

        /// <summary>
        /// The date and time of activation in UTC for a planned listing.
        /// </summary>

        [JsonPropertyName("startingAt")]
        public string? StartingAt { get; set; } = default!;

        /// <summary>
        /// The actual date and time of activation in UTC.
        /// </summary>

        [JsonPropertyName("startedAt")]
        public string? StartedAt { get; set; } = default!;

        /// <summary>
        /// The date and time of a planned ending in UTC.
        /// </summary>

        [JsonPropertyName("endingAt")]
        public string? EndingAt { get; set; } = default!;

        /// <summary>
        /// The actual date and time of last ending in UTC.
        /// </summary>

        [JsonPropertyName("endedAt")]
        public string? EndedAt { get; set; } = default!;

        [JsonPropertyName("marketplaces")]
        public OfferListingDtoV1PublicationMarketplaces? Marketplaces { get; set; } = default!;

    }

    /// <summary>
    /// Marketplace identifier
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferMarketplaceReference
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// Offer marketplaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferMarketplaces
    {
        /// <summary>
        /// Offer's base marketplace.
        /// </summary>

        [JsonPropertyName("base")]
        public OfferMarketplaceReference? Base { get; set; } = default!;

        /// <summary>
        /// Additional marketplaces, on which the offer should be listed.
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<OfferMarketplaceReference>? Additional { get; set; } = default!;

    }

    /// <summary>
    /// The publication status of the current offer. The possible values:
    /// <br/>
    /// <br/>  - *INACTIVE* - a draft offer
    /// <br/>  - *ACTIVATING* - the offer is planned for listing or is during the process of activation
    /// <br/>  - *ACTIVE* - the offer is active
    /// <br/>  - *ENDED* - the offer was active and is now ended (for whatever reason)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATING")]
        ACTIVATING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ENDED")]
        ENDED = 3,

    }

    /// <summary>
    /// Information on the offer's publication marketplaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1PublicationMarketplaces
    {
        /// <summary>
        /// The base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("base")]
        public MarketplaceReference? Base { get; set; } = default!;

        /// <summary>
        /// Additional marketplaces, on which the offer is to be listed.
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<MarketplaceReference>? Additional { get; set; } = default!;

    }

    /// <summary>
    /// Identifies a marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceReference
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// Properties of the offer for each additional marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1AdditionalMarketplaces
    {

    }

    /// <summary>
    /// Properties of the offer for the given marketplace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferListingDtoV1AdditionalMarketplace
    {
        /// <summary>
        /// Information about the publication of the offer on the given marketplace.
        /// </summary>

        [JsonPropertyName("publication")]
        public Publication2? Publication { get; set; } = default!;

        /// <summary>
        /// Information about the selling mode of the offer on the given marketplace.
        /// </summary>

        [JsonPropertyName("sellingMode")]
        public SellingMode2? SellingMode { get; set; } = default!;

        /// <summary>
        /// The offer's statistics on the given marketplace.
        /// </summary>

        [JsonPropertyName("stats")]
        public OfferListingDtoV1Stats? Stats { get; set; } = default!;

        /// <summary>
        /// Contains only the sold stock on the given marketplace. The available stock applies to all marketplaces.
        /// </summary>

        [JsonPropertyName("stock")]
        public Stock2? Stock { get; set; } = default!;

    }

    /// <summary>
    /// The publication status of the offer on an additional marketplace. The possible values:
    /// <br/>
    /// <br/>  - *NOT_REQUESTED* - The seller has not declared their intention to list this offer on the marketplace
    /// <br/>  - *PENDING* - The qualification process has not started; the offer is not listed yet
    /// <br/>  - *IN_PROGRESS* - We are processing whether the offer qualifies to be listed on the marketplace; the offer is not listed yet
    /// <br/>  - *APPROVED* - The offer is approved to be listed on the marketplace
    /// <br/>  - *REFUSED* - The offer will not be listed on the marketplace; the offer may be re-qualified if is corrected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalMarketplacePublicationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REQUESTED")]
        NOT_REQUESTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED")]
        REFUSED = 4,

    }

    /// <summary>
    /// Order events list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderEventsList
    {

        [JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OrderEvent> Events { get; set; } = new System.Collections.ObjectModel.Collection<OrderEvent>();

    }

    /// <summary>
    /// Order event
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderEvent
    {
        /// <summary>
        /// event id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("order")]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderEventData Order { get; set; } = new OrderEventData();

        [JsonPropertyName("type")]
        public OrderEventType Type { get; set; } = default!;

        /// <summary>
        /// Date when the event occurred
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

    }

    /// <summary>
    /// Order event data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderEventData
    {

        [JsonPropertyName("seller")]
        [System.ComponentModel.DataAnnotations.Required]
        public SellerReference Seller { get; set; } = new SellerReference();

        [JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BuyerReference Buyer { get; set; } = new BuyerReference();

        [JsonPropertyName("lineItems")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OrderLineItem> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<OrderLineItem>();

        [JsonPropertyName("checkoutForm")]
        public CheckoutFormReference? CheckoutForm { get; set; } = default!;

        [JsonPropertyName("marketplace")]
        public OrderMarketplace? Marketplace { get; set; } = default!;

    }

    /// <summary>
    /// Seller identifier
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerReference
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// Offer identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferReference
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Offer name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

        [JsonPropertyName("productSet")]
        public OfferProductSetReference? ProductSet { get; set; } = default!;

    }

    /// <summary>
    /// If the offer was a product set, you can see a list of component products (product id with quantity).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferProductSetReference
    {
        /// <summary>
        /// List of products in a product set.
        /// </summary>

        [JsonPropertyName("products")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<OfferProductSetProductReference> Products { get; set; } = new System.Collections.ObjectModel.Collection<OfferProductSetProductReference>();

    }

    /// <summary>
    /// Product element definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferProductSetProductReference
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Product quantity in a product set.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double? Quantity { get; set; } = default!;

    }

    /// <summary>
    /// Buyer data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyerReference
    {
        /// <summary>
        /// buyer id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

        /// <summary>
        /// is a guest account?
        /// </summary>

        [JsonPropertyName("guest")]
        public bool Guest { get; set; } = default!;

        [JsonPropertyName("preferences")]
        public BuyerPreferencesReference? Preferences { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyerPreferencesReference
    {
        /// <summary>
        /// Language
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    /// <summary>
    /// Order item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderLineItem
    {
        /// <summary>
        /// Order item identifier
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderLineItemOfferReference Offer { get; set; } = new OrderLineItemOfferReference();

        /// <summary>
        /// quantity
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Quantity { get; set; } = default!;

        [JsonPropertyName("originalPrice")]
        public PriceModificationFixedPriceHolder? OriginalPrice { get; set; } = default!;

        [JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder Price { get; set; } = new PriceModificationFixedPriceHolder();

        /// <summary>
        /// ISO date when offer was bought
        /// </summary>

        [JsonPropertyName("boughtAt")]
        public System.DateTimeOffset? BoughtAt { get; set; } = default!;

    }

    /// <summary>
    /// Offer identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderLineItemOfferReference
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Offer name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

    }

    /// <summary>
    /// Event statistics, currently contains only basic information about the latest event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderEventStats
    {

        [JsonPropertyName("latestEvent")]
        public LatestOrderEvent? LatestEvent { get; set; } = default!;

    }

    /// <summary>
    /// Basic information about the latest order event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatestOrderEvent
    {
        /// <summary>
        /// event id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Date when the event occurred
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderMarketplace
    {
        /// <summary>
        /// Id of the purchase marketplace
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormReference
    {
        /// <summary>
        /// Checkout form identifier
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Checkout form revision
        /// </summary>

        [JsonPropertyName("revision")]
        public string? Revision { get; set; } = default!;

    }

    /// <summary>
    /// Describes status of the form delivery and purchase options based on payment and purchase status. * `BOUGHT` - purchase without checkout form filled in * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing. * `CANCELLED` - purchase cancelled by buyer.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOUGHT")]
        BOUGHT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FILLED_IN")]
        FILLED_IN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_PROCESSING")]
        READY_FOR_PROCESSING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

    }

    /// <summary>
    /// Type of order event. * `BOUGHT` - purchase without checkout form filled in * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing. * `BUYER_CANCELLED` - purchase cancelled by buyer * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed. * `BUYER_MODIFIED` - purchase modified by buyer * `AUTO_CANCELLED` - purchase cancelled automatically by Allegro
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOUGHT")]
        BOUGHT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FILLED_IN")]
        FILLED_IN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_PROCESSING")]
        READY_FOR_PROCESSING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER_CANCELLED")]
        BUYER_CANCELLED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FULFILLMENT_STATUS_CHANGED")]
        FULFILLMENT_STATUS_CHANGED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER_MODIFIED")]
        BUYER_MODIFIED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_CANCELLED")]
        AUTO_CANCELLED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutForms
    {

        [JsonPropertyName("checkoutForms")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CheckoutForm> CheckoutForms1 { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutForm>();

        /// <summary>
        /// number of returned objects
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Count { get; set; } = default!;

        /// <summary>
        /// Number of all objects of requested status(es) available (regardless of the provided limit and offset)
        /// <br/>
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutForm
    {
        /// <summary>
        /// Checkout form id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Message from buyer to seller
        /// </summary>

        [JsonPropertyName("messageToSeller")]
        public string? MessageToSeller { get; set; } = default!;

        [JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public CheckoutFormBuyerReference Buyer { get; set; } = new CheckoutFormBuyerReference();

        [JsonPropertyName("payment")]
        public CheckoutFormPaymentReference? Payment { get; set; } = default!;

        [JsonPropertyName("status")]
        public CheckoutFormStatus Status { get; set; } = default!;

        [JsonPropertyName("fulfillment")]
        public CheckoutFormFulfillment? Fulfillment { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public CheckoutFormDeliveryReference? Delivery { get; set; } = default!;

        [JsonPropertyName("invoice")]
        public CheckoutFormInvoiceInfo? Invoice { get; set; } = default!;

        [JsonPropertyName("lineItems")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CheckoutFormLineItem> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormLineItem>();

        [JsonPropertyName("surcharges")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CheckoutFormPaymentReference> Surcharges { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormPaymentReference>();

        [JsonPropertyName("discounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CheckoutFormDiscount> Discounts { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormDiscount>();

        [JsonPropertyName("note")]
        public CheckoutFormNoteReference? Note { get; set; } = default!;

        [JsonPropertyName("marketplace")]
        public CheckoutFormMarketplace? Marketplace { get; set; } = default!;

        [JsonPropertyName("summary")]
        [System.ComponentModel.DataAnnotations.Required]
        public CheckoutFormSummary Summary { get; set; } = new CheckoutFormSummary();

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public string? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Checkout form revision
        /// </summary>

        [JsonPropertyName("revision")]
        public string? Revision { get; set; } = default!;

    }

    /// <summary>
    /// Buyer data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormBuyerReference
    {
        /// <summary>
        /// buyer id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

        /// <summary>
        /// Buyer's first name
        /// </summary>

        [JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// Buyer's last name
        /// </summary>

        [JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// Company name
        /// </summary>

        [JsonPropertyName("companyName")]
        public string? CompanyName { get; set; } = default!;

        /// <summary>
        /// is a guest account?
        /// </summary>

        [JsonPropertyName("guest")]
        public bool Guest { get; set; } = default!;

        /// <summary>
        /// Buyer's personal identity number (PESEL)
        /// </summary>

        [JsonPropertyName("personalIdentity")]
        public string? PersonalIdentity { get; set; } = default!;

        /// <summary>
        /// Phone number
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        [JsonPropertyName("preferences")]
        public BuyerPreferencesReference? Preferences { get; set; } = default!;

        [JsonPropertyName("address")]
        public CheckoutFormBuyerAddressReference? Address { get; set; } = default!;

    }

    /// <summary>
    /// Buyer address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormBuyerAddressReference
    {
        /// <summary>
        /// Street
        /// </summary>

        [JsonPropertyName("street")]
        public string? Street { get; set; } = default!;

        /// <summary>
        /// City name
        /// </summary>

        [JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// Postal code
        /// </summary>

        [JsonPropertyName("postCode")]
        public string? PostCode { get; set; } = default!;

        /// <summary>
        /// Country code
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormPaymentReference
    {
        /// <summary>
        /// Payment id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CheckoutFormPaymentType Type { get; set; } = default!;

        [JsonPropertyName("provider")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CheckoutFormPaymentProvider? Provider { get; set; } = default!;

        /// <summary>
        /// Date when the event occurred
        /// </summary>

        [JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; set; } = default!;

        [JsonPropertyName("paidAmount")]
        public PriceModificationFixedPriceHolder? PaidAmount { get; set; } = default!;

        [JsonPropertyName("reconciliation")]
        public PriceModificationFixedPriceHolder? Reconciliation { get; set; } = default!;

    }

    /// <summary>
    /// Payment type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_ON_DELIVERY")]
        CASH_ON_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WIRE_TRANSFER")]
        WIRE_TRANSFER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
        ONLINE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_PAYMENT")]
        SPLIT_PAYMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTENDED_TERM")]
        EXTENDED_TERM = 4,

    }

    /// <summary>
    /// Payment provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormPaymentProvider
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE")]
        OFFLINE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EPT")]
        EPT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormFulfillment
    {

        [JsonPropertyName("status")]
        public CheckoutFormFulfillmentStatus? Status { get; set; } = default!;

        [JsonPropertyName("shipmentSummary")]
        public CheckoutFormFulfillmentShipmentSummary? ShipmentSummary { get; set; } = default!;

    }

    /// <summary>
    /// Order seller status.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormFulfillmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_SHIPMENT")]
        READY_FOR_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_PICKUP")]
        READY_FOR_PICKUP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKED_UP")]
        PICKED_UP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormFulfillmentShipmentSummary
    {

        [JsonPropertyName("lineItemsSent")]
        public CheckoutFormFulfillmentShipmentSummaryLineItemsSent? LineItemsSent { get; set; } = default!;

    }

    /// <summary>
    /// Indicates how many line items have tracking number specified.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormFulfillmentShipmentSummaryLineItemsSent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SOME")]
        SOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryReference
    {

        [JsonPropertyName("address")]
        public CheckoutFormDeliveryAddress? Address { get; set; } = default!;

        [JsonPropertyName("method")]
        public CheckoutFormDeliveryMethod? Method { get; set; } = default!;

        [JsonPropertyName("pickupPoint")]
        public CheckoutFormDeliveryPickupPoint? PickupPoint { get; set; } = default!;

        [JsonPropertyName("cost")]
        public PriceModificationFixedPriceHolder? Cost { get; set; } = default!;

        [JsonPropertyName("time")]
        public CheckoutFormDeliveryTime? Time { get; set; } = default!;

        /// <summary>
        /// Buyer used a SMART option
        /// </summary>

        [JsonPropertyName("smart")]
        public bool? Smart { get; set; } = default!;

        /// <summary>
        /// Calculated number of packages.
        /// </summary>

        [JsonPropertyName("calculatedNumberOfPackages")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? CalculatedNumberOfPackages { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryAddress
    {
        /// <summary>
        /// Receiver's first name
        /// </summary>

        [JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// Receiver's last name
        /// </summary>

        [JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; } = default!;

        /// <summary>
        /// Street name
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// City name
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Postal code
        /// </summary>

        [JsonPropertyName("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ZipCode { get; set; } = default!;

        /// <summary>
        /// Country code
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Company name
        /// </summary>

        [JsonPropertyName("companyName")]
        public string? CompanyName { get; set; } = default!;

        /// <summary>
        /// Phone number
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        /// <summary>
        /// Address modification date
        /// </summary>

        [JsonPropertyName("modifiedAt")]
        public string? ModifiedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryMethod
    {
        /// <summary>
        /// Delivery method id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Delivery method name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryPickupPoint
    {
        /// <summary>
        /// Delivery point id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Delivery point name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Delivery point description
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [JsonPropertyName("address")]
        public CheckoutFormDeliveryPickupPointAddress? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryPickupPointAddress
    {
        /// <summary>
        /// Delivery point street name
        /// </summary>

        [JsonPropertyName("street")]
        public string? Street { get; set; } = default!;

        /// <summary>
        /// Delivery point postal code
        /// </summary>

        [JsonPropertyName("zipCode")]
        public string? ZipCode { get; set; } = default!;

        /// <summary>
        /// City name
        /// </summary>

        [JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// Country code
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryTime
    {
        /// <summary>
        /// ISO date when the earliest delivery attempt can take place.
        /// </summary>

        [JsonPropertyName("from")]
        public System.DateTimeOffset? From { get; set; } = default!;

        /// <summary>
        /// ISO date when the latest delivery attempt can take place.
        /// </summary>

        [JsonPropertyName("to")]
        public System.DateTimeOffset? To { get; set; } = default!;

        [JsonPropertyName("guaranteed")]
        public CheckoutFormDeliveryTimeGuaranteed? Guaranteed { get; set; } = default!;

        [JsonPropertyName("dispatch")]
        public CheckoutFormDeliveryTimeDispatch? Dispatch { get; set; } = default!;

    }

    /// <summary>
    /// Guaranteed date when first delivery attempt takes place. This is always filled for Allegro One Courier delivery method. This field is deprecated in favor of `delivery.time.from` and `delivery.time.to`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class CheckoutFormDeliveryTimeGuaranteed
    {
        /// <summary>
        /// ISO date when the earliest delivery attempt can take place.
        /// </summary>

        [JsonPropertyName("from")]
        public System.DateTimeOffset? From { get; set; } = default!;

        /// <summary>
        /// ISO date when the latest delivery attempt can take place.
        /// </summary>

        [JsonPropertyName("to")]
        public System.DateTimeOffset? To { get; set; } = default!;

    }

    /// <summary>
    /// Dates when delivery should be dispatched, passed to the provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDeliveryTimeDispatch
    {
        /// <summary>
        /// ISO date when the earliest dispatch should take place.
        /// </summary>

        [JsonPropertyName("from")]
        public System.DateTimeOffset? From { get; set; } = default!;

        /// <summary>
        /// ISO date when the latest dispatch should take place.
        /// </summary>

        [JsonPropertyName("to")]
        public System.DateTimeOffset? To { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormInvoiceInfo
    {
        /// <summary>
        /// Is invoice required by buyer?
        /// </summary>

        [JsonPropertyName("required")]
        public bool Required { get; set; } = default!;

        [JsonPropertyName("address")]
        public CheckoutFormInvoiceAddress? Address { get; set; } = default!;

        /// <summary>
        /// Due date to put on an invoice for Extended Payment Terms purchases. For other payment methods this field will be null.
        /// </summary>

        [JsonPropertyName("dueDate")]
        public string? DueDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormInvoiceAddress
    {
        /// <summary>
        /// Street name
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// City name
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Postal code
        /// </summary>

        [JsonPropertyName("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ZipCode { get; set; } = default!;

        /// <summary>
        /// Country code
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        [JsonPropertyName("company")]
        public CheckoutFormInvoiceAddressCompany? Company { get; set; } = default!;

        [JsonPropertyName("naturalPerson")]
        public CheckoutFormInvoiceAddressNaturalPerson? NaturalPerson { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormInvoiceAddressCompany
    {
        /// <summary>
        /// Name of a company for which invoice should be issued
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Tax id
        /// </summary>

        [JsonPropertyName("taxId")]
        public string? TaxId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormInvoiceAddressNaturalPerson
    {
        /// <summary>
        /// Invoice receiver first name
        /// </summary>

        [JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// Invoice receiver last name
        /// </summary>

        [JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; } = default!;

    }

    /// <summary>
    /// Order item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormLineItem
    {
        /// <summary>
        /// Line item identifier
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferReference Offer { get; set; } = new OfferReference();

        /// <summary>
        /// quantity
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Quantity { get; set; } = default!;

        [JsonPropertyName("originalPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder OriginalPrice { get; set; } = new PriceModificationFixedPriceHolder();

        [JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder Price { get; set; } = new PriceModificationFixedPriceHolder();

        [JsonPropertyName("reconciliation")]
        public LineItemReconciliation? Reconciliation { get; set; } = default!;

        [JsonPropertyName("selectedAdditionalServices")]
        public ICollection<CheckoutFormAdditionalService>? SelectedAdditionalServices { get; set; } = default!;

        [JsonPropertyName("vouchers")]
        public ICollection<LineItemVoucher>? Vouchers { get; set; } = default!;

        /// <summary>
        /// ISO date when offer was bought
        /// </summary>

        [JsonPropertyName("boughtAt")]
        public System.DateTimeOffset? BoughtAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemReconciliation
    {

        [JsonPropertyName("value")]
        public PriceModificationFixedPriceHolder? Value { get; set; } = default!;

        /// <summary>
        /// Reconciliation type used in the Allegro Prices program, in which the offer is included. The following values are possible: * `BILLING` - a reconciliation value is counted as a new entry in the billing * `WALLET` - a reconciliation value is added to the checkout form payment
        /// <br/>
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public LineItemReconciliationType? Type { get; set; } = default!;

        /// <summary>
        /// Quantity of reconciled items
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormAdditionalService
    {
        /// <summary>
        /// Additional service id
        /// </summary>

        [JsonPropertyName("definitionId")]
        public string? DefinitionId { get; set; } = default!;

        /// <summary>
        /// Additional service name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        /// <summary>
        /// Quantity of an additional service
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemVoucher
    {
        /// <summary>
        /// The voucher code.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Describes the types of vouchers used in the lineItems. The types of vouchers can be as follows: * `NOTEBOOKS_FOR_TEACHERS` - a voucher for teacher's notebook action.
        /// <br/>
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public LineItemVoucherType Type { get; set; } = default!;

        /// <summary>
        /// Describes the status of the current voucher. The status of voucher can be as follows: * `ACTIVE` - an active voucher, ready to use, * `CANCELLED` - a cancelled voucher, disabled to use.
        /// <br/>
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public LineItemVoucherStatus? Status { get; set; } = default!;

        /// <summary>
        /// The external transaction id. The value may differ depending on the status type.
        /// </summary>

        [JsonPropertyName("externalTransactionId")]
        public string? ExternalTransactionId { get; set; } = default!;

        [JsonPropertyName("value")]
        public Value3? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormDiscount
    {
        /// <summary>
        /// Describes the types of discounts used in the checkout form. The types of discounts can be as follows: * `COUPON` - a coupon was used during payment * `BUNDLE` - some items were bought as a bundle * `MULTIPACK` - at least one item was bought with a multipack option turned on * `CROSSMULTIPACK` - some items, each from a different offer, were bought together as a multipack * `ALLEGRO_PRICES` - some items are included in the Allegro Prices program
        /// <br/>
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CheckoutFormDiscountType Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormNoteReference
    {
        /// <summary>
        /// Seller's note for the order
        /// </summary>

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormMarketplace
    {
        /// <summary>
        /// Id of the purchase marketplace
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormSummary
    {

        [JsonPropertyName("totalToPay")]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalToPay TotalToPay { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormsOrderInvoices
    {

        [JsonPropertyName("invoices")]
        public ICollection<CheckoutFormsOrderInvoice>? Invoices { get; set; } = default!;

        /// <summary>
        /// Informs whether an invoice or a proof-of-purchase has been sent outside of Allegro platform
        /// </summary>

        [JsonPropertyName("hasExternalInvoices")]
        public bool? HasExternalInvoices { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormsOrderInvoice
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [JsonPropertyName("file")]
        public CheckoutFormsOrderInvoiceFile? File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormsOrderInvoiceFile
    {

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("uploadedAt")]
        public System.DateTimeOffset? UploadedAt { get; set; } = default!;

        [JsonPropertyName("securityVerification")]
        public CheckoutFormsOrderInvoiceFileSecurityVerification? SecurityVerification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormsOrderInvoiceFileSecurityVerification
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CheckoutFormsOrderInvoiceFileSecurityVerificationStatus? Status { get; set; } = default!;

        [JsonPropertyName("verifiedAt")]
        public System.DateTimeOffset? VerifiedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckFormsNewOrderInvoice
    {

        [JsonPropertyName("file")]
        [System.ComponentModel.DataAnnotations.Required]
        public CheckFormsNewOrderInvoiceFile File { get; set; } = new CheckFormsNewOrderInvoiceFile();

        [JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckFormsNewOrderInvoiceFile
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckFormsNewOrderInvoiceId
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeListResponse
    {

        [JsonPropertyName("disputes")]
        public ICollection<Dispute>? Disputes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dispute
    {
        /// <summary>
        /// Identifier of the dispute
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("subject")]
        [System.ComponentModel.DataAnnotations.Required]
        public Subject Subject { get; set; } = new Subject();

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DisputeStatus Status { get; set; } = default!;

        [JsonPropertyName("messagesStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DisputeMessagesStatus MessagesStatus { get; set; } = default!;

        [JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeUser Buyer { get; set; } = new DisputeUser();

        [JsonPropertyName("checkoutForm")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeCheckoutForm CheckoutForm { get; set; } = new DisputeCheckoutForm();

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeFirstMessage Message { get; set; } = new DisputeFirstMessage();

        [JsonPropertyName("messagesCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MessagesCount { get; set; } = default!;

        /// <summary>
        /// Recent date when the dispute has been opened or reopened
        /// </summary>

        [JsonPropertyName("openedDate")]
        public System.DateTimeOffset? OpenedDate { get; set; } = default!;

        [JsonPropertyName("lastMessageCreationDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastMessageCreationDate { get; set; } = default!;

        [JsonPropertyName("claim")]
        public DisputeClaim? Claim { get; set; } = default!;

    }

    /// <summary>
    /// Subject of the dispute
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subject
    {
        /// <summary>
        /// Subject name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    /// <summary>
    /// Buyer's claim data for the dispute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeClaim
    {
        /// <summary>
        /// Type of the buyer's expectations for the dispute outcome.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Details of the buyer's expectations for the dispute.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeUser
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeMessageList
    {

        [JsonPropertyName("messages")]
        public ICollection<DisputeMessage>? Messages { get; set; } = default!;

    }

    /// <summary>
    /// Initial dispute message with text OR attachment OR both
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeFirstMessage
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [JsonPropertyName("attachment")]
        public DisputeAttachment? Attachment { get; set; } = default!;

        [JsonPropertyName("author")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeAuthor Author { get; set; } = new DisputeAuthor();

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

    }

    /// <summary>
    /// Initial dispute message with text OR attachment OR both
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeMessage
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [JsonPropertyName("attachment")]
        public DisputeAttachment? Attachment { get; set; } = default!;

        [JsonPropertyName("author")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeMessageAuthor Author { get; set; } = new DisputeMessageAuthor();

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

    }

    /// <summary>
    /// Author of the message
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeMessageAuthor
    {
        /// <summary>
        /// Not present if role is ADMIN, SYSTEM or FULFILLMENT
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

        [JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageAuthorRole Role { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeAttachment
    {

        [JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string FileName { get; set; } = default!;

        /// <summary>
        /// Direct link to the attachment
        /// </summary>

        [JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeAttachmentId
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentDeclaration
    {

        [JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; set; } = default!;

        [JsonPropertyName("size")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Size { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeCheckoutForm
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisputeAuthor
    {
        /// <summary>
        /// Not present if role is ADMIN or FULFILLMENT
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

        [JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DisputeAuthorRole Role { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisputeAuthorRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FULFILLMENT")]
        FULFILLMENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageAuthorRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
        SYSTEM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FULFILLMENT")]
        FULFILLMENT = 4,

    }

    /// <summary>
    /// Request body to add message to the dispute. Presence of text or attachment fields or both is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageRequest
    {

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20000)]
        public string Text { get; set; } = default!;

        [JsonPropertyName("attachment")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeAttachmentId Attachment { get; set; } = new DisputeAttachmentId();

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageRequestType Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagRequest
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("hidden")]
        public bool? Hidden { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagId
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagResponse
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("hidden")]
        public bool Hidden { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagListResponse
    {

        [JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<TagResponse> Tags { get; set; } = new System.Collections.ObjectModel.Collection<TagResponse>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagIdsRequest
    {

        [JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<TagId> Tags { get; set; } = new System.Collections.ObjectModel.Collection<TagId>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionResponseDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignResponseDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SinglePromotionCampaignResponseDto
    {

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public CampaignResponseDto Campaign { get; set; } = new CampaignResponseDto();

        [JsonPropertyName("promotion")]
        [System.ComponentModel.DataAnnotations.Required]
        public PromotionResponseDto Promotion { get; set; } = new PromotionResponseDto();

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SinglePromotionCampaignResponseDtoStatus Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionCampaignsResponseDto
    {

        [JsonPropertyName("promotionCampaigns")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SinglePromotionCampaignResponseDto> PromotionCampaigns { get; set; } = new System.Collections.ObjectModel.Collection<SinglePromotionCampaignResponseDto>();

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionCampaignResponseDto
    {

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public CampaignResponseDto Campaign { get; set; } = new CampaignResponseDto();

        [JsonPropertyName("link")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Link { get; set; } = default!;

        [JsonPropertyName("promotion")]
        [System.ComponentModel.DataAnnotations.Required]
        public PromotionResponseDto Promotion { get; set; } = new PromotionResponseDto();

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PromotionCampaignResponseDtoStatus Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignRequestDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionRequestDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormAddWaybillRequest
    {
        /// <summary>
        /// Supported carriers are available via &lt;a href="#operation/getOrdersCarriersUsingGET" target="_blank"&gt;shipping carriers resource&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("carrierId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierId { get; set; } = default!;

        /// <summary>
        /// Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters.
        /// </summary>

        [JsonPropertyName("waybill")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Waybill { get; set; } = default!;

        /// <summary>
        /// Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.
        /// </summary>

        [JsonPropertyName("carrierName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CarrierName { get; set; } = default!;

        /// <summary>
        /// List of order line items. They must be from the order specified in the path parameter. When list is not provided or it is empty it means that every item from an order is included in shipment.
        /// </summary>

        [JsonPropertyName("lineItems")]
        public ICollection<LineItems>? LineItems { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrdersShippingCarrier
    {
        /// <summary>
        /// Identifier of a carrier - unique to every carrier.
        /// <br/>
        /// <br/>It’s highly recommended to use an identifier different from `OTHER`, because its parcel status may be updated automatically. Carrier identifier `OTHER` is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of a carrier.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormAddWaybillCreated
    {
        /// <summary>
        /// Identifier of a shipment.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters.
        /// </summary>

        [JsonPropertyName("waybill")]
        public string? Waybill { get; set; } = default!;

        /// <summary>
        /// Supported carriers are available via &lt;a href="#operation/getOrdersCarriersUsingGET" target="_blank"&gt;shipping carriers resource&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("carrierId")]
        public string? CarrierId { get; set; } = default!;

        /// <summary>
        /// Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.
        /// </summary>

        [JsonPropertyName("carrierName")]
        public string? CarrierName { get; set; } = default!;

        /// <summary>
        /// List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
        /// </summary>

        [JsonPropertyName("lineItems")]
        public object? LineItems { get; set; } = default!;

        /// <summary>
        /// Date and time of the parcel tracking number registration in UTC (ISO8601 format).
        /// </summary>

        [JsonPropertyName("createdAt")]
        public string? CreatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrdersShippingCarriersResponse
    {
        /// <summary>
        /// List of shipping carriers.
        /// </summary>

        [JsonPropertyName("carriers")]
        public ICollection<OrdersShippingCarrier>? Carriers { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutFormOrderWaybillResponse
    {
        /// <summary>
        /// List of parcel tracking numbers currently assigned to the order.
        /// </summary>

        [JsonPropertyName("shipments")]
        public ICollection<CheckoutFormAddWaybillCreated>? Shipments { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPickupDropOffPointsResponse
    {
        /// <summary>
        /// List of Allegro pickup drop off points.
        /// </summary>

        [JsonPropertyName("points")]
        public ICollection<AllegroPickupDropOffPoint>? Points { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CarrierParcelTrackingResponse
    {
        /// <summary>
        /// Carrier identifier.
        /// </summary>

        [JsonPropertyName("carrierId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierId { get; set; } = default!;

        /// <summary>
        /// Allegro parcel tracking history for multiple tracking numbers (waybills).
        /// </summary>

        [JsonPropertyName("waybills")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ParcelTrackingHistory> Waybills { get; set; } = new System.Collections.ObjectModel.Collection<ParcelTrackingHistory>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSaleProductsResponse
    {

        [JsonPropertyName("products")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BaseSaleProductResponseDto> Products { get; set; } = new System.Collections.ObjectModel.Collection<BaseSaleProductResponseDto>();

        [JsonPropertyName("categories")]
        public SaleProductResponseCategoriesDto? Categories { get; set; } = default!;

        [JsonPropertyName("filters")]
        public ICollection<ListingResponseFilters>? Filters { get; set; } = default!;

        [JsonPropertyName("nextPage")]
        public NextPage? NextPage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductProposalsRequest
    {
        /// <summary>
        /// Suggested product name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(75)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductCategory Category { get; set; } = new ProductCategory();

        /// <summary>
        /// List of product images. At least one image is required.
        /// </summary>

        [JsonPropertyName("images")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ImageUrl> Images { get; set; } = new System.Collections.ObjectModel.Collection<ImageUrl>();

        /// <summary>
        /// List of product parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductParameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<ProductParameter>();

        [JsonPropertyName("description")]
        public StandardizedDescription? Description { get; set; } = default!;

        /// <summary>
        /// Language of provided product data (name, description, parameters's values).
        /// </summary>

        [JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductChangeProposalDto
    {
        /// <summary>
        /// Product change proposal id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public ProductNameProposal? Name { get; set; } = default!;

        [JsonPropertyName("category")]
        public ProductCategoryProposal? Category { get; set; } = default!;

        /// <summary>
        /// Note about product changes proposal.
        /// </summary>

        [JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// List of proposed image change statuses.
        /// </summary>

        [JsonPropertyName("images")]
        public ICollection<ProductImageProposal>? Images { get; set; } = default!;

        /// <summary>
        /// List of proposed product parameter change statuses.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<ProductParameterProposal>? Parameters { get; set; } = default!;

        /// <summary>
        /// Receive an email notification after product changes proposal resolution.
        /// </summary>

        [JsonPropertyName("notifyViaEmailAfterVerification")]
        public bool? NotifyViaEmailAfterVerification { get; set; } = default!;

        /// <summary>
        /// Language of provided suggestion data.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    /// <summary>
    /// Image proposal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductImageProposal
    {
        /// <summary>
        /// Current product image url.
        /// </summary>

        [JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Proposed product image url.
        /// </summary>

        [JsonPropertyName("proposal")]
        public string? Proposal { get; set; } = default!;

        /// <summary>
        /// Verification message.
        /// </summary>

        [JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        /// <summary>
        /// Verification resolution type.
        /// </summary>

        [JsonPropertyName("resolutionType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ProductImageProposalResolutionType? ResolutionType { get; set; } = default!;

    }

    /// <summary>
    /// Name proposal status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductNameProposal
    {
        /// <summary>
        /// Current product name.
        /// </summary>

        [JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Proposed product name.
        /// </summary>

        [JsonPropertyName("proposal")]
        public string? Proposal { get; set; } = default!;

        /// <summary>
        /// Verification message.
        /// </summary>

        [JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        /// <summary>
        /// Verification resolution type.
        /// </summary>

        [JsonPropertyName("resolutionType")]
        public ProductNameProposalResolutionType? ResolutionType { get; set; } = default!;

    }

    /// <summary>
    /// Name proposal status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductCategoryProposal
    {
        /// <summary>
        /// Current product category identifier.
        /// </summary>

        [JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Proposed product category identifier.
        /// </summary>

        [JsonPropertyName("proposal")]
        public string? Proposal { get; set; } = default!;

        /// <summary>
        /// Verification message.
        /// </summary>

        [JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        /// <summary>
        /// Verification resolution type.
        /// </summary>

        [JsonPropertyName("resolutionType")]
        public ProductCategoryProposalResolutionType? ResolutionType { get; set; } = default!;

    }

    /// <summary>
    /// Product parameter values proposal status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductParameterProposal
    {
        /// <summary>
        /// Parameter identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// List of proposed product parameter change statuses.
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<ProductParameterValueProposal>? Values { get; set; } = default!;

    }

    /// <summary>
    /// Parameter value proposal status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductParameterValueProposal
    {
        /// <summary>
        /// Current product parameter value.
        /// </summary>

        [JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Proposed product parameter value.
        /// </summary>

        [JsonPropertyName("proposal")]
        public string? Proposal { get; set; } = default!;

        /// <summary>
        /// Verification message.
        /// </summary>

        [JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        /// <summary>
        /// Verification resolution type.
        /// </summary>

        [JsonPropertyName("resolutionType")]
        public ProductParameterValueProposalResolutionType? ResolutionType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductChangeProposalRequest
    {
        /// <summary>
        /// Proposed product name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Note about product changes proposal.
        /// </summary>

        [JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? Note { get; set; } = default!;

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductCategory Category { get; set; } = new ProductCategory();

        /// <summary>
        /// List of product images. At least one image is required.
        /// </summary>

        [JsonPropertyName("images")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ImageUrl> Images { get; set; } = new System.Collections.ObjectModel.Collection<ImageUrl>();

        /// <summary>
        /// List of product parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductParameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<ProductParameter>();

        /// <summary>
        /// Receive an email notification after product changes proposal resolution.
        /// </summary>

        [JsonPropertyName("notifyViaEmailAfterVerification")]
        public bool? NotifyViaEmailAfterVerification { get; set; } = default!;

        /// <summary>
        /// Language of provided proposal data.
        /// </summary>

        [JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; } = "pl-PL";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductChangesResponse
    {
        /// <summary>
        /// List of requested product changes.
        /// </summary>

        [JsonPropertyName("productChanges")]
        public ICollection<ProductChangeDto>? ProductChanges { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductChangeDto
    {

        [JsonPropertyName("product")]
        public Product2? Product { get; set; } = default!;

        /// <summary>
        /// List of changed product parameters.
        /// </summary>

        [JsonPropertyName("changedParameters")]
        public ICollection<ChangedParameterDto>? ChangedParameters { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangedParameterDto
    {
        /// <summary>
        /// Parameter id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Time of last parameter change in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public string? UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductDto
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Product name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductCategoryWithPath Category { get; set; } = new ProductCategoryWithPath();

        /// <summary>
        /// List of product images.
        /// </summary>

        [JsonPropertyName("images")]
        public ICollection<ImageUrl>? Images { get; set; } = default!;

        /// <summary>
        /// List of product parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<ProductParameterDto>? Parameters { get; set; } = default!;

        [JsonPropertyName("offerRequirements")]
        public OfferRequirements? OfferRequirements { get; set; } = default!;

        [JsonPropertyName("compatibilityList")]
        public SaleProductCompatibilityList? CompatibilityList { get; set; } = default!;

        [JsonPropertyName("tecdocSpecification")]
        public TecdocSpecification? TecdocSpecification { get; set; } = default!;

        [JsonPropertyName("description")]
        public StandardizedDescription? Description { get; set; } = default!;

        /// <summary>
        /// Flag that informs if product is waiting for resolution of basic parameters change proposal.
        /// </summary>

        [JsonPropertyName("isDraft")]
        public bool? IsDraft { get; set; } = default!;

        [JsonPropertyName("aiCoCreatedContent")]
        public AiCoCreatedContent? AiCoCreatedContent { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductProposalsResponse
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Product name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("category")]
        public Category2? Category { get; set; } = default!;

        /// <summary>
        /// List of product images.
        /// </summary>

        [JsonPropertyName("images")]
        public ICollection<ImageUrl>? Images { get; set; } = default!;

        /// <summary>
        /// List of product parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<NewProductParameterDto>? Parameters { get; set; } = default!;

        [JsonPropertyName("description")]
        public StandardizedDescription? Description { get; set; } = default!;

        [JsonPropertyName("supplier")]
        public SupplierDto? Supplier { get; set; } = default!;

        /// <summary>
        /// Offer id.
        /// </summary>

        [JsonPropertyName("offerId")]
        public string? OfferId { get; set; } = default!;

        /// <summary>
        /// Language of product data (name, description, parameters's values).
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseSaleProductResponseDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Name of the product.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("description")]
        public StandardizedDescription? Description { get; set; } = default!;

        [JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductCategoryWithPath Category { get; set; } = new ProductCategoryWithPath();

        [JsonPropertyName("images")]
        public ICollection<ImageUrl>? Images { get; set; } = default!;

        [JsonPropertyName("parameters")]
        public ICollection<ProductParameterDto>? Parameters { get; set; } = default!;

        /// <summary>
        /// Flag that informs if product is waiting for resolution of basic parameters change proposal.
        /// </summary>

        [JsonPropertyName("isDraft")]
        public bool? IsDraft { get; set; } = default!;

        [JsonPropertyName("aiCoCreatedContent")]
        public AiCoCreatedContent? AiCoCreatedContent { get; set; } = default!;

    }

    /// <summary>
    /// Category in which the product can be listed for sale
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductCategoryWithPath
    {
        /// <summary>
        /// Category identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Category name in requested language
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("path")]
        public ICollection<ProductsCategoryPath>? Path { get; set; } = default!;

        /// <summary>
        /// A list of similar categories in which you can sell this product.
        /// </summary>

        [JsonPropertyName("similar")]
        public ICollection<ProductSimilarCategoryWithPath>? Similar { get; set; } = default!;

    }

    /// <summary>
    /// Category in which the product can be listed for sale
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSimilarCategoryWithPath
    {
        /// <summary>
        /// Category identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Category name in requested language
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("path")]
        public ICollection<ProductsCategoryPath>? Path { get; set; } = default!;

    }

    /// <summary>
    /// Compatibility list assigned to this product, based on information from TecDoc database.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductCompatibilityList
    {
        /// <summary>
        /// Id of product-based compatibility list.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Type of compatibility list.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = "PRODUCT_BASED";

        /// <summary>
        /// List of the compatible items.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<CompatibilityListItemProductBased>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductResponseCategoriesDto
    {
        /// <summary>
        /// A list of categories that contain results for given search parameters.
        /// </summary>

        [JsonPropertyName("subcategories")]
        public ICollection<ProductsCategorySubcategories>? Subcategories { get; set; } = default!;

        /// <summary>
        /// The path of current category used as categrory filter in search.
        /// </summary>

        [JsonPropertyName("path")]
        public ICollection<ProductsCategoryPath>? Path { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductsCategorySubcategories
    {
        /// <summary>
        /// Category id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Category name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Total number of products matching query criteria in this category.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductsCategoryPath
    {
        /// <summary>
        /// Category id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Category name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    /// <summary>
    /// Product's parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductParameter
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

        [JsonPropertyName("valuesLabels")]
        public ICollection<string>? ValuesLabels { get; set; } = default!;

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        [JsonPropertyName("options")]
        public Options? Options { get; set; } = default!;

    }

    /// <summary>
    /// Supplier id.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplierDto
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewProductParameterDto
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

    }

    /// <summary>
    /// Product's parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductParameterDto
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

        [JsonPropertyName("valuesLabels")]
        public ICollection<string>? ValuesLabels { get; set; } = default!;

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        [JsonPropertyName("options")]
        public Options2? Options { get; set; } = default!;

    }

    /// <summary>
    /// Each path will point to a specific field in object which is co-created by AI.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AiCoCreatedContent
    {

        [JsonPropertyName("paths")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<string> Paths { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Single offer data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOffer
    {
        /// <summary>
        /// Name (title) of an offer. Length cannot be more than 75 characters. Read more: &lt;a href="../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#tytul-oferty" target="_blank"&gt;PL&lt;/a&gt;
        /// <br/> /
        /// <br/>&lt;a href="../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-title" target="_blank"&gt;EN&lt;/a&gt; .
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(75)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("payments")]
        public Payments? Payments { get; set; } = default!;

        [JsonPropertyName("sellingMode")]
        public SellingMode? SellingMode { get; set; } = default!;

        [JsonPropertyName("location")]
        public Location? Location { get; set; } = default!;

        [JsonPropertyName("images")]
        public ICollection<string>? Images { get; set; } = default!;

        [JsonPropertyName("description")]
        public StandardizedDescription? Description { get; set; } = default!;

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

        [JsonPropertyName("sizeTable")]
        public SizeTable? SizeTable { get; set; } = default!;

        [JsonPropertyName("tax")]
        public ExtendedTax? Tax { get; set; } = default!;

        [JsonPropertyName("taxSettings")]
        public OfferTaxSettings? TaxSettings { get; set; } = default!;

        [JsonPropertyName("messageToSellerSettings")]
        public MessageToSellerSettings? MessageToSellerSettings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferRequestBase : SaleProductOffer
    {

        [JsonPropertyName("category")]
        public Category3? Category { get; set; } = default!;

        [JsonPropertyName("parameters")]
        public ICollection<ParameterProductOfferRequest>? Parameters { get; set; } = default!;

        [JsonPropertyName("publication")]
        public Publication3? Publication { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public Delivery3? Delivery { get; set; } = default!;

        [JsonPropertyName("afterSalesServices")]
        public AfterSalesServicesProductOfferRequest? AfterSalesServices { get; set; } = default!;

        /// <summary>
        /// The size table information. You can enter the size tabe identifier or name.
        /// </summary>

        [JsonPropertyName("sizeTable")]
        public SizeTable2? SizeTable { get; set; } = default!;

        /// <summary>
        /// Identifier of contact data for sales format ADVERTISEMENT (classified ad). You can enter the contact identifier or name.
        /// </summary>

        [JsonPropertyName("contact")]
        public Contact2? Contact { get; set; } = default!;

        [JsonPropertyName("discounts")]
        public DiscountsProductOfferRequest? Discounts { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOffersRequestStock
    {
        /// <summary>
        /// Quantity of this offer available for sale - how many times this offer can be sold. Offer can be activated only with stock being greater then 0. Setting this quantity to 0 for 'ACTIVE' or 'ACTIVATING' offer will trigger changing its status to 'ENDED'.
        /// </summary>

        [JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Available { get; set; } = default!;

        /// <summary>
        /// Stock unit
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SaleProductOffersRequestStockUnit? Unit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferRequestV1 : SaleProductOfferRequestBase
    {

        [JsonPropertyName("productSet")]
        public ICollection<ProductSet>? ProductSet { get; set; } = default!;

        [JsonPropertyName("b2b")]
        public B2b? B2b { get; set; } = default!;

        [JsonPropertyName("attachments")]
        public ProductOfferAttachment? Attachments { get; set; } = default!;

        [JsonPropertyName("fundraisingCampaign")]
        public ProductOfferFundraisingCampaignRequest? FundraisingCampaign { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ProductOfferAdditionalServicesRequest? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("stock")]
        [System.ComponentModel.DataAnnotations.Required]
        public SaleProductOffersRequestStock Stock { get; set; } = new SaleProductOffersRequestStock();

        [JsonPropertyName("delivery")]
        public Delivery4? Delivery { get; set; } = default!;

        [JsonPropertyName("publication")]
        public SaleProductOfferPublicationRequest? Publication { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public AdditionalMarketplacesRequest? AdditionalMarketplaces { get; set; } = default!;

        /// <summary>
        /// For the `/sale/product-offers` resources you can send only definition of the MANUAL compatibility list. If compatibility list is provided for the product assigned to the offer, it will be used automatically.
        /// </summary>

        [JsonPropertyName("compatibilityList")]
        public CompatibilityListManualType? CompatibilityList { get; set; } = default!;

        /// <summary>
        /// Declared base language of the offer.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferPatchRequestV1 : SaleProductOfferRequestBase
    {

        [JsonPropertyName("productSet")]
        public ICollection<productSet>? ProductSet { get; set; } = default!;

        [JsonPropertyName("b2b")]
        public B2b? B2b { get; set; } = default!;

        [JsonPropertyName("attachments")]
        public ProductOfferAttachment? Attachments { get; set; } = default!;

        [JsonPropertyName("fundraisingCampaign")]
        public ProductOfferFundraisingCampaignRequest? FundraisingCampaign { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ProductOfferAdditionalServicesRequest? AdditionalServices { get; set; } = default!;

        /// <summary>
        /// For the `/sale/product-offers` resources you can send only definition of the MANUAL compatibility list. If compatibility list is provided for the product assigned to the offer, it will be used automatically.
        /// </summary>

        [JsonPropertyName("compatibilityList")]
        public CompatibilityListManualType? CompatibilityList { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public Delivery5? Delivery { get; set; } = default!;

        [JsonPropertyName("stock")]
        public SaleProductOffersRequestStock? Stock { get; set; } = default!;

        [JsonPropertyName("publication")]
        public SaleProductOfferPublicationRequest? Publication { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public AdditionalMarketplacesRequest? AdditionalMarketplaces { get; set; } = default!;

        /// <summary>
        /// Declared base language of the offer.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferResponseV1 : SaleProductOffer
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("productSet")]
        public ICollection<productSet2>? ProductSet { get; set; } = default!;

        [JsonPropertyName("category")]
        public OfferCategory? Category { get; set; } = default!;

        [JsonPropertyName("attachments")]
        public ProductOfferAttachment? Attachments { get; set; } = default!;

        [JsonPropertyName("fundraisingCampaign")]
        public ProductOfferFundraisingCampaignResponse? FundraisingCampaign { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ProductOfferAdditionalServicesResponse? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("delivery")]
        public DeliveryProductOfferResponse? Delivery { get; set; } = default!;

        [JsonPropertyName("publication")]
        public SaleProductOfferPublicationResponse? Publication { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public AdditionalMarketplacesResponse? AdditionalMarketplaces { get; set; } = default!;

        [JsonPropertyName("b2b")]
        public B2b? B2b { get; set; } = default!;

        [JsonPropertyName("compatibilityList")]
        public CompatibilityListProductOfferResponse? CompatibilityList { get; set; } = default!;

        /// <summary>
        /// Declared base language of the offer.
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

        [JsonPropertyName("validation")]
        public Validation? Validation { get; set; } = default!;

        [JsonPropertyName("afterSalesServices")]
        public AfterSalesServices? AfterSalesServices { get; set; } = default!;

        [JsonPropertyName("discounts")]
        public DiscountsProductOfferResponse? Discounts { get; set; } = default!;

        [JsonPropertyName("stock")]
        public Stock? Stock { get; set; } = default!;

        /// <summary>
        /// List of offer parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<ParameterProductOfferResponse>? Parameters { get; set; } = default!;

        /// <summary>
        /// Identifier of contact data for sales format ADVERTISEMENT (classified ad); retrieve it via GET /sale/offer-contacts.
        /// </summary>

        [JsonPropertyName("contact")]
        public Contact? Contact { get; set; } = default!;

        /// <summary>
        /// Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Single opertion data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferStatusResponse
    {

        [JsonPropertyName("offer")]
        public OfferId? Offer { get; set; } = default!;

        [JsonPropertyName("operation")]
        public Operation? Operation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferBase
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Type of id. This field is optional. It helps in finding products more accurately. If an idType is not set, a given id is understood as a product's id.
        /// <br/> - `GTIN` - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.
        /// <br/> - `MPN` - restricts the search filtering to MPNs (Manufacturer Part Number).
        /// </summary>

        [JsonPropertyName("idType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ProductOfferBaseIdType? IdType { get; set; } = default!;

        /// <summary>
        /// List of product parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<ParameterProductOfferRequest>? Parameters { get; set; } = default!;

        /// <summary>
        /// List of product images.
        /// </summary>

        [JsonPropertyName("images")]
        public ICollection<string>? Images { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOffer : ProductOfferBase
    {
        /// <summary>
        /// Product name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(75)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("category")]
        public ProductCategory? Category { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSetElement
    {
        /// <summary>
        /// You should enter the product identifier (UUID or EAN) or a complete product definition.
        /// </summary>

        [JsonPropertyName("product")]
        public ProductOffer? Product { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSetElementQuantity
    {
        /// <summary>
        /// The number of a given product included in a single offer sold as an element of a product set. &lt;small&gt;**Note:** For number of sets available in stock, use `stock.available` property.&lt;/small&gt;
        /// </summary>

        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSetElementResponsiblePersonRequest
    {
        /// <summary>
        /// Reference to the responsible person configured using &lt;a href="https://developer.allegro.pl/documentation#tag/Responsible-persons"&gt;Responsible Persons API&lt;/a&gt;. Provide either id or name - id will be used if both are provided. Setting this object to null will result in no responsible person assigned to this product.&lt;br/&gt; &lt;b&gt;This property is valid only for the first product in the product set.&lt;/b&gt;
        /// </summary>

        [JsonPropertyName("responsiblePerson")]
        public ResponsiblePerson? ResponsiblePerson { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOfferResponse
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("publication")]
        public Publication4? Publication { get; set; } = default!;

    }

    /// <summary>
    /// The definitions of the different after sales services assigned to the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AfterSalesServicesProductOfferRequest
    {

        [JsonPropertyName("impliedWarranty")]
        public ImpliedWarranty2? ImpliedWarranty { get; set; } = default!;

        [JsonPropertyName("returnPolicy")]
        public ReturnPolicy2? ReturnPolicy { get; set; } = default!;

        [JsonPropertyName("warranty")]
        public Warranty2? Warranty { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryProductOfferRequest
    {
        /// <summary>
        /// Handling time, ISO 8601 duration format. This field must be set to one of the following: PT0S for immediately, PT24H, P2D, P3D, P4D, P5D, P7D, P10D, P14D, P21D, P30D, P60D.
        /// </summary>

        [JsonPropertyName("handlingTime")]
        public string? HandlingTime { get; set; } = default!;

        [JsonPropertyName("shippingRates")]
        public ShippingRates2? ShippingRates { get; set; } = default!;

        /// <summary>
        /// Additional information about delivery. Parameter is deprecated and will be removed in the future. Additional information is only visible on marketplace `allegro-pl`.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(650)]
        [System.Obsolete]
        public string? AdditionalInfo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryProductOfferResponse
    {
        /// <summary>
        /// Handling time, ISO 8601 duration format. This field must be set to one of the following: PT0S for immediately, PT24H, P2D, P3D, P4D, P5D, P7D, P10D, P14D, P21D, P30D, P60D.
        /// </summary>

        [JsonPropertyName("handlingTime")]
        public string? HandlingTime { get; set; } = default!;

        [JsonPropertyName("shippingRates")]
        public JustId? ShippingRates { get; set; } = default!;

        /// <summary>
        /// Additional information about delivery. Parameter is deprecated and will be removed in the future. Additional information is only visible on marketplace `allegro-pl`.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(650)]
        [System.Obsolete]
        public string? AdditionalInfo { get; set; } = default!;

        /// <summary>
        /// Shipment date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("shipmentDate")]
        public System.DateTimeOffset? ShipmentDate { get; set; } = default!;

    }

    /// <summary>
    /// Information about publication in multiple marketplaces.&lt;br/&gt; See [Changes in listing offers - we will add the possibility to display offers in foreign domains of Allegro's marketplaces](https://developer.allegro.pl/news/changes-in-listing-offers-we-will-add-the-possibility-to-display-offers-in-foreign-domains-of-allegro-s-marketplaces-9gKv0RVzRTK) for more details regarding this field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferPublicationMarketplacesRequest
    {
        /// <summary>
        /// Specifies whether an offer should be visible in the additional marketplace. This field is not mandatory. We will interpret the absence of this field as an empty array (the listing will be visible only in its base marketplace).
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<JustId>? Additional { get; set; } = default!;

    }

    /// <summary>
    /// Information about publication in multiple marketplaces.&lt;br/&gt; See [Changes in listing offers - we will add the possibility to display offers in foreign domains of Allegro's marketplaces](https://developer.allegro.pl/news/changes-in-listing-offers-we-will-add-the-possibility-to-display-offers-in-foreign-domains-of-allegro-s-marketplaces-9gKv0RVzRTK) for more details regarding this field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferPublicationMarketplacesResponse
    {
        /// <summary>
        /// Specifies whether an offer is visible in the additional marketplace.
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<JustId>? Additional { get; set; } = default!;

        /// <summary>
        /// &lt;small&gt;[read-only]&lt;/small&gt; Specifies the offer’s base service. We assign the value in the field automatically when the offer is created and it is read-only, it will never change.
        /// </summary>

        [JsonPropertyName("base")]
        public JustId? Base { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferPublicationRequest : Publication
    {

        [JsonPropertyName("marketplaces")]
        public SaleProductOfferPublicationMarketplacesRequest? Marketplaces { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleProductOfferPublicationResponse : Publication
    {

        [JsonPropertyName("marketplaces")]
        public SaleProductOfferPublicationMarketplacesResponse? Marketplaces { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Selected information about the offer in each additional service. This field does not contain information about the base marketplace of the offer.&lt;br/&gt; Possible values of `marketplaceId` can be obtained from `GET /marketplaces` resource.&lt;/br&gt; See [Allegro foreign marketplaces](https://developer.allegro.pl/tutorials/listing-and-managing-offers-on-foreign-marketplaces-7GndGjeAATn) for more details regarding this field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacesRequest
    {

    }

    /// <summary>
    /// Selected information about the offer in each additional service. This field does not contain information about the base marketplace of the offer. You will find all available marketplaces here. Even if the seller does not want the offer to be visible in the additional service, we will return it in response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacesResponse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacesRefusalReasonResponse
    {
        /// <summary>
        /// Technical code of the refusal reason
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Short description of the refusal reason in natural language
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

        /// <summary>
        /// Additional technical parameters of the refusal reason
        /// </summary>

        [JsonPropertyName("parameters")]
        public IDictionary<string, ICollection<string>>? Parameters { get; set; } = default!;

    }

    /// <summary>
    /// Offer's parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterProductOfferRequest
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The name of the parameter.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

    }

    /// <summary>
    /// Parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterProductOfferResponse
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The name of the parameter.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("rangeValue")]
        public ParameterRangeValue? RangeValue { get; set; } = default!;

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        [JsonPropertyName("valuesIds")]
        public ICollection<string>? ValuesIds { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountsProductOfferRequest
    {

        [JsonPropertyName("wholesalePriceList")]
        public WholesalePriceList3? WholesalePriceList { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountsProductOfferResponse
    {

        [JsonPropertyName("wholesalePriceList")]
        public JustId? WholesalePriceList { get; set; } = default!;

    }

    /// <summary>
    /// Conditions which an offer must meet to be assigned with the product, i.e. Condition parameter must be set to New.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferRequirements
    {
        /// <summary>
        /// The id of the offer that can be associated with this product.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("parameters")]
        public ICollection<ProductParameterDto>? Parameters { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalEmailsResponse
    {

        [JsonPropertyName("additional-emails")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<AdditionalEmail> AdditionalEmails { get; set; } = new System.Collections.ObjectModel.Collection<AdditionalEmail>();

    }

    /// <summary>
    /// Details of a single additional email address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalEmail
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalEmailRequest
    {
        /// <summary>
        /// A valid email address you want to add to your account. Maximum length of the part before the `@` sign is 64 characters.
        /// </summary>

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPackages
    {

        [JsonPropertyName("basePackage")]
        [System.ComponentModel.DataAnnotations.Required]
        public ClassifiedPackage BasePackage { get; set; } = new ClassifiedPackage();

        [JsonPropertyName("extraPackages")]
        public ICollection<ClassifiedPackage>? ExtraPackages { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedResponse
    {

        [JsonPropertyName("basePackage")]
        [System.ComponentModel.DataAnnotations.Required]
        public ClassifiedPackage BasePackage { get; set; } = new ClassifiedPackage();

        [JsonPropertyName("extraPackages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ClassifiedExtraPackage> ExtraPackages { get; set; } = new System.Collections.ObjectModel.Collection<ClassifiedExtraPackage>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedExtension
    {
        /// <summary>
        /// The classified extension description.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The classified extension name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPackageConfig
    {

        [JsonPropertyName("extensions")]
        public ICollection<ClassifiedExtension>? Extensions { get; set; } = default!;

        /// <summary>
        /// The classifieds package ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The classifieds package name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A list of additional promotions included in the package.
        /// </summary>

        [JsonPropertyName("promotions")]
        public ICollection<ClassifiedPromotion>? Promotions { get; set; } = default!;

        [JsonPropertyName("publication")]
        public ClassifiedPublication? Publication { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ClassifiedPackageConfigType Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPackageConfigs
    {

        [JsonPropertyName("packages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ClassifiedPackageConfig> Packages { get; set; } = new System.Collections.ObjectModel.Collection<ClassifiedPackageConfig>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPromotion
    {
        /// <summary>
        /// Duration in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("duration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; } = default!;

        /// <summary>
        /// Name of the promotion.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassifiedPublication
    {
        /// <summary>
        /// Duration in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("duration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentOperations
    {
        /// <summary>
        /// Collection of payment operations.
        /// </summary>

        [JsonPropertyName("paymentOperations")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BaseOperation> PaymentOperations1 { get; set; } = new System.Collections.ObjectModel.Collection<BaseOperation>();

        /// <summary>
        /// Number of payment operations returned in search result for the given parameters.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = default!;

        /// <summary>
        /// Total number of payment operations for the given parameters.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalCount { get; set; } = default!;

    }

    [JsonInheritanceConverter(typeof(BaseOperation), "type")]
    [JsonInheritanceAttribute("CORRECTION", typeof(CorrectionOperation))]
    [JsonInheritanceAttribute("CONTRIBUTION", typeof(ContributionOperation))]
    [JsonInheritanceAttribute("PAYOUT", typeof(PayoutOperation))]
    [JsonInheritanceAttribute("PAYOUT_CANCEL", typeof(PayoutOperationCancel))]
    [JsonInheritanceAttribute("REFUND_INCREASE", typeof(RefundIncreaseOperation))]
    [JsonInheritanceAttribute("REFUND_CHARGE", typeof(RefundChargeOperation))]
    [JsonInheritanceAttribute("REFUND_CANCEL", typeof(RefundCancelOperation))]
    [JsonInheritanceAttribute("SURCHARGE", typeof(SurchargeOperation))]
    [JsonInheritanceAttribute("DEDUCTION_CHARGE", typeof(DeductionChargeOperation))]
    [JsonInheritanceAttribute("DEDUCTION_INCREASE", typeof(DeductionIncreaseOperation))]
    [JsonInheritanceAttribute("BLOCKADE", typeof(BlockadeOperation))]
    [JsonInheritanceAttribute("BLOCKADE_RELEASE", typeof(BlockadeReleaseOperation))]
    [JsonInheritanceAttribute("COMPENSATION", typeof(CompensationOperation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseOperation
    {
        /// <summary>
        /// The group to which the given operation type belongs.
        /// </summary>

        [JsonPropertyName("group")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BaseOperationGroup Group { get; set; } = default!;

        [JsonPropertyName("wallet")]
        [System.ComponentModel.DataAnnotations.Required]
        public Wallet Wallet { get; set; } = new Wallet();

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public OperationValue Value { get; set; } = default!;

        /// <summary>
        /// Date and time of the operation in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

        /// <summary>
        /// The marketplace ID where operation was made. Value may be `null` for operations not assigned to any marketplace.
        /// </summary>

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

    }

    /// <summary>
    /// The state of the wallet after the operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Wallet
    {
        /// <summary>
        /// The payment operator.
        /// </summary>

        [JsonPropertyName("paymentOperator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public WalletPaymentOperator PaymentOperator { get; set; } = default!;

        /// <summary>
        /// The type of the wallet.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public WalletType Type { get; set; } = default!;

        [JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public WalletBalance Balance { get; set; } = default!;

    }

    /// <summary>
    /// The wallet balance after the operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WalletBalance : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The operation value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Delivery amount for payment refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundDeliveryValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overpaid amount for payment refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundOverpaidValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional services amount for payment refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundAdditionalServicesValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Surcharge refund amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundSurchargeValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Total amount for payment refund.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundTotalValue : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorrectionOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CORRECTION";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContributionOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "CONTRIBUTION";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        [JsonPropertyName("participant")]
        public BuyerParticipant? Participant { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayoutOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "PAYOUT";

        [JsonPropertyName("payout")]
        public Payout? Payout { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayoutOperationCancel : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "PAYOUT_CANCEL";

        [JsonPropertyName("payout")]
        public Payout? Payout { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundIncreaseOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "REFUND_INCREASE";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        [JsonPropertyName("participant")]
        public SellerParticipant? Participant { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundCancelOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "REFUND_CANCEL";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundChargeOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "REFUND_CHARGE";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        [JsonPropertyName("participant")]
        public BuyerParticipant? Participant { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SurchargeOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "SURCHARGE";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        [JsonPropertyName("surcharge")]
        public Surcharge? Surcharge { get; set; } = default!;

        [JsonPropertyName("participant")]
        public BuyerParticipant? Participant { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeductionChargeOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "DEDUCTION_CHARGE";

        [JsonPropertyName("deduction")]
        public Deduction? Deduction { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeductionIncreaseOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "DEDUCTION_INCREASE";

        [JsonPropertyName("deduction")]
        public Deduction? Deduction { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockadeOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "BLOCKADE";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockadeReleaseOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "BLOCKADE_RELEASE";

        [JsonPropertyName("payment")]
        public OperationPayment? Payment { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompensationOperation : BaseOperation
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "COMPENSATION";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationPayment
    {
        /// <summary>
        /// The payment ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Participant
    {
        /// <summary>
        /// Company name.
        /// </summary>

        [JsonPropertyName("companyName")]
        public string? CompanyName { get; set; } = default!;

        /// <summary>
        /// Login.
        /// </summary>

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

        /// <summary>
        /// First name.
        /// </summary>

        [JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// Last name.
        /// </summary>

        [JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; } = default!;

        [JsonPropertyName("address")]
        public OperationParticipantAddress? Address { get; set; } = default!;

    }

    /// <summary>
    /// The seller's data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerParticipant : Participant
    {
        /// <summary>
        /// The seller's ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The buyer's data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuyerParticipant : Participant
    {
        /// <summary>
        /// The buyers's ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationParticipantAddress
    {
        /// <summary>
        /// Street.
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// City.
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Postal code.
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; } = default!;

    }

    /// <summary>
    /// Payout.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payout
    {
        /// <summary>
        /// The payout ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// Surcharge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge
    {
        /// <summary>
        /// The surcharge ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Deduction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deduction
    {
        /// <summary>
        /// The deduction ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Contains additional information describing products from automotive categories. Technical specification is created based on TecDoc database and can only be used while creating offer with assigned product to it. &lt;a href="../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA" target="_blank"&gt;Read more&lt;/a&gt;.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TecdocSpecification
    {
        /// <summary>
        /// Identifier of technical specification.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Text representation of the technical specification. Provided for informational purposes only - ignored when creating (Post) or updating (Put) compatibility list in the offer.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<TecdocSpecificationItem>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TecdocSpecificationItem
    {
        /// <summary>
        /// Technical specification property name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Technical specification property values.
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlackListResponse
    {

        [JsonPropertyName("user")]
        public BlacklistUser? User { get; set; } = default!;

        /// <summary>
        /// Note about reason of blacklisting.
        /// </summary>

        [JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Date and time of the creation in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("date")]
        public System.DateTimeOffset? Date { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlacklistRequest
    {

        [JsonPropertyName("user")]
        public BlacklistUser? User { get; set; } = default!;

        /// <summary>
        /// Note about reason of blacklisting.
        /// </summary>

        [JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlacklistUser
    {
        /// <summary>
        /// Id of excluded user.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double? Id { get; set; } = default!;

        /// <summary>
        /// Login of excluded user.
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeResponse
    {
        /// <summary>
        /// User Id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// User login.
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

        /// <summary>
        /// User's first name.
        /// </summary>

        [JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// User's last name.
        /// </summary>

        [JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// User's email.
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [JsonPropertyName("baseMarketplace")]
        public BaseMarketplace? BaseMarketplace { get; set; } = default!;

        [JsonPropertyName("company")]
        public Company? Company { get; set; } = default!;

        /// <summary>
        /// User's features list:
        /// <br/> - `SUPER_SELLER` - Super Seller ("Super Sprzedawca") information.
        /// <br/> - `ONE_FULFILLMENT` - Seller uses the fulfillment service provided by Allegro.
        /// </summary>

        [JsonPropertyName("features")]
        public ICollection<string>? Features { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Company
    {
        /// <summary>
        /// User's company name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// User's tax identification number.
        /// </summary>

        [JsonPropertyName("taxId")]
        public string? TaxId { get; set; } = default!;

    }

    /// <summary>
    /// bid response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MyBidResponse
    {

        [JsonPropertyName("maxAmount")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder MaxAmount { get; set; } = new PriceModificationFixedPriceHolder();

        /// <summary>
        /// This indicates if the minimal price of the auction has been met or is not set at all. A minimal price can be set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not higher than the minimal price when the auction ends, the listing ends and the item is not sold.
        /// </summary>

        [JsonPropertyName("minimalPriceMet")]
        public bool? MinimalPriceMet { get; set; } = default!;

        /// <summary>
        /// Is this bid currently winning?
        /// </summary>

        [JsonPropertyName("highBidder")]
        public bool HighBidder { get; set; } = default!;

        /// <summary>
        /// Auction details.
        /// </summary>

        [JsonPropertyName("auction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Auction Auction { get; set; } = new Auction();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerOfferEventsResponse
    {
        /// <summary>
        /// The list of events.
        /// </summary>

        [JsonPropertyName("offerEvents")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<SellerOfferBaseEvent> OfferEvents { get; set; } = new System.Collections.ObjectModel.Collection<SellerOfferBaseEvent>();

    }

    /// <summary>
    /// The data of an event.
    /// </summary>
    [JsonInheritanceConverter(typeof(SellerOfferBaseEvent), "type")]
    [JsonInheritanceAttribute("OFFER_ACTIVATED", typeof(OfferActivatedEvent))]
    [JsonInheritanceAttribute("OFFER_CHANGED", typeof(OfferChangedEvent))]
    [JsonInheritanceAttribute("OFFER_ENDED", typeof(OfferEndedEvent))]
    [JsonInheritanceAttribute("OFFER_STOCK_CHANGED", typeof(OfferStockChangedEvent))]
    [JsonInheritanceAttribute("OFFER_PRICE_CHANGED", typeof(OfferPriceChangedEvent))]
    [JsonInheritanceAttribute("OFFER_ARCHIVED", typeof(OfferArchivedEvent))]
    [JsonInheritanceAttribute("OFFER_BID_PLACED", typeof(OfferBidPlacedEvent))]
    [JsonInheritanceAttribute("OFFER_BID_CANCELED", typeof(OfferBidCanceledEvent))]
    [JsonInheritanceAttribute("OFFER_TRANSLATION_UPDATED", typeof(OfferTranslationUpdatedEvent))]
    [JsonInheritanceAttribute("OFFER_VISIBILITY_CHANGED", typeof(OfferVisibilityChangedEvent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellerOfferBaseEvent
    {
        /// <summary>
        /// The ID of the event. It can be used in the `from` parameter of the query.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The date and time when the event occurred, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferActivatedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_ACTIVATED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferChangedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_CHANGED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferEndedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_ENDED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventEndedOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferStockChangedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_STOCK_CHANGED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPriceChangedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_PRICE_CHANGED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferArchivedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_ARCHIVED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferBidPlacedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_BID_PLACED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferBidCanceledEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_BID_CANCELED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTranslationUpdatedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_TRANSLATION_UPDATED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOffer Offer { get; set; } = default!;

        [JsonPropertyName("translations")]
        public ICollection<ChangedTranslation>? Translations { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The changed translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangedTranslation
    {
        /// <summary>
        /// Translation language
        /// </summary>

        [JsonPropertyName("language")]
        public string? Language { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferVisibilityChangedEvent : SellerOfferBaseEvent
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = "OFFER_VISIBILITY_CHANGED";

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventExternalOfferWithPublication Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The data of the offer, for which the event occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferEventBaseOffer
    {
        /// <summary>
        /// The offer ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferEventExternalOffer : OfferEventBaseOffer
    {

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferEventExternalOfferWithPublication : OfferEventBaseOffer
    {

        [JsonPropertyName("external")]
        public ExternalId? External { get; set; } = default!;

        [JsonPropertyName("publication")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferMarketplacesPublication Publication { get; set; } = new OfferMarketplacesPublication();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Offer publication data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferMarketplacesPublication
    {

        [JsonPropertyName("marketplaces")]
        [System.ComponentModel.DataAnnotations.Required]
        public MarketplacesVisibility Marketplaces { get; set; } = new MarketplacesVisibility();

        /// <summary>
        /// List of marketplaces with updated visibility.
        /// </summary>

        [JsonPropertyName("updatedMarketplaces")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<string> UpdatedMarketplaces { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Offer marketplaces visibility information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplacesVisibility
    {
        /// <summary>
        /// Base marketplace ID.
        /// </summary>

        [JsonPropertyName("base")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base { get; set; } = default!;

        /// <summary>
        /// Additional marketplaces information.
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<AdditionalMarketplacesVisibility>? Additional { get; set; } = default!;

    }

    /// <summary>
    /// Offer additional marketplaces visibility information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacesVisibility
    {
        /// <summary>
        /// Additional marketplace ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Marketplace visibility qualification status.
        /// </summary>

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdditionalMarketplacesVisibilityStatus Status { get; set; } = default!;

        /// <summary>
        /// Reasons of visibility refusal.
        /// </summary>

        [JsonPropertyName("refusalReasons")]
        public ICollection<RefusalReason>? RefusalReasons { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefusalReason : Anonymous12
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelatedReason : Anonymous13
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferEventEndedOffer : OfferEventExternalOffer
    {
        /// <summary>
        /// Information about publication of the given offer.
        /// </summary>

        [JsonPropertyName("publication")]
        [System.ComponentModel.DataAnnotations.Required]
        public Publication5 Publication { get; set; } = new Publication5();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBadgeCampaignsList
    {
        /// <summary>
        /// List of badge campaigns.
        /// </summary>

        [JsonPropertyName("badgeCampaigns")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeCampaign> BadgeCampaigns { get; set; } = new System.Collections.ObjectModel.Collection<BadgeCampaign>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeCampaign
    {
        /// <summary>
        /// Badge campaign ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Badge campaign name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required]
        public MarketplaceReference Marketplace { get; set; } = new MarketplaceReference();

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgeCampaignType Type { get; set; } = default!;

        [JsonPropertyName("eligibility")]
        [System.ComponentModel.DataAnnotations.Required]
        public UserCampaignEligibility Eligibility { get; set; } = new UserCampaignEligibility();

        [JsonPropertyName("application")]
        [System.ComponentModel.DataAnnotations.Required]
        public ApplicationTimePolicy Application { get; set; } = new ApplicationTimePolicy();

        [JsonPropertyName("visibility")]
        [System.ComponentModel.DataAnnotations.Required]
        public VisibilityTimePolicy Visibility { get; set; } = new VisibilityTimePolicy();

        [JsonPropertyName("publication")]
        [System.ComponentModel.DataAnnotations.Required]
        public PublicationTimePolicy Publication { get; set; } = new PublicationTimePolicy();

        /// <summary>
        /// Link to campaign Terms &amp; Conditions
        /// </summary>

        [JsonPropertyName("regulationsLink")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RegulationsLink { get; set; } = default!;

    }

    /// <summary>
    /// Summary of user eligibility for participation in the campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserCampaignEligibility
    {
        /// <summary>
        /// Information whether user is eligible to participate in this campaign.
        /// </summary>

        [JsonPropertyName("eligible")]
        public bool Eligible { get; set; } = default!;

        /// <summary>
        /// Information why user is not able to participate in the campaign.
        /// </summary>

        [JsonPropertyName("refusalReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<CampaignRefusalReason> RefusalReasons { get; set; } = new System.Collections.ObjectModel.Collection<CampaignRefusalReason>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignRefusalReason
    {
        /// <summary>
        /// Code corresponding to the message. For more information visit &lt;a href="/badge/#6" target="_blank"&gt;the list of available codes&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// List of refusal messages.
        /// </summary>

        [JsonPropertyName("messages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<RefusalMessage> Messages { get; set; } = new System.Collections.ObjectModel.Collection<RefusalMessage>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefusalMessage
    {
        /// <summary>
        /// Detailed message.
        /// </summary>

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; } = default!;

        /// <summary>
        /// Optional link that redirects to page associated with refusal reason.
        /// </summary>

        [JsonPropertyName("link")]
        public string? Link { get; set; } = default!;

    }

    /// <summary>
    /// Time period when the campaign is open for applying for badge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationTimePolicy
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ApplicationTimePolicyType Type { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

    }

    /// <summary>
    /// Time period when the campaign is visible in &lt;a href="https://allegro.pl/moje-allegro/sprzedaz/moje-oferty" target="_blank"&gt;My Allegro&lt;/a&gt; and &lt;a href="https://ms.allegro.pl/seller-offers/" target="_blank"&gt;Sales Manager (Menedżer sprzedaży)&lt;/a&gt; (it is not equal to the time period when badges are displayed on the list of offers or on the offer page).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VisibilityTimePolicy
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public VisibilityTimePolicyType Type { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

    }

    /// <summary>
    /// Time period when the badge is displayed on the list of offers or on the offer page.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicationTimePolicy
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PublicationTimePolicyType Type { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

    }

    /// <summary>
    /// Time period when the badge is displayed on the list of offers or on the offer page.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgePublicationTimePolicy
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgePublicationTimePolicyType Type { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationRequest
    {

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationCampaign Campaign { get; set; } = new BadgeApplicationCampaign();

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();

        [JsonPropertyName("prices")]
        public BadgeApplicationSubmittedPrices? Prices { get; set; } = default!;

        [JsonPropertyName("purchaseConstraints")]
        public BadgeApplicationPurchaseConstraints? PurchaseConstraints { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgePatchRequest
    {

        [JsonPropertyName("process")]
        public Process? Process { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationCampaign
    {
        /// <summary>
        /// Badge campaign ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferBadgeCampaign
    {
        /// <summary>
        /// Badge campaign ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Badge campaign name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationOffer
    {
        /// <summary>
        /// Offer ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    /// <summary>
    /// Required by DISCOUNT and SOURCING campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationPrices
    {

        [JsonPropertyName("market")]
        public BadgeApplicationMarketPrice? Market { get; set; } = default!;

        [JsonPropertyName("bargain")]
        public BadgeApplicationBargainPrice? Bargain { get; set; } = default!;

        [JsonPropertyName("subsidy")]
        public BadgeApplicationSubsidyPrices? Subsidy { get; set; } = default!;

    }

    /// <summary>
    /// Required by DISCOUNT and SOURCING campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationSubmittedPrices
    {

        [JsonPropertyName("bargain")]
        public BadgeApplicationBargainPrice? Bargain { get; set; } = default!;

        [JsonPropertyName("subsidy")]
        public BadgeApplicationSubsidyPrices? Subsidy { get; set; } = default!;

    }

    /// <summary>
    /// Required by DISCOUNT and SOURCING campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgePatchPrices
    {

        [JsonPropertyName("prices")]
        public Prices? Prices { get; set; } = default!;

    }

    /// <summary>
    /// Suggested market price. Calculated automatically based on the offer's price history.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationMarketPrice
    {
        /// <summary>
        /// Value must be greater than minimal, decimal places aligned with market rules.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only base currency for a given marketplace is supported, example: PLN for allegro-pl, CZK for allegro-cz, EUR for allegro-sk.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// Bargain price. Required by DISCOUNT and SOURCING campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationBargainPrice
    {
        /// <summary>
        /// Value must be greater than minimal, decimal places aligned with market rules.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only base currency for a given marketplace is supported, example: PLN for allegro-pl, CZK for allegro-cz, EUR for allegro-sk.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// Prices that relate to the price reconciliation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationSubsidyPrices
    {

        [JsonPropertyName("targetPrice")]
        public BadgeApplicationSubsidyTargetPrice? TargetPrice { get; set; } = default!;

        [JsonPropertyName("sellerPrice")]
        public BadgeApplicationSubsidySellerPrice? SellerPrice { get; set; } = default!;

    }

    /// <summary>
    /// The price visible as the Buy Now price.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationSubsidyTargetPrice
    {
        /// <summary>
        /// Value must be greater than minimal, decimal places aligned with market rules.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only base currency for a given marketplace is supported, example: PLN for allegro-pl, CZK for allegro-cz, EUR for allegro-sk.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// The price requested by partner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationSubsidySellerPrice
    {
        /// <summary>
        /// Value must be greater than minimal, decimal places aligned with market rules.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only base currency for a given marketplace is supported, example: PLN for allegro-pl, CZK for allegro-cz, EUR for allegro-sk.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    /// <summary>
    /// Constraints of purchase of this offer while it participates in the campaign. Optional for all campaigns types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationPurchaseConstraints
    {

        [JsonPropertyName("limit")]
        public BadgeApplicationPurchaseConstraintsLimit? Limit { get; set; } = default!;

    }

    /// <summary>
    /// Limits of purchase of this offer while it participates in the campaign. Only DISCOUNT and SOURCING campaigns.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationPurchaseConstraintsLimit
    {

        [JsonPropertyName("perUser")]
        public BadgeApplicationPurchaseConstraintsLimitPerUser? PerUser { get; set; } = default!;

    }

    /// <summary>
    /// Limits of purchase of this offer per user while it participates in the campaign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationPurchaseConstraintsLimitPerUser
    {
        /// <summary>
        /// Maximum number of items that one user can buy of this offer, while it participates in the campaign.
        /// </summary>

        [JsonPropertyName("maxItems")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxItems { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplications
    {

        [JsonPropertyName("badgeApplications")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeApplication> BadgeApplications1 { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplication>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplication
    {
        /// <summary>
        /// Badge application ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpdatedAt { get; set; } = default!;

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationCampaign Campaign { get; set; } = new BadgeApplicationCampaign();

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();

        [JsonPropertyName("prices")]
        public BadgeApplicationPrices? Prices { get; set; } = default!;

        [JsonPropertyName("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationProcess Process { get; set; } = new BadgeApplicationProcess();

        [JsonPropertyName("purchaseConstraints")]
        public BadgeApplicationPurchaseConstraints? PurchaseConstraints { get; set; } = default!;

    }

    /// <summary>
    /// Information about processing of the application.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationProcess
    {

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgeApplicationProcessStatus Status { get; set; } = default!;

        /// <summary>
        /// A list of rejection reasons for the badge application. Returned for process.status = DECLINED only.
        /// </summary>

        [JsonPropertyName("rejectionReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeApplicationRejectionReason> RejectionReasons { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReason>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationRejectionReason
    {
        /// <summary>
        /// Code corresponding to the message. For more information visit &lt;a href="/badge/#6" target="_blank"&gt;the list of available codes&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// List of messages with rejection reasons.
        /// </summary>

        [JsonPropertyName("messages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeApplicationRejectionReasonMessage> Messages { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReasonMessage>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeApplicationRejectionReasonMessage
    {
        /// <summary>
        /// Detailed message.
        /// </summary>

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; } = default!;

        /// <summary>
        /// Optional link that redirects to page associated with rejection reason.
        /// </summary>

        [JsonPropertyName("link")]
        public string? Link { get; set; } = default!;

    }

    /// <summary>
    /// List of badges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgesList
    {

        [JsonPropertyName("badges")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Badge> Badges { get; set; } = new System.Collections.ObjectModel.Collection<Badge>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Badge
    {

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferBadgeCampaign Campaign { get; set; } = new OfferBadgeCampaign();

        [JsonPropertyName("publication")]
        public BadgePublicationTimePolicy? Publication { get; set; } = default!;

        [JsonPropertyName("prices")]
        public BadgeApplicationPrices? Prices { get; set; } = default!;

        [JsonPropertyName("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeProcess Process { get; set; } = new BadgeProcess();

    }

    /// <summary>
    /// Information about badge processing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeProcess
    {

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgeProcessStatus Status { get; set; } = default!;

        /// <summary>
        /// A list of messages with rejection reasons. Returned for process.status = DECLINED only.
        /// </summary>

        [JsonPropertyName("rejectionReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeApplicationRejectionReason> RejectionReasons { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReason>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeOperation
    {
        /// <summary>
        /// Badge operation ID.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Badge operation type.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgeOperationType Type { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; } = default!;

        /// <summary>
        /// Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpdatedAt { get; set; } = default!;

        [JsonPropertyName("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationCampaign Campaign { get; set; } = new BadgeApplicationCampaign();

        [JsonPropertyName("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();

        [JsonPropertyName("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeOperationProcess Process { get; set; } = new BadgeOperationProcess();

    }

    /// <summary>
    /// Information about processing of the request/operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadgeOperationProcess
    {

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public BadgeOperationProcessStatus Status { get; set; } = default!;

        /// <summary>
        /// A list of rejection reasons for the badge operation. Returned for process.status = DECLINED only.
        /// </summary>

        [JsonPropertyName("rejectionReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BadgeApplicationRejectionReason> RejectionReasons { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReason>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferRating
    {
        /// <summary>
        /// Average score of offer rating.
        /// </summary>

        [JsonPropertyName("averageScore")]
        public string? AverageScore { get; set; } = default!;

        /// <summary>
        /// List score distribution with count.
        /// </summary>

        [JsonPropertyName("scoreDistribution")]
        public ICollection<ScoreDistribution>? ScoreDistribution { get; set; } = default!;

        /// <summary>
        /// Number of total responses.
        /// </summary>

        [JsonPropertyName("totalResponses")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalResponses { get; set; } = default!;

        /// <summary>
        /// List of size feedback.
        /// </summary>

        [JsonPropertyName("sizeFeedback")]
        public ICollection<SizeFeedback>? SizeFeedback { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundraisingCampaigns
    {
        /// <summary>
        /// search results
        /// </summary>

        [JsonPropertyName("campaigns")]
        public ICollection<FundraisingCampaign>? Campaigns { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundraisingCampaign
    {
        /// <summary>
        /// unique campaign identifier
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// campaign name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("organization")]
        public CharityOrganization? Organization { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CharityOrganization
    {
        /// <summary>
        /// organization name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomParameter
    {
        /// <summary>
        /// custom parameter name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// custom parameter values
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDateParcelsProposals
    {
        /// <summary>
        /// Pickup date parcels proposals.
        /// </summary>

        [JsonPropertyName("pickupDateProposals")]
        public ICollection<PickupDateProposals>? PickupDateProposals { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDateProposals
    {
        /// <summary>
        /// Id of parcel.
        /// </summary>

        [JsonPropertyName("parcelId")]
        public string? ParcelId { get; set; } = default!;

        /// <summary>
        /// Pickup date proposal.
        /// </summary>

        [JsonPropertyName("proposals")]
        public ICollection<PickupDateProposal>? Proposals { get; set; } = default!;

    }

    /// <summary>
    /// Parcel pickup date. In pickup request you have to use exactly the same values as you get from `/parcel-management/pickup-date-proposals`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDateProposal
    {
        /// <summary>
        /// Shipping date (format YYYY-MM-DD). Example: `2020-05-01`
        /// </summary>

        [JsonPropertyName("date")]
        public string? Date { get; set; } = default!;

        /// <summary>
        /// Timebox start hour. Example: `10:00`
        /// </summary>

        [JsonPropertyName("minTime")]
        public string? MinTime { get; set; } = default!;

        /// <summary>
        /// Timebox finish hour. Example: `14:00`
        /// </summary>

        [JsonPropertyName("maxTime")]
        public string? MaxTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryServices
    {
        /// <summary>
        /// Delivery services.
        /// </summary>

        [JsonPropertyName("deliveryServices")]
        public ICollection<DeliveryService>? DeliveryServices1 { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryService
    {
        /// <summary>
        /// Delivery service id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Discriminator of delivery service to distinguish multiple agreement types of a single carrier.
        /// </summary>

        [JsonPropertyName("service")]
        public string? Service { get; set; } = default!;

        /// <summary>
        /// Delivery service name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Carrier id consistent with &lt;a href="#operation/getOrdersCarriersUsingGET" target="_blank"&gt;shipping carriers resource&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("carrierId")]
        public string? CarrierId { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ParcelAdditionalServicesAvailability? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("owner")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DeliveryServiceOwner? Owner { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelAdditionalServicesAvailability
    {

        [JsonPropertyName("cashOnDelivery")]
        public ParcelAdditionalServicesCashOnDeliveryAvailability? CashOnDelivery { get; set; } = default!;

        /// <summary>
        /// Delivery services.
        /// </summary>

        [JsonPropertyName("options")]
        public ICollection<ParcelAdditionalServicesOptionAvailability>? Options { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelAdditionalServicesCashOnDeliveryAvailability
    {
        /// <summary>
        /// Indicates if Cash On Delivery is available as part of Additional Services for parcel creation for carrier.
        /// </summary>

        [JsonPropertyName("available")]
        public bool? Available { get; set; } = default!;

        /// <summary>
        /// Postpaid Express service available. Postpaid value is send to parcel sender in one business day after delivery.
        /// </summary>

        [JsonPropertyName("expressAvailable")]
        public bool? ExpressAvailable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelAdditionalServicesOptionAvailability
    {
        /// <summary>
        /// Name of option that can be passed to additionalServices for parcel creation.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Brief description of option.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelCreationParameters
    {
        /// <summary>
        /// Delivery service id.
        /// </summary>

        [JsonPropertyName("serviceId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceId { get; set; } = default!;

        [JsonPropertyName("receiver")]
        [System.ComponentModel.DataAnnotations.Required]
        public Receiver Receiver { get; set; } = new Receiver();

        [JsonPropertyName("pickup")]
        [System.ComponentModel.DataAnnotations.Required]
        public Pickup Pickup { get; set; } = new Pickup();

        /// <summary>
        /// Parcel items details.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ParcelItemDetails> Items { get; set; } = new System.Collections.ObjectModel.Collection<ParcelItemDetails>();

        /// <summary>
        /// Value will be applied to type for all items. If item will have type value assigned - validation will check if all types have the same value.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelCreationParametersType? Type { get; set; } = default!;

        [JsonPropertyName("label")]
        public Label? Label { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ParcelAdditionalServices? AdditionalServices { get; set; } = default!;

    }

    /// <summary>
    /// Parcel's sender data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sender
    {

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public ParcelCreationAddressWithMandatoryPlace Address { get; set; } = new ParcelCreationAddressWithMandatoryPlace();

        /// <summary>
        /// Email.
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Person name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Company name.
        /// </summary>

        [JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// Phone.
        /// </summary>

        [JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

    }

    /// <summary>
    /// Parcel's receiver data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Receiver
    {

        [JsonPropertyName("address")]
        public ParcelCreationAddress? Address { get; set; } = default!;

        /// <summary>
        /// Must be a valid buyer email generated by Allegro.
        /// </summary>

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// Person name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Company name.
        /// </summary>

        [JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// Phone.
        /// </summary>

        [JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Pickup point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("pointId")]
        public string? PointId { get; set; } = default!;

    }

    /// <summary>
    /// Parcel's pickup data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pickup
    {

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public ParcelCreationAddressWithMandatoryPlace Address { get; set; } = new ParcelCreationAddressWithMandatoryPlace();

        /// <summary>
        /// Email.
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Person name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Company name.
        /// </summary>

        [JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// Phone.
        /// </summary>

        [JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Pickup point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("pointId")]
        public string? PointId { get; set; } = default!;

    }

    /// <summary>
    /// Address data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelCreationAddress
    {

        [JsonPropertyName("street")]
        public string? Street { get; set; } = default!;

        [JsonPropertyName("postCode")]
        public string? PostCode { get; set; } = default!;

        [JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alfa-2 format (two-letter code).
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = "PL";

        /// <summary>
        /// Required for shipments to Irleand ( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
        /// </summary>

        [JsonPropertyName("county")]
        public string? County { get; set; } = default!;

    }

    /// <summary>
    /// Address data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelCreationAddressWithMandatoryPlace
    {
        /// <summary>
        /// Street.
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// Post code.
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; } = default!;

        /// <summary>
        /// City.
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alfa-2 format (two-letter code).
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = "PL";

        /// <summary>
        /// Required for shipments to Irleand ( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
        /// </summary>

        [JsonPropertyName("county")]
        public string? County { get; set; } = default!;

    }

    /// <summary>
    /// Parcel item details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelItemDetailsWithWaybill
    {
        /// <summary>
        /// Parcel waybill.
        /// </summary>

        [JsonPropertyName("waybill")]
        public string? Waybill { get; set; } = default!;

        /// <summary>
        /// Parcel dimensions.
        /// </summary>

        [JsonPropertyName("dimensions")]
        public Dimensions? Dimensions { get; set; } = default!;

        [JsonPropertyName("weight")]
        public Weight? Weight { get; set; } = default!;

        /// <summary>
        /// Parcel description.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Declared Parcel value.
        /// </summary>

        [JsonPropertyName("value")]
        public Value4? Value { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelItemDetailsWithWaybillType? Type { get; set; } = default!;

    }

    /// <summary>
    /// Parcel item details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelItemDetails
    {
        /// <summary>
        /// Parcel dimensions.
        /// </summary>

        [JsonPropertyName("dimensions")]
        public Dimensions2? Dimensions { get; set; } = default!;

        [JsonPropertyName("weight")]
        public Weight2? Weight { get; set; } = default!;

        /// <summary>
        /// Parcel description.
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Declared Parcel value.
        /// </summary>

        [JsonPropertyName("value")]
        public Value5? Value { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelItemDetailsType? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelDetails
    {
        /// <summary>
        /// Id of parcel.
        /// </summary>

        [JsonPropertyName("parcelId")]
        public string? ParcelId { get; set; } = default!;

        /// <summary>
        /// Delivery service id.
        /// </summary>

        [JsonPropertyName("serviceId")]
        public string? ServiceId { get; set; } = default!;

        [JsonPropertyName("receiver")]
        public Receiver? Receiver { get; set; } = default!;

        [JsonPropertyName("pickup")]
        public Pickup? Pickup { get; set; } = default!;

        /// <summary>
        /// Parcel items details.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<ParcelItemDetailsWithWaybill>? Items { get; set; } = default!;

        /// <summary>
        /// Value will be returned if all items will have the same type.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelDetailsType? Type { get; set; } = default!;

        [JsonPropertyName("label")]
        public Label2? Label { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ParcelAdditionalServices? AdditionalServices { get; set; } = default!;

        [JsonPropertyName("state")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelDetailsState? State { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupParcelParameters
    {
        /// <summary>
        /// Ids of parcels.
        /// </summary>

        [JsonPropertyName("parcelIds")]
        public ICollection<string>? ParcelIds { get; set; } = default!;

        [JsonPropertyName("pickupDate")]
        public PickupDateProposal? PickupDate { get; set; } = default!;

    }

    /// <summary>
    /// Additional services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelAdditionalServices
    {
        /// <summary>
        /// Cash on delivery service.
        /// </summary>

        [JsonPropertyName("cashOnDelivery")]
        public CashOnDelivery? CashOnDelivery { get; set; } = default!;

        /// <summary>
        /// Additional services provided within delivery. Their description are obtainted with delivery services from `/parcel-management/delivery-services`.
        /// </summary>

        [JsonPropertyName("options")]
        public ICollection<string>? Options { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelParcelParameters
    {
        /// <summary>
        /// Id of parcel.
        /// </summary>

        [JsonPropertyName("parcelId")]
        public string? ParcelId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error200
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error. This field can not be null.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field. This field can be empty
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the `Accept-Language` header. By default message in Polish is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error400
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error. This field can not be null.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field. This field can be empty
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the `Accept-Language` header. By default message in Polish is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error403
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field.
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the 'Accept-Language' header. By default message in Polish is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error404
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error. This field can not be null.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field. This field can be empty
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the `Accept-Language` header. By default message in Polish is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error504
    {
        /// <summary>
        /// The error code. You can use this code when contacting us about any problems with our systems.
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// For some cases, this field provides more details regarding the error.
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// A message directed to the developer of the program. This message give you some more technical details on what exactly has happened.
        /// </summary>

        [JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This field will point to a specific field in object if the error is connected to a problem with such specific field.
        /// </summary>

        [JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the 'Accept-Language' header. By default message in Polish is returned.
        /// </summary>

        [JsonPropertyName("userMessage")]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DimensionItem
    {
        /// <summary>
        /// Dimension value.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Dimension unit. Currently only `CENTIMETER` is accepted.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = "CENTIMETER";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailablePromotionPackages
    {

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        /// <summary>
        /// Available base promotion packages. Only one base package can be set on an offer.
        /// </summary>

        [JsonPropertyName("basePackages")]
        public ICollection<AvailablePromotionPackage>? BasePackages { get; set; } = default!;

        /// <summary>
        /// Available extra promotion packages. Multiple different extra packages can be set on an offer.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<AvailablePromotionPackage>? ExtraPackages { get; set; } = default!;

        /// <summary>
        /// Available promotion packages on additional marketplaces.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public ICollection<MarketplaceAvailablePromotionPackages>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceAvailablePromotionPackages
    {

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        /// <summary>
        /// Available base promotion packages. Only one base package can be set on an offer.
        /// </summary>

        [JsonPropertyName("basePackages")]
        public ICollection<AvailablePromotionPackage>? BasePackages { get; set; } = default!;

        /// <summary>
        /// Available extra promotion packages. Multiple different extra packages can be set on an offer.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<AvailablePromotionPackage>? ExtraPackages { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailablePromotionPackage
    {
        /// <summary>
        /// Promotion package identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Promotion package name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Promo package cycle duration.
        /// </summary>

        [JsonPropertyName("cycleDuration")]
        public string? CycleDuration { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoOptionsModifications
    {
        /// <summary>
        /// Promo package modifications to be applied.
        /// </summary>

        [JsonPropertyName("modifications")]
        public ICollection<PromoOptionsModification>? Modifications { get; set; } = default!;

        /// <summary>
        /// Promo package modifications to be applied on additional marketplaces.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public ICollection<AdditionalMarketplacePromoOptionsModification>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoOptionsModification
    {
        /// <summary>
        /// Type of modification to be applied.
        /// </summary>

        [JsonPropertyName("modificationType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PromoOptionsModificationModificationType? ModificationType { get; set; } = default!;

        /// <summary>
        /// Type of promotion package to be changed/removed.
        /// </summary>

        [JsonPropertyName("packageType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PromoOptionsModificationPackageType? PackageType { get; set; } = default!;

        /// <summary>
        /// Promotion package identifier.
        /// </summary>

        [JsonPropertyName("packageId")]
        public string? PackageId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacePromoOptionsModification
    {

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        /// <summary>
        /// Promo package modifications to be applied on additional marketplace.
        /// </summary>

        [JsonPropertyName("modifications")]
        public ICollection<PromoOptionsModification>? Modifications { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPromoOptionsForSeller
    {
        /// <summary>
        /// Promo options for seller offers.
        /// </summary>

        [JsonPropertyName("promoOptions")]
        public ICollection<OfferPromoOptions>? PromoOptions { get; set; } = default!;

        /// <summary>
        /// Number of returned elements.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available elements.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long? TotalCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPromoOptions
    {
        /// <summary>
        /// Offer identifier
        /// </summary>

        [JsonPropertyName("offerId")]
        public string? OfferId { get; set; } = default!;

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        [JsonPropertyName("basePackage")]
        public OfferPromoOption? BasePackage { get; set; } = default!;

        /// <summary>
        /// Extra promotion packages set on offer.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<OfferPromoOption>? ExtraPackages { get; set; } = default!;

        [JsonPropertyName("pendingChanges")]
        public OfferPromoOptionsPendingChanges? PendingChanges { get; set; } = default!;

        /// <summary>
        /// Promo packages on additional marketplaces
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public ICollection<MarketplaceOfferPromoOption>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceOfferPromoOption
    {

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        [JsonPropertyName("basePackage")]
        public OfferPromoOption? BasePackage { get; set; } = default!;

        /// <summary>
        /// Extra promotion packages set on offer.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<OfferPromoOption>? ExtraPackages { get; set; } = default!;

        [JsonPropertyName("pendingChanges")]
        public OfferPromoOptionsPendingChanges? PendingChanges { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPromoOption
    {
        /// <summary>
        /// Promotion package identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Date from which the promotion package is valid: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("validFrom")]
        public System.DateTimeOffset? ValidFrom { get; set; } = default!;

        /// <summary>
        /// Date to which the promotion package is valid: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("validTo")]
        public System.DateTimeOffset? ValidTo { get; set; } = default!;

        /// <summary>
        /// Date on which the promotion package will be renewed for a new cycle: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("nextCycleDate")]
        public System.DateTimeOffset? NextCycleDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferPromoOptionsPendingChanges
    {

        [JsonPropertyName("basePackage")]
        public OfferPromoOption? BasePackage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoOptionsCommand
    {
        /// <summary>
        /// Offer choice criteria.
        /// </summary>

        [JsonPropertyName("offerCriteria")]
        public ICollection<OfferCriterium>? OfferCriteria { get; set; } = default!;

        [JsonPropertyName("modification")]
        public PromoOptionsCommandModification? Modification { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public ICollection<AdditionalMarketplacePromoOptionsCommandModification>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoOptionsCommandModification
    {
        /// <summary>
        /// The base package. Available packages can be determined using &lt;a href="#operation/getAvailableOfferPromotionPackages"&gt;GET /sale/offer-promotion-packages&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("basePackage")]
        public PromoOptionsCommandModificationPackage? BasePackage { get; set; } = default!;

        /// <summary>
        /// Extra packages to be set on offer. Omitting this parameter will preserve the packages already present.
        /// </summary>

        [JsonPropertyName("extraPackages")]
        public ICollection<PromoOptionsCommandModificationPackage>? ExtraPackages { get; set; } = default!;

        /// <summary>
        /// Time at which the modification will be applied.
        /// </summary>

        [JsonPropertyName("modificationTime")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PromoOptionsCommandModificationModificationTime? ModificationTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMarketplacePromoOptionsCommandModification
    {

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        [JsonPropertyName("modification")]
        public PromoOptionsCommandModification? Modification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoOptionsCommandModificationPackage
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    /// <summary>
    /// Command execution summary
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoGeneralReport
    {
        /// <summary>
        /// Command ID
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("taskCount")]
        public TaskCount? TaskCount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoModificationReport
    {
        /// <summary>
        /// Offer promotion modification tasks.
        /// </summary>

        [JsonPropertyName("tasks")]
        public ICollection<PromoModificationTask>? Tasks { get; set; } = default!;

        [JsonPropertyName("modification")]
        public PromoOptionsCommandModification? Modification { get; set; } = default!;

        [JsonPropertyName("additionalMarketplaces")]
        public ICollection<AdditionalMarketplacePromoOptionsCommandModification>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromoModificationTask
    {

        [JsonPropertyName("offer")]
        public OfferId? Offer { get; set; } = default!;

        [JsonPropertyName("marketplaceId")]
        public string? MarketplaceId { get; set; } = default!;

        /// <summary>
        /// Date on which the promotion modification task was scheduled: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("scheduledAt")]
        public System.DateTimeOffset? ScheduledAt { get; set; } = default!;

        /// <summary>
        /// Date on which the promotion modification task finished processing: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PromoModificationTaskStatus? Status { get; set; } = default!;

        [JsonPropertyName("errors")]
        public Errors? Errors { get; set; } = default!;

    }

    /// <summary>
    /// Allegro pickup drop off point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPickupDropOffPoint
    {
        /// <summary>
        /// Point id. You can use it in Send with Allegro.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Point name.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Point type.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPickupDropOffPointType Type { get; set; } = default!;

        /// <summary>
        /// Point services.
        /// </summary>

        [JsonPropertyName("services")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Services> Services { get; set; } = new System.Collections.ObjectModel.Collection<Services>();

        /// <summary>
        /// Point restrictions.
        /// </summary>

        [JsonPropertyName("restrictions")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<restrictions> Restrictions { get; set; } = new System.Collections.ObjectModel.Collection<restrictions>();

        /// <summary>
        /// Point description
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Point payment type.
        /// </summary>

        [JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<payments> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments>();

        [JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address2 Address { get; set; } = new Address2();

        /// <summary>
        /// Point working hours information.
        /// </summary>

        [JsonPropertyName("opening")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Opening> Opening { get; set; } = new System.Collections.ObjectModel.Collection<Opening>();

        /// <summary>
        /// List of carriers that can drop off/pick up packages from point.
        /// </summary>

        [JsonPropertyName("carriers")]

        // TODO(system.text.json): Add string enum item converter
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<AllegroCarrier> Carriers { get; set; } = new System.Collections.ObjectModel.Collection<AllegroCarrier>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroParcelTrackingHistory
    {
        /// <summary>
        /// Waybill number (parcel tracking number).
        /// </summary>

        [JsonPropertyName("waybill")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Waybill { get; set; } = default!;

        /// <summary>
        /// Parcel tracking history if available.
        /// </summary>

        [JsonPropertyName("trackingDetails")]
        public TrackingDetails? TrackingDetails { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelTrackingHistory
    {
        /// <summary>
        /// Waybill number (parcel tracking number).
        /// </summary>

        [JsonPropertyName("waybill")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Waybill { get; set; } = default!;

        /// <summary>
        /// Parcel tracking history if available.
        /// </summary>

        [JsonPropertyName("trackingDetails")]
        public TrackingDetails2? TrackingDetails { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroParcelTrackingStatus
    {
        /// <summary>
        /// Actual shipment status change time in ISO 8601 format
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

        /// <summary>
        /// Status of the shipment. - `AVAILABLE_FOR_PICKUP` - The parcel is awaiting for pickup. - `DELIVERED` - The parcel was delivered to the receiver / collected by the receiver. - `IN_TRANSIT` - The parcel is on its way to the receiver. The status includes events such as acceptance of the shipment by the carrier, arriving at the hub or redirecting to another address. - `ISSUE` - Problem with shipment. It includes events such as the parcel was refused by the receiver or was lost. - `NOTICE_LEFT` - A notice was left because of an unsuccessful delivery attempt (for example, due to nobody was at the delivery address). - `PENDING` - The shipment has been prepared and it is awaiting to be sent. - `RELEASED_FOR_DELIVERY` - The parcel has been released for delivery to its final destination. - `RETURNED` - The parcel is being or has been returned to the sender.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroParcelTrackingStatusCode Code { get; set; } = default!;

        /// <summary>
        /// Optional description for a given status, mainly intended to describe the problem with the shipment
        /// </summary>

        [JsonPropertyName("details")]
        public string? Details { get; set; } = default!;

        /// <summary>
        /// Indicates the final status, after which there should be no more status changes
        /// </summary>

        [JsonPropertyName("terminal")]
        public bool? Terminal { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParcelTrackingStatus
    {
        /// <summary>
        /// Actual shipment status change time in ISO 8601 format
        /// </summary>

        [JsonPropertyName("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; } = default!;

        /// <summary>
        /// Status of the shipment. - `AVAILABLE_FOR_PICKUP` - The parcel is awaiting for pickup. - `DELIVERED` - The parcel was delivered to the receiver / collected by the receiver. - `IN_TRANSIT` - The parcel is on its way to the receiver. The status includes events such as acceptance of the shipment by the carrier, arriving at the hub or redirecting to another address. - `ISSUE` - Problem with shipment. It includes events such as the parcel was refused by the receiver or was lost. - `NOTICE_LEFT` - A notice was left because of an unsuccessful delivery attempt (for example, due to nobody was at the delivery address). - `PENDING` - The shipment has been prepared and it is awaiting to be sent. - `RELEASED_FOR_DELIVERY` - The parcel has been released for delivery to its final destination. - `RETURNED` - The parcel is being or has been returned to the sender.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ParcelTrackingStatusCode Code { get; set; } = default!;

        /// <summary>
        /// Optional description for a given status, mainly intended to describe the problem with the shipment
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxSettings
    {
        /// <summary>
        /// A list of tax settings.
        /// </summary>

        [JsonPropertyName("settings")]
        public ICollection<TaxSetting>? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxSetting
    {
        /// <summary>
        /// A unique identifier of an immutable VAT setting.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// An object representing VAT tax rate assigned to this setting.
        /// </summary>

        [JsonPropertyName("rate")]
        public Rate? Rate { get; set; } = default!;

        /// <summary>
        /// A numeric value of VAT tax rate. In case of "OUT_OF_SCOPE_OF_VAT" it's set to 0.
        /// </summary>

        [JsonPropertyName("percentage")]
        public string? Percentage { get; set; } = default!;

        /// <summary>
        /// An object representing a subject of taxation assigned to this setting.
        /// </summary>

        [JsonPropertyName("subject")]
        public Subject2? Subject { get; set; } = default!;

        /// <summary>
        /// An object representing a exemption of taxation assigned to this setting.
        /// </summary>

        [JsonPropertyName("exemption")]
        public Exemption? Exemption { get; set; } = default!;

        /// <summary>
        /// A country code for which given VAT setting is defined.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryTaxSettings
    {
        /// <summary>
        /// A list of tax subjects.
        /// </summary>

        [JsonPropertyName("subjects")]
        public ICollection<TaxSubject>? Subjects { get; set; } = default!;

        /// <summary>
        /// A list of tax rates.
        /// </summary>

        [JsonPropertyName("rates")]
        public ICollection<TaxRate>? Rates { get; set; } = default!;

        /// <summary>
        /// A list of tax exemptions.
        /// </summary>

        [JsonPropertyName("exemptions")]
        public ICollection<TaxExemption>? Exemptions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxSubject
    {
        /// <summary>
        /// Displayable tax subject label.
        /// </summary>

        [JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        /// <summary>
        /// Value of subject.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxRate
    {
        /// <summary>
        /// A country code for which given VAT setting is defined.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// Values of tax rates for given country code.
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<TaxRateValue>? Values { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxRateValue
    {
        /// <summary>
        /// Displayable tax rate label.
        /// </summary>

        [JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        /// <summary>
        /// A numeric value of VAT tax rate. In case of "OUT_OF_SCOPE_OF_VAT" it is set to 0.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Exemption field must be filled out if true, otherwise is optional.
        /// </summary>

        [JsonPropertyName("exemptionRequired")]
        public bool? ExemptionRequired { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxExemption
    {
        /// <summary>
        /// Displayable exemption label.
        /// </summary>

        [JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        /// <summary>
        /// Value of exemption.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesAccountChangeRequest
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesAccountChangeRequestStatus? Status { get; set; } = default!;

        /// <summary>
        /// Consent statuses on marketplaces other than the base marketplace of the account.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public IDictionary<string, Anonymous14>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesAccountConsentChangeResponse
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesAccountConsentChangeResponseStatus? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesOfferChangeRequest
    {
        /// <summary>
        /// Use it to update the consent on the base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesOfferChangeRequestStatus? Status { get; set; } = default!;

        /// <summary>
        /// Use it to update the consent on marketplaces other than the base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public IDictionary<string, Anonymous15>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesOfferConsentChangeResponse
    {
        /// <summary>
        /// Consent status on the base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesOfferConsentChangeResponseStatus? Status { get; set; } = default!;

        /// <summary>
        /// Consent statuses on marketplaces other than the base marketplace of the offer.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public IDictionary<string, Anonymous16>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesEligibilityResponse
    {

        [JsonPropertyName("consent")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesEligibilityResponseConsent? Consent { get; set; } = default!;

        [JsonPropertyName("qualification")]
        public AllegroPricesQualificationResponse? Qualification { get; set; } = default!;

        /// <summary>
        /// Eligibility state on marketplces other than the base marketplace of the account.
        /// </summary>

        [JsonPropertyName("additionalMarketplaces")]
        public IDictionary<string, Anonymous17>? AdditionalMarketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroPricesQualificationResponse
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AllegroPricesQualificationResponseStatus? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interlocutor
    {

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

        [JsonPropertyName("avatarUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvatarUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageAuthor
    {

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

        [JsonPropertyName("isInterlocutor")]
        public bool IsInterlocutor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Thread
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("read")]
        public bool Read { get; set; } = default!;

        [JsonPropertyName("lastMessageDateTime")]
        public System.DateTimeOffset? LastMessageDateTime { get; set; } = default!;

        [JsonPropertyName("interlocutor")]
        public Interlocutor? Interlocutor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreadId
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreadsList
    {

        [JsonPropertyName("threads")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Thread> Threads { get; set; } = new System.Collections.ObjectModel.Collection<Thread>();

        [JsonPropertyName("offset")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = default!;

        [JsonPropertyName("limit")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Limit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreadReadFlag
    {

        [JsonPropertyName("read")]
        public bool Read { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageOffer
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageOrder
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageRelatedObject
    {

        [JsonPropertyName("offer")]
        public MessageOffer? Offer { get; set; } = default!;

        [JsonPropertyName("order")]
        public MessageOrder? Order { get; set; } = default!;

    }

    /// <summary>
    /// Contains optional contextual information linked to message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageAdditionalInformation
    {
        /// <summary>
        /// Vehicle Information Number (VIN) provided by sender in addition to message contents.
        /// </summary>

        [JsonPropertyName("vin")]
        public string? Vin { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageAttachmentInfo
    {

        [JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; set; } = default!;

        [JsonPropertyName("mimeType")]
        public string? MimeType { get; set; } = default!;

        [JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageAttachmentInfoStatus Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageStatus Status { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageType Type { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        [JsonPropertyName("thread")]
        [System.ComponentModel.DataAnnotations.Required]
        public ThreadId Thread { get; set; } = new ThreadId();

        [JsonPropertyName("author")]
        [System.ComponentModel.DataAnnotations.Required]
        public MessageAuthor Author { get; set; } = new MessageAuthor();

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; } = default!;

        [JsonPropertyName("subject")]
        public string? Subject { get; set; } = default!;

        [JsonPropertyName("relatesTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public MessageRelatedObject RelatesTo { get; set; } = new MessageRelatedObject();

        [JsonPropertyName("hasAdditionalAttachments")]
        public bool HasAdditionalAttachments { get; set; } = default!;

        [JsonPropertyName("attachments")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<MessageAttachmentInfo> Attachments { get; set; } = new System.Collections.ObjectModel.Collection<MessageAttachmentInfo>();

        [JsonPropertyName("additionalInformation")]
        public MessageAdditionalInformation? AdditionalInformation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagesList
    {

        [JsonPropertyName("messages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Message> Messages { get; set; } = new System.Collections.ObjectModel.Collection<Message>();

        [JsonPropertyName("offset")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = default!;

        [JsonPropertyName("limit")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Limit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageAttachmentId
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewMessageInThread
    {

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Text { get; set; } = default!;

        [JsonPropertyName("attachments")]
        public ICollection<MessageAttachmentId>? Attachments { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recipient
    {

        [JsonPropertyName("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewMessage
    {

        [JsonPropertyName("recipient")]
        [System.ComponentModel.DataAnnotations.Required]
        public Recipient Recipient { get; set; } = new Recipient();

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Text { get; set; } = default!;

        [JsonPropertyName("attachments")]
        public ICollection<MessageAttachmentId>? Attachments { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewAttachmentDeclaration
    {

        [JsonPropertyName("filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; } = default!;

        [JsonPropertyName("size")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5242880D)]
        public long Size { get; set; } = default!;

    }

    /// <summary>
    /// Defines offer properties for buyers with company account (Allegro Biznes).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class B2b
    {
        /// <summary>
        /// If true, then only users with company account are eligible to buy given offer. Offers buyable only by business are allowed only in selected categories. False by default.
        /// </summary>

        [JsonPropertyName("buyableOnlyByBusiness")]
        public bool? BuyableOnlyByBusiness { get; set; } = default!;

    }

    /// <summary>
    /// Defines message to the seller settings options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageToSellerSettings
    {
        /// <summary>
        /// Specify message to seller type.
        /// <br/> * `OPTIONAL`: buyer is able to enter a message for the seller
        /// <br/> * `HIDDEN`: there is no message box for the seller
        /// <br/> * `REQUIRED`: buyer is forced to enter a message for the seller (limited to categories with `sellerCanRequirePurchaseComments` option)
        /// </summary>

        [JsonPropertyName("mode")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public MessageToSellerSettingsMode? Mode { get; set; } = default!;

        /// <summary>
        /// Specify hint for REQUIRED message displayed for buyer
        /// </summary>

        [JsonPropertyName("hint")]
        public string? Hint { get; set; } = default!;

    }

    /// <summary>
    /// Type of content: BASE - initial content for offer in declared offer language. AUTO - automatic translation from BASE content. MANUAL - manual translation provided by the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferTranslationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE")]
        BASE = 2,

    }

    /// <summary>
    /// Offer description translation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferDescriptionTranslation
    {

        [JsonPropertyName("translation")]
        public StandardizedDescription? Translation { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferTranslationType? Type { get; set; } = default!;

    }

    /// <summary>
    /// Offer title translation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTitleTranslation
    {
        /// <summary>
        /// Offer title translation content
        /// </summary>

        [JsonPropertyName("translation")]
        public string? Translation { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferTranslationType? Type { get; set; } = default!;

    }

    /// <summary>
    /// Manual offer description translation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualDescriptionTranslation
    {

        [JsonPropertyName("translation")]
        public StandardizedDescription? Translation { get; set; } = default!;

    }

    /// <summary>
    /// Manual offer title translation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualTitleTranslation
    {
        /// <summary>
        /// Manual offer title translation content
        /// </summary>

        [JsonPropertyName("translation")]
        public string? Translation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualTranslationUpdateRequest
    {

        [JsonPropertyName("description")]
        public ManualDescriptionTranslation? Description { get; set; } = default!;

        [JsonPropertyName("title")]
        public ManualTitleTranslation? Title { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTranslation
    {

        [JsonPropertyName("description")]
        public OfferDescriptionTranslation? Description { get; set; } = default!;

        /// <summary>
        /// Language of the translation.
        /// </summary>

        [JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; } = default!;

        [JsonPropertyName("title")]
        public OfferTitleTranslation? Title { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfferTranslations
    {

        [JsonPropertyName("translations")]
        public ICollection<OfferTranslation>? Translations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartDeliveryMethod
    {
        /// <summary>
        /// Delivery method id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryMethodId
    {
        /// <summary>
        /// Delivery method id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartOfferClassificationReport
    {
        /// <summary>
        /// Offer Smart! eligibility status
        /// </summary>

        [JsonPropertyName("classification")]
        public Classification? Classification { get; set; } = default!;

        /// <summary>
        /// Indicates whether that particular offer is set to be reclassified in the next 24 hours
        /// </summary>

        [JsonPropertyName("scheduledForReclassification")]
        public bool? ScheduledForReclassification { get; set; } = default!;

        /// <summary>
        /// Delivery methods marked with Smart! label
        /// </summary>

        [JsonPropertyName("smartDeliveryMethods")]
        public ICollection<SmartDeliveryMethod>? SmartDeliveryMethods { get; set; } = default!;

        /// <summary>
        /// Set of conditions to be met in order for that particular offer to be Smart!. Each condition filters out improperly configured delivery methods or checks some offer attributes. Order of conditions matters. Please keep in mind that this is a **PREVIEW** of an offer classification if being conducted right now - actual classification is triggered only by attribute changes and as of now it cannot be manually done on demand.
        /// </summary>

        [JsonPropertyName("conditions")]
        public ICollection<Conditions>? Conditions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartSellerClassificationReport
    {
        /// <summary>
        /// Seller Smart! eligibility status
        /// </summary>

        [JsonPropertyName("classification")]
        public Classification2? Classification { get; set; } = default!;

        /// <summary>
        /// Set of conditions to be met in order for user to be Smart!
        /// </summary>

        [JsonPropertyName("conditions")]
        public ICollection<conditions>? Conditions { get; set; } = default!;

        /// <summary>
        /// Set of delivery methods that were excluded from Smart! classification on demand by seller
        /// </summary>

        [JsonPropertyName("excludedDeliveryMethods")]
        public ICollection<SmartDeliveryMethod>? ExcludedDeliveryMethods { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvanceShipNotice
    {
        /// <summary>
        /// A list of product items.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<ProductItem>();

        [JsonPropertyName("handlingUnit")]
        public HandlingUnit? HandlingUnit { get; set; } = default!;

        [JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAdvanceShipNoticeRequest
    {
        /// <summary>
        /// A list of product items.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<ProductItem>();

        [JsonPropertyName("handlingUnit")]
        public HandlingUnit? HandlingUnit { get; set; } = default!;

        [JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSubmittedAdvanceShipNoticeRequest
    {
        /// <summary>
        /// A list of product items.
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<ProductItem>? Items { get; set; } = default!;

        [JsonPropertyName("handlingUnit")]
        public UpdateSubmittedHandlingUnitInput? HandlingUnit { get; set; } = default!;

        [JsonPropertyName("shipping")]
        public UpdateSubmittedShippingInput? Shipping { get; set; } = default!;

    }

    /// <summary>
    /// Represents information about handling unit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSubmittedHandlingUnitInput
    {
        /// <summary>
        /// Number of handling units. Depending on the selected handling unit type, it's the number of boxes, pallets or packages placed in the container to be dispatched.
        /// </summary>

        [JsonPropertyName("amount")]
        public double? Amount { get; set; } = default!;

    }

    /// <summary>
    /// Represents information about package shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSubmittedShippingInput
    {
        /// <summary>
        /// Vehicle licence plate number.
        /// </summary>

        [JsonPropertyName("truckLicencePlate")]
        public string? TruckLicencePlate { get; set; } = default!;

        /// <summary>
        /// Courier tracking number.
        /// </summary>

        [JsonPropertyName("trackingNumber")]
        public string? TrackingNumber { get; set; } = default!;

        [JsonPropertyName("thirdParty")]
        public ThirdParty? ThirdParty { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvanceShipNoticeResponse
    {
        /// <summary>
        /// An UUID identifier of ASN.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// A human friendly identifier of ASN.
        /// </summary>

        [JsonPropertyName("displayNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayNumber { get; set; } = default!;

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdvanceShipNoticeStatus Status { get; set; } = default!;

        /// <summary>
        /// The date and time of Advance Ship Notice creation. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time of last Advance Ship Notice update. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        /// <summary>
        /// A list of product items.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<ProductItem>();

        [JsonPropertyName("handlingUnit")]
        public HandlingUnit? HandlingUnit { get; set; } = default!;

        [JsonPropertyName("labels")]
        public Labels? Labels { get; set; } = default!;

        [JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

        /// <summary>
        /// The date and time of Advance Ship Notice submission. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("submittedAt")]
        public System.DateTimeOffset? SubmittedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAdvanceShipNoticeResponse
    {
        /// <summary>
        /// An UUID identifier of ASN.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// A human friendly identifier of ASN.
        /// </summary>

        [JsonPropertyName("displayNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayNumber { get; set; } = default!;

        [JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdvanceShipNoticeStatus Status { get; set; } = default!;

        /// <summary>
        /// The date and time of Advance Ship Notice creation. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time of last Advance Ship Notice update. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        /// <summary>
        /// A list of product items.
        /// </summary>

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ProductItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<ProductItem>();

        [JsonPropertyName("handlingUnit")]
        public HandlingUnit? HandlingUnit { get; set; } = default!;

        [JsonPropertyName("labels")]
        public Labels? Labels { get; set; } = default!;

        [JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

    }

    /// <summary>
    /// The list of Advance Ship Notices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvanceShipNoticeList
    {

        [JsonPropertyName("advanceShipNotices")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<AdvanceShipNoticeResponse> AdvanceShipNotices { get; set; } = new System.Collections.ObjectModel.Collection<AdvanceShipNoticeResponse>();

        /// <summary>
        /// A number of Advance Ship Notices in response.
        /// </summary>

        [JsonPropertyName("count")]
        public double Count { get; set; } = default!;

        /// <summary>
        /// A number of Advance Ship Notices in total.
        /// </summary>

        [JsonPropertyName("totalCount")]
        public double TotalCount { get; set; } = default!;

    }

    /// <summary>
    /// The Advance Ship Notice Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdvanceShipNoticeStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNPACKING")]
        UNPACKING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 3,

    }

    /// <summary>
    /// Represents input of create labels command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsCommandInput
    {
        /// <summary>
        /// The Advance Ship Notice identifier.
        /// </summary>

        [JsonPropertyName("advanceShipNoticeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid AdvanceShipNoticeId { get; set; } = default!;

    }

    /// <summary>
    /// Represents output of create labels command.
    /// </summary>
    [JsonInheritanceConverter(typeof(CreateLabelsCommandOutput), "status")]
    [JsonInheritanceAttribute("RUNNING", typeof(CreateLabelsRunningCommandOutput))]
    [JsonInheritanceAttribute("SUCCESSFUL", typeof(CreateLabelsSuccessfulCommandOutput))]
    [JsonInheritanceAttribute("FAILED", typeof(CreateLabelsFailedCommandOutput))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsCommandOutput
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsRunningCommandOutput : CreateLabelsCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "RUNNING";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsSuccessfulCommandOutput : CreateLabelsCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "SUCCESSFUL";

        /// <summary>
        /// Created label.
        /// </summary>

        [JsonPropertyName("labels")]
        [System.ComponentModel.DataAnnotations.Required]
        public Labels2 Labels { get; set; } = new Labels2();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsFailedCommandOutput : CreateLabelsCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "FAILED";

        [JsonPropertyName("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public Errors Errors { get; set; } = new Errors();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The created labels command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsCommandOnlyInput
    {

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateLabelsCommandInput Input { get; set; } = new CreateLabelsCommandInput();

    }

    /// <summary>
    /// The created labels command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLabelsCommand
    {
        /// <summary>
        /// An identifier of the command.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateLabelsCommandInput Input { get; set; } = new CreateLabelsCommandInput();

        [JsonPropertyName("output")]
        public CreateLabelsCommandOutput? Output { get; set; } = default!;

    }

    /// <summary>
    /// Represents input of the Advance Ship Notice submit command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitCommandInput
    {
        /// <summary>
        /// The Advance Ship Notice identifier.
        /// </summary>

        [JsonPropertyName("advanceShipNoticeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid AdvanceShipNoticeId { get; set; } = default!;

    }

    /// <summary>
    /// Represents output of the Advance Ship Notice submit command.
    /// </summary>
    [JsonInheritanceConverter(typeof(SubmitCommandOutput), "status")]
    [JsonInheritanceAttribute("RUNNING", typeof(SubmitRunningCommandOutput))]
    [JsonInheritanceAttribute("SUCCESSFUL", typeof(SubmitSuccessfulCommandOutput))]
    [JsonInheritanceAttribute("FAILED", typeof(SubmitFailedCommandOutput))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitCommandOutput
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitRunningCommandOutput : SubmitCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "RUNNING";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitSuccessfulCommandOutput : SubmitCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "SUCCESSFUL";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitFailedCommandOutput : SubmitCommandOutput
    {

        [JsonPropertyName("status")]
        public string? Status { get; set; } = "FAILED";

        [JsonPropertyName("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public Errors Errors { get; set; } = new Errors();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The submit command.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitCommand
    {
        /// <summary>
        /// The identifier of command.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public SubmitCommandInput Input { get; set; } = new SubmitCommandInput();

        [JsonPropertyName("output")]
        public SubmitCommandOutput? Output { get; set; } = default!;

    }

    /// <summary>
    /// The product data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        /// <summary>
        /// The product identifier.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Groups together product and quantity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductItem
    {

        [JsonPropertyName("product")]
        [System.ComponentModel.DataAnnotations.Required]
        public Product Product { get; set; } = new Product();

        /// <summary>
        /// The quantity of the product.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1D, 1000000D)]
        public double Quantity { get; set; } = default!;

    }

    /// <summary>
    /// Represents information about handling unit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HandlingUnit
    {
        /// <summary>
        /// The unit type of Advance Ship Notice. Available values - BOX, PALLET, CONTAINER.
        /// </summary>

        [JsonPropertyName("unitType")]
        public string? UnitType { get; set; } = default!;

        /// <summary>
        /// Amount of unit type. Not required when ASN status is DRAFT. When unit type is BOX or PALLET then it means how many handling units will be sent. When unit type is CONTAINER then it means how many handling units inside a container will be sent.
        /// </summary>

        [JsonPropertyName("amount")]
        public double? Amount { get; set; } = default!;

        /// <summary>
        /// Not required when ASN status is DRAFT. Available values - ONE_FULFILMENT, NONE. When unit type is CONTAINER labelsType can not be set to ONE_FULFILMENT.
        /// </summary>

        [JsonPropertyName("labelsType")]
        public string? LabelsType { get; set; } = default!;

    }

    /// <summary>
    /// Represents created labels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels
    {
        /// <summary>
        /// An URI to file containing labels.
        /// </summary>

        [JsonPropertyName("fileUrl")]
        public string? FileUrl { get; set; } = default!;

    }

    /// <summary>
    /// Represents information about package shipment.
    /// <br/>Constraints:
    /// <br/>  * for method OWN_TRANSPORT: truckLicencePlate, estimatedTimeOfArrival and countryCode are required.
    /// <br/>  * for method COURIER_BY_SELLER: trackingNumber, estimatedTimeOfArrival and countryCode are required.
    /// <br/>  * for method THIRD_PARTY_DELIVERY: thirdParty, estimatedTimeOfArrival and countryCode are required.
    /// </summary>
    [JsonInheritanceConverter(typeof(Shipping), "method")]
    [JsonInheritanceAttribute("OWN_TRANSPORT", typeof(OwnTransportShipping))]
    [JsonInheritanceAttribute("COURIER_BY_SELLER", typeof(CourierBySellerShipping))]
    [JsonInheritanceAttribute("THIRD_PARTY_DELIVERY", typeof(ThirdPartyDeliveryShipping))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shipping
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnTransportShipping : Shipping
    {

        [JsonPropertyName("method")]
        public string? Method { get; set; } = "OWN_TRANSPORT";

        /// <summary>
        /// The licence plate of the truck that will deliver the shipment.
        /// </summary>

        [JsonPropertyName("truckLicencePlate")]
        public string? TruckLicencePlate { get; set; } = default!;

        /// <summary>
        /// The estimated date and time of Advance Ship Notice arrival in the warehouse. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("estimatedTimeOfArrival")]
        public System.DateTimeOffset? EstimatedTimeOfArrival { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alpha-2 format (two-letter code), which means the country from which Advance Ship Notice is sent.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CourierBySellerShipping : Shipping
    {

        [JsonPropertyName("method")]
        public string? Method { get; set; } = "COURIER_BY_SELLER";

        /// <summary>
        /// A tracking number.
        /// </summary>

        [JsonPropertyName("trackingNumber")]
        public string? TrackingNumber { get; set; } = default!;

        /// <summary>
        /// The estimated date and time of Advance Ship Notice arrival in the warehouse. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("estimatedTimeOfArrival")]
        public System.DateTimeOffset? EstimatedTimeOfArrival { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alpha-2 format (two-letter code), which means the country from which Advance Ship Notice is sent.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThirdPartyDeliveryShipping : Shipping
    {

        [JsonPropertyName("method")]
        public string? Method { get; set; } = "THIRD_PARTY_DELIVERY";

        [JsonPropertyName("thirdParty")]
        public ThirdParty? ThirdParty { get; set; } = default!;

        /// <summary>
        /// The estimated date and time of Advance Ship Notice arrival in the warehouse. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("estimatedTimeOfArrival")]
        public System.DateTimeOffset? EstimatedTimeOfArrival { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alpha-2 format (two-letter code), which means the country from which Advance Ship Notice is sent.
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents shipping details from third party.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThirdParty
    {
        /// <summary>
        /// Third party name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Third party order number.
        /// </summary>

        [JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; } = default!;

    }

    /// <summary>
    /// Represents the current stock for the seller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockProductList
    {
        /// <summary>
        /// List of products with their quantity.
        /// </summary>

        [JsonPropertyName("stock")]
        public ICollection<StockProductItem>? Stock { get; set; } = default!;

        /// <summary>
        /// Number of returned products.
        /// </summary>

        [JsonPropertyName("count")]
        public double? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available products.
        /// </summary>

        [JsonPropertyName("totalCount")]
        public double? TotalCount { get; set; } = default!;

    }

    /// <summary>
    /// Groups together product and its quantity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockProductItem
    {

        [JsonPropertyName("product")]
        public StockProduct? Product { get; set; } = default!;

        [JsonPropertyName("quantity")]
        public StockQuantity? Quantity { get; set; } = default!;

        [JsonPropertyName("sellingStats")]
        public StockSellingStats? SellingStats { get; set; } = default!;

        [JsonPropertyName("reserve")]
        public ReserveInfo? Reserve { get; set; } = default!;

        [JsonPropertyName("storageFee")]
        public StockStorageFee? StorageFee { get; set; } = default!;

    }

    /// <summary>
    /// The product.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockProduct
    {
        /// <summary>
        /// The product identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// The product name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// List of product's GTIN numbers.
        /// </summary>

        [JsonPropertyName("gtins")]
        public ICollection<string>? Gtins { get; set; } = default!;

        /// <summary>
        /// The product image.
        /// </summary>

        [JsonPropertyName("image")]
        public string? Image { get; set; } = default!;

    }

    /// <summary>
    /// Represents stock quantity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockQuantity
    {
        /// <summary>
        /// A number of items which are available on the current active offer for the product.
        /// </summary>

        [JsonPropertyName("onOffer")]
        public double? OnOffer { get; set; } = default!;

        /// <summary>
        /// A number of items in a warehouse available for sale. The amount is taken from the current active offer, or in case there is no active offer, it shows the amount that will be available on offer after it will have been created.
        /// </summary>

        [JsonPropertyName("available")]
        public double? Available { get; set; } = default!;

        /// <summary>
        /// A number of items already bought but not shipped. These are items in unpaid and paid orders that waiting for courier pickup.
        /// </summary>

        [JsonPropertyName("onOrder")]
        public double? OnOrder { get; set; } = default!;

        /// <summary>
        /// A number of items in a warehouse not available for sale (e.g. due to damage).
        /// </summary>

        [JsonPropertyName("onHold")]
        public double? OnHold { get; set; } = default!;

    }

    /// <summary>
    /// Represents selling stats of given product in merchant's stock.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockSellingStats
    {
        /// <summary>
        /// Moving daily sales average calculated for last week (7 calendar days before current day), rounded to integer using "half up" logic. Doesn't include sales for current day. Note that this number is not stable and might change between subsequent requests due to e.g. cancellations of orders within the calculation period.
        /// </summary>

        [JsonPropertyName("lastWeekAverage")]
        public double? LastWeekAverage { get; set; } = default!;

        /// <summary>
        /// Total sales for the last 30 calendar days. Doesn't include sales for current day. Note that this number is not stable and might change between subsequent requests due to e.g. cancellations of orders within the calculation period.
        /// </summary>

        [JsonPropertyName("lastThirtyDaysSum")]
        public double? LastThirtyDaysSum { get; set; } = default!;

    }

    /// <summary>
    /// Information about storage fee for a given product in merchant's stock.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockStorageFee
    {
        /// <summary>
        /// Status of the storage fee.
        /// <br/>* NOT_APPLICABLE - fee for yesterday has not been charged and there are no available items of the product.
        /// <br/>* INCLUDED_IN_SERVICE_PRICE - fee for yesterday has not been charged and there are available items of the product.
        /// <br/>* CHARGED - the fee has been charged on seller's billing.
        /// <br/>* PREDICTION - prediction of upcoming fee, based on yesterday selling stats and quantity.
        /// <br/>
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public StockStorageFeeStatus? Status { get; set; } = default!;

        /// <summary>
        /// Date when the fee was charged. Normally we return the data for the day before. However, due to asynchronous nature of fee update process, which are calculated overnight, it is possible to have some outdated entries when querying during fee recalculation process. This value allows to ensure that you work on the most recent data.
        /// </summary>

        [JsonPropertyName("feeStatusAt")]
        public string? FeeStatusAt { get; set; } = default!;

        /// <summary>
        /// Details about charged storage fee. Only present in case of CHARGED status, null otherwise.
        /// </summary>

        [JsonPropertyName("details")]
        public Details? Details { get; set; } = default!;

    }

    /// <summary>
    /// Contains information about amount of reserve and its sufficiency for next days. If status is set to NOT_ENOUGH_DATA value of will not be sent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReserveInfo
    {
        /// <summary>
        /// Prediction of number of days in which inventory will be sold out.
        /// </summary>

        [JsonPropertyName("outOfStockIn")]
        public double? OutOfStockIn { get; set; } = default!;

        /// <summary>
        /// Gives information about inventory, that can not be expressed using `outOfStockIn` property. Can be one of the given values: NOT_ENOUGH_DATA - not enough data to calculate sufficiency, LOW_STOCK - inventory quantity will run out soon (in 14 days or less) NORMAL - prediction can be calculated, EXCESS_ONE_YEAR - amount of inventory will not be exhausted in (approximately) one year threshold.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReserveInfoStatus? Status { get; set; } = default!;

    }

    /// <summary>
    /// The list of available seller's products.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableProductsList
    {
        /// <summary>
        /// List of products.
        /// </summary>

        [JsonPropertyName("products")]
        public ICollection<AvailableProductResponse>? Products { get; set; } = default!;

        /// <summary>
        /// Number of returned products.
        /// </summary>

        [JsonPropertyName("count")]
        public double? Count { get; set; } = default!;

        /// <summary>
        /// Total number of available products.
        /// </summary>

        [JsonPropertyName("totalCount")]
        public double? TotalCount { get; set; } = default!;

    }

    /// <summary>
    /// The product.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableProductResponse
    {
        /// <summary>
        /// The product identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// The product name.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// List of product's GTIN numbers.
        /// </summary>

        [JsonPropertyName("gtins")]
        public ICollection<string>? Gtins { get; set; } = default!;

        /// <summary>
        /// The product image.
        /// </summary>

        [JsonPropertyName("image")]
        public string? Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivingState
    {
        /// <summary>
        /// The date and time when report was updated last time. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Stage of Advance Ship Notice receiving
        /// </summary>

        [JsonPropertyName("stage")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReceivingStateStage? Stage { get; set; } = default!;

        /// <summary>
        /// A human friendly identifier of Advance Ship Notice.
        /// </summary>

        [JsonPropertyName("displayNumber")]
        public string? DisplayNumber { get; set; } = default!;

        /// <summary>
        /// The list of products with receiving status.
        /// </summary>

        [JsonPropertyName("content")]
        public ICollection<ReceivingEntry>? Content { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivingEntry
    {
        /// <summary>
        /// Expected product quantity.
        /// </summary>

        [JsonPropertyName("expected")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Expected { get; set; } = default!;

        [JsonPropertyName("product")]
        public Product? Product { get; set; } = default!;

        [JsonPropertyName("received")]
        public ICollection<ReceivingStatus>? Received { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivingStatus
    {
        /// <summary>
        /// Product quantity.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// Received item condition.
        /// </summary>

        [JsonPropertyName("receivedType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReceivingStatusReceivedType? ReceivedType { get; set; } = default!;

        /// <summary>
        /// The reasonCode indicates the condition of the product after unpacking. For sellable product is given the reasonCode SELLABLE. For a product that is not suitable for sale receives a code specifying a detailed reason for rejection, e.g. "DAMAGED_IN_TRANSPORT" or "NO_BARCODE"
        /// </summary>

        [JsonPropertyName("reasonCode")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ReceivingStatusReasonCode? ReasonCode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrder
    {
        /// <summary>
        /// order identifier
        /// </summary>

        [JsonPropertyName("orderId")]
        public string? OrderId { get; set; } = default!;

        [JsonPropertyName("parcels")]
        public ICollection<FulfillmentOrderParcel>? Parcels { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrderParcel
    {
        /// <summary>
        /// Waybill number (parcel tracking number).
        /// </summary>

        [JsonPropertyName("waybill")]
        public string? Waybill { get; set; } = default!;

        /// <summary>
        /// List of parcels' items
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<FulfillmentOrderParcelItem>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FulfillmentOrderParcelItem
    {
        /// <summary>
        /// Product identifier
        /// </summary>

        [JsonPropertyName("productId")]
        public string? ProductId { get; set; } = default!;

        /// <summary>
        /// Number of items placed in a parcel
        /// </summary>

        [JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// List of serial numbers of included items
        /// </summary>

        [JsonPropertyName("serialNumbers")]
        public ICollection<string>? SerialNumbers { get; set; } = default!;

        /// <summary>
        /// Expiration date of all items associated by quantity
        /// </summary>

        [JsonPropertyName("expirationDate")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; } = default!;

        /// <summary>
        /// Offer identifier
        /// </summary>

        [JsonPropertyName("offerId")]
        public string? OfferId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroCarrier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UPS")]
        UPS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO_ONE_KURIER")]
        ALLEGRO_ONE_KURIER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllegroMarketplaces
    {
        /// <summary>
        /// List of marketplaces in allegro
        /// </summary>

        [JsonPropertyName("marketplaces")]
        public ICollection<MarketplaceItem>? Marketplaces { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceItem
    {
        /// <summary>
        /// Marketplace id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Languages available for that marketplace
        /// </summary>

        [JsonPropertyName("languages")]
        public Languages? Languages { get; set; } = default!;

        /// <summary>
        /// Currencies available for that marketplace
        /// </summary>

        [JsonPropertyName("currencies")]
        public Currencies? Currencies { get; set; } = default!;

        /// <summary>
        /// List of delivery countries for that marketplace
        /// </summary>

        [JsonPropertyName("shippingCountries")]
        public ICollection<MarketplaceItemShippingCountry>? ShippingCountries { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceItemLanguage
    {
        /// <summary>
        /// BCP-47 language code
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceItemCurrency
    {
        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceItemShippingCountry
    {
        /// <summary>
        /// ISO 3166 country code
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

    }

    /// <summary>
    /// Receiver address data with optional point ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceiverAddressDto : AddressDto
    {
        /// <summary>
        /// Pick up point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("point")]
        public string? Point { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Pickup address with optionaly drop-off point. If empty, then sender object will be used.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupAddressDto : AddressDto
    {
        /// <summary>
        /// Drop off point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("point")]
        public string? Point { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Shipment owner data. This address will be provided on label and will be used to operation return.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SenderAddressDto : AddressDto
    {
        /// <summary>
        /// Possible drop off point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("point")]
        public string? Point { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressDto
    {
        /// <summary>
        /// Person name. Name or Company are required.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Company name. Name or Company are required.
        /// </summary>

        [JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        [JsonPropertyName("streetNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StreetNumber { get; set; } = default!;

        [JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Required for shipments to Ireland( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
        /// </summary>

        [JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// Country code in ISO 3166-1 alfa-2 format (two-letter code).
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2}")]
        public string CountryCode { get; set; } = "PL";

        /// <summary>
        /// Email address. For receiver, must be a valid buyer email generated by Allegro (eg. hamu7udk3p+17454c1b6@allegromail.pl).
        /// </summary>

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// Cell phone
        /// </summary>

        [JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        /// <summary>
        /// Pickup point id. You can get it from order or directly from courier service.
        /// </summary>

        [JsonPropertyName("point")]
        public string? Point { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentCreateCommandDto
    {
        /// <summary>
        /// Command UUID. If empty, then system generate new one.
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentCreateRequestDto Input { get; set; } = new ShipmentCreateRequestDto();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CashOnDeliveryDto
    {
        /// <summary>
        /// Postpaid value
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d+\.\d{1,2}")]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{3}")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// Bank account owner.
        /// </summary>

        [JsonPropertyName("ownerName")]
        public string? OwnerName { get; set; } = default!;

        /// <summary>
        /// Bank account number.
        /// </summary>

        [JsonPropertyName("iban")]
        public string? Iban { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceDto
    {
        /// <summary>
        /// Insurance value
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d+\.\d{1,2}")]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{3}")]
        public string Currency { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRequestDto
    {
        /// <summary>
        /// Available values: PACKAGE|DOX|PALLET|OTHER
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"DOX|PACKAGE|PALLET|OTHER")]
        public string Type { get; set; } = default!;

        [JsonPropertyName("length")]
        [System.ComponentModel.DataAnnotations.Required]
        public DimensionValue Length { get; set; } = new DimensionValue();

        [JsonPropertyName("width")]
        [System.ComponentModel.DataAnnotations.Required]
        public DimensionValue Width { get; set; } = new DimensionValue();

        [JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public DimensionValue Height { get; set; } = new DimensionValue();

        [JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public WeightValue Weight { get; set; } = new WeightValue();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentCreateRequestDto
    {
        /// <summary>
        /// Id of delivery method, chosen by buyer in order.
        /// </summary>

        [JsonPropertyName("deliveryMethodId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryMethodId { get; set; } = default!;

        /// <summary>
        /// ID of merchant agreement, registered in WZA. Value should be read from /shipment-management/delivery-services. For Allegro Standard methods, this field should be null.
        /// </summary>

        [JsonPropertyName("credentialsId")]
        public string? CredentialsId { get; set; } = default!;

        /// <summary>
        /// Shipment owner data. This address will be provided on label and will be used to operation return.
        /// </summary>

        [JsonPropertyName("sender")]
        [System.ComponentModel.DataAnnotations.Required]
        public SenderAddressDto Sender { get; set; } = default!;

        /// <summary>
        /// Receiver address data.
        /// </summary>

        [JsonPropertyName("receiver")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReceiverAddressDto Receiver { get; set; } = default!;

        /// <summary>
        /// Pickup address or point. If empty, then sender object will be used.
        /// </summary>

        [JsonPropertyName("pickup")]
        public PickupAddressDto? Pickup { get; set; } = default!;

        /// <summary>
        /// Shipment identifier in own system. Example: `Ordering number`.
        /// </summary>

        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Shipment description
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [JsonPropertyName("packages")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PackageRequestDto> Packages { get; set; } = new System.Collections.ObjectModel.Collection<PackageRequestDto>();

        [JsonPropertyName("insurance")]
        public InsuranceDto? Insurance { get; set; } = default!;

        [JsonPropertyName("cashOnDelivery")]
        public CashOnDeliveryDto? CashOnDelivery { get; set; } = default!;

        /// <summary>
        /// Label file format.
        /// </summary>

        [JsonPropertyName("labelFormat")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"PDF|ZPL|EPL")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ShipmentCreateRequestDtoLabelFormat? LabelFormat { get; set; } = default!;

        /// <summary>
        /// List of additional services.
        /// </summary>

        [JsonPropertyName("additionalServices")]
        public ICollection<string>? AdditionalServices { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentCancelCommandDto
    {
        /// <summary>
        /// Command UUID. If empty, then system generate new one.
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentCancelRequestDto Input { get; set; } = new ShipmentCancelRequestDto();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentCancelRequestDto
    {

        [JsonPropertyName("shipmentId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentIdsDto
    {

        [JsonPropertyName("shipmentIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
        public ICollection<string> ShipmentIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupCreateCommandDto
    {
        /// <summary>
        /// Command UUID. If empty, then system generate new one.
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public PickupCreateRequestDto Input { get; set; } = new PickupCreateRequestDto();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupCreateRequestDto
    {

        [JsonPropertyName("shipmentIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
        public ICollection<string> ShipmentIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Internal pickup proposal ID
        /// </summary>

        [JsonPropertyName("pickupDateProposalId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PickupDateProposalId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDateProposalDto
    {
        /// <summary>
        /// Internal pickup proposal ID
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Human readable name of pickup proposal
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Additional information for pickup proposal
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupProposalsRequestDto
    {

        [JsonPropertyName("shipmentIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
        public ICollection<string> ShipmentIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Date when shipments will be ready.
        /// </summary>

        [JsonPropertyName("readyDate")]
        public string? ReadyDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDateProposalsDto
    {

        [JsonPropertyName("shipmentId")]
        public string? ShipmentId { get; set; } = default!;

        [JsonPropertyName("proposalItems")]
        public ICollection<PickupDateProposalDto>? ProposalItems { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupProposalsResponseDto
    {

        [JsonPropertyName("proposals")]
        public ICollection<PickupDateProposalsDto>? Proposals { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelRequestDto
    {

        [JsonPropertyName("shipmentIds")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
        public ICollection<string> ShipmentIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Label page format. Only for PDF file.
        /// </summary>

        [JsonPropertyName("pageSize")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public LabelRequestDtoPageSize? PageSize { get; set; } = default!;

        /// <summary>
        /// Put additional cut lines. Only for PDF file with A4 size.
        /// </summary>

        [JsonPropertyName("cutLine")]
        public bool? CutLine { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageDto
    {
        /// <summary>
        /// Waybill number (carrier tracking number).
        /// </summary>

        [JsonPropertyName("waybill")]
        public string? Waybill { get; set; } = default!;

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PackageDtoType? Type { get; set; } = default!;

        [JsonPropertyName("length")]
        public DimensionValue? Length { get; set; } = default!;

        [JsonPropertyName("width")]
        public DimensionValue? Width { get; set; } = default!;

        [JsonPropertyName("height")]
        public DimensionValue? Height { get; set; } = default!;

        [JsonPropertyName("weight")]
        public WeightValue? Weight { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDto
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Id of delivery method, chosen by buyer in order.
        /// </summary>

        [JsonPropertyName("deliveryMethodId")]
        public string? DeliveryMethodId { get; set; } = default!;

        /// <summary>
        /// ID of merchant agreement, registered in WZA. For Allegro methods, this field is null.
        /// </summary>

        [JsonPropertyName("credentialsId")]
        public string? CredentialsId { get; set; } = default!;

        /// <summary>
        /// Shipment owner data. This address will be provided on label and will be used to operation return.
        /// </summary>

        [JsonPropertyName("sender")]
        public SenderAddressDto? Sender { get; set; } = default!;

        /// <summary>
        /// Receiver address data.
        /// </summary>

        [JsonPropertyName("receiver")]
        public ReceiverAddressDto? Receiver { get; set; } = default!;

        /// <summary>
        /// Pickup address or point. If empty, then sender object will be used.
        /// </summary>

        [JsonPropertyName("pickup")]
        public PickupAddressDto? Pickup { get; set; } = default!;

        /// <summary>
        /// Shipment identifier in own system. Example: `Ordering number`.
        /// </summary>

        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Shipment description
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [JsonPropertyName("packages")]
        public ICollection<PackageDto>? Packages { get; set; } = default!;

        [JsonPropertyName("insurance")]
        public InsuranceDto? Insurance { get; set; } = default!;

        [JsonPropertyName("cashOnDelivery")]
        public CashOnDeliveryDto? CashOnDelivery { get; set; } = default!;

        /// <summary>
        /// Shipment creation date
        /// </summary>

        [JsonPropertyName("createdDate")]
        public string? CreatedDate { get; set; } = default!;

        /// <summary>
        /// Shipment cancellation date. Only for canceled shipments, in all other cases is null.
        /// </summary>

        [JsonPropertyName("canceledDate")]
        public string? CanceledDate { get; set; } = default!;

        /// <summary>
        /// ID of carrier which carries out a shipment
        /// </summary>

        [JsonPropertyName("carrier")]
        public string? Carrier { get; set; } = default!;

        /// <summary>
        /// Label file format.
        /// </summary>

        [JsonPropertyName("labelFormat")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ShipmentDtoLabelFormat? LabelFormat { get; set; } = default!;

        /// <summary>
        /// List of additional services.
        /// </summary>

        [JsonPropertyName("additionalServices")]
        public ICollection<string>? AdditionalServices { get; set; } = default!;

        /// <summary>
        /// Special collection for return shipment extra information, like carrier external waybill.
        /// </summary>

        [JsonPropertyName("additionalProperties")]
        public IDictionary<string, string>? AdditionalProperties { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateShipmentCommandStatusDto
    {
        /// <summary>
        /// Command UUID
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CreateShipmentCommandStatusDtoStatus? Status { get; set; } = default!;

        /// <summary>
        /// List of errors. Available only, if operation finished with ERROR.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        /// <summary>
        /// Generated shipment ID. Available only, if operation finished with SUCCESS.
        /// </summary>

        [JsonPropertyName("shipmentId")]
        public string? ShipmentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelShipmentCommandStatusDto
    {
        /// <summary>
        /// Command UUID
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CancelShipmentCommandStatusDtoStatus? Status { get; set; } = default!;

        /// <summary>
        /// List of errors. Available only, if operation finished with ERROR.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        /// <summary>
        /// Generated shipment ID. Available only, if operation finished with SUCCESS.
        /// </summary>

        [JsonPropertyName("shipmentId")]
        public string? ShipmentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePickupCommandStatusDto
    {
        /// <summary>
        /// Command UUID
        /// </summary>

        [JsonPropertyName("commandId")]
        public string? CommandId { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CreatePickupCommandStatusDtoStatus? Status { get; set; } = default!;

        /// <summary>
        /// List of errors. Available only, if operation finished with ERROR.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        /// <summary>
        /// Generated internal pickup ID. Available only, if operation finished with SUCCESS.
        /// </summary>

        [JsonPropertyName("pickupId")]
        public string? PickupId { get; set; } = default!;

        /// <summary>
        /// Generated Carrier Pickup ID. Available only, if operation finished with SUCCESS.
        /// </summary>

        [JsonPropertyName("carrierPickupId")]
        public string? CarrierPickupId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServiceDto
    {
        /// <summary>
        /// ID of additonal service
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Translated name of service: 'Non-standard parcel' | 'Niestandardowa przesyłka'
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Optional description of service
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    /// <summary>
    /// Definition of cash on delivery specification for method. If null, then COD is not supported.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CashOnDeliveryLimitDto
    {
        /// <summary>
        /// Maximum value
        /// </summary>

        [JsonPropertyName("limit")]
        public double? Limit { get; set; } = default!;

        /// <summary>
        /// Supported currency: 'PLN' | 'CZK
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = "PLN";

        /// <summary>
        /// Type of payment: Money transfer to merchant bank account or internal wallet payout
        /// </summary>

        [JsonPropertyName("paymentType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public CashOnDeliveryLimitDtoPaymentType? PaymentType { get; set; } = default!;

        /// <summary>
        /// Defined that COD required IBAN for process shipment. If true, then request of shipment creation without IBAN will be rejected.
        /// </summary>

        [JsonPropertyName("forceRequireIban")]
        public bool? ForceRequireIban { get; set; } = default!;

    }

    /// <summary>
    /// Primary object for Ship with Allegro. It's strongly related to delivery-method selected by buyer in purchase process and represent how shipment will be delivered. Delivery services contains set of features like cash on delivery support, insurance, additional services used to shipment creation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryServiceDto
    {

        [JsonPropertyName("id")]
        public DeliveryServiceIdDto? Id { get; set; } = default!;

        /// <summary>
        /// Name of delivery service. &lt;br/&gt; For Allegro Standard method, name of service will be exactly same and occurs only once: eg. 'Allegro Courier DPD'. &lt;br/&gt; For merchant's controlled method, name is concatenation of method name and credential name: eg. 'Courier DPD (My agreement)'.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("carrierId")]
        public string? CarrierId { get; set; } = default!;

        [JsonPropertyName("additionalServices")]
        public ICollection<AdditionalServiceDto>? AdditionalServices { get; set; } = default!;

        /// <summary>
        /// Define delivery method type. ALLEGRO - Allegro Standard. Client - Merchant carrier agreement
        /// </summary>

        [JsonPropertyName("owner")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DeliveryServiceDtoOwner? Owner { get; set; } = default!;

        /// <summary>
        /// List of marketplaces supported by service
        /// </summary>

        [JsonPropertyName("marketplaces")]
        public ICollection<string>? Marketplaces { get; set; } = default!;

        /// <summary>
        /// List of supported package types
        /// </summary>

        [JsonPropertyName("packageTypes")]

        // TODO(system.text.json): Add string enum item converter
        public ICollection<PackageTypes>? PackageTypes { get; set; } = default!;

        [JsonPropertyName("cashOnDelivery")]
        public CashOnDeliveryLimitDto? CashOnDelivery { get; set; } = default!;

        [JsonPropertyName("insurance")]
        public LimitWithCurrencyDto? Insurance { get; set; } = default!;

        /// <summary>
        /// A map of service-specific features. List of key will be builded per services.
        /// </summary>

        [JsonPropertyName("features")]
        public IDictionary<string, string>? Features { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryServiceIdDto
    {
        /// <summary>
        /// Id of delivery method, chosen by buyer in order.
        /// </summary>

        [JsonPropertyName("deliveryMethodId")]
        public string? DeliveryMethodId { get; set; } = default!;

        /// <summary>
        /// ID of merchant agreement, registered in WZA. For Allegro Standard methods, this field is null.
        /// </summary>

        [JsonPropertyName("credentialsId")]
        public string? CredentialsId { get; set; } = default!;

    }

    /// <summary>
    /// List of all available delivery services for merchant. List will be unique for each merchant.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryServicesDto
    {

        [JsonPropertyName("services")]
        public ICollection<DeliveryServiceDto>? Services { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LimitWithCurrencyDto
    {
        /// <summary>
        /// Maximum value
        /// </summary>

        [JsonPropertyName("limit")]
        public double? Limit { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. Currency code depends on marketplace, e.g. PLN for allegro-pl, CZK for allegro-cz.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeightValue
    {
        /// <summary>
        /// Weight value, provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("value")]
        public double Value { get; set; } = default!;

        /// <summary>
        /// Weight unit. Currently only `KILOGRAM` is accepted.
        /// </summary>

        [JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public WeightValueUnit Unit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DimensionValue
    {
        /// <summary>
        /// Dimension value.
        /// </summary>

        [JsonPropertyName("value")]
        public double Value { get; set; } = default!;

        /// <summary>
        /// Dimension unit. Currently only `CENTIMETER` is accepted.
        /// </summary>

        [JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DimensionValueUnit Unit { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePersonResponse
    {
        /// <summary>
        /// Responsible person ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Internal name of responsible person in dictionary.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Responsible person personal data.
        /// </summary>

        [JsonPropertyName("personalData")]
        public PersonalData? PersonalData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateResponsiblePersonRequest
    {
        /// <summary>
        /// Internal name of responsible person in dictionary.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Responsible person personal data.
        /// </summary>

        [JsonPropertyName("personalData")]
        public PersonalData2? PersonalData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateResponsiblePersonRequest
    {
        /// <summary>
        /// Responsible person ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Internal name of responsible person in dictionary.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Responsible person personal data.
        /// </summary>

        [JsonPropertyName("personalData")]
        public PersonalData3? PersonalData { get; set; } = default!;

    }

    /// <summary>
    /// Responsible person address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePersonAddress
    {
        /// <summary>
        /// Code of responsible person country (ISO 3166).
        /// </summary>

        [JsonPropertyName("countryCode")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ResponsiblePersonAddressCountryCode? CountryCode { get; set; } = default!;

        /// <summary>
        /// Street and number.
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Street { get; set; } = default!;

        /// <summary>
        /// Postal code.
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// City.
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? City { get; set; } = default!;

    }

    /// <summary>
    /// Contact to responsible person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePersonContact
    {
        /// <summary>
        /// Email of responsible person.
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Phone number of responsible person.
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATING")]
        ACTIVATING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ENDED")]
        ENDED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY_NOW")]
        BUY_NOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTISEMENT")]
        ADVERTISEMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUCTION")]
        AUCTION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sort
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sellingMode.price.amount")]
        SellingMode_price_amount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-sellingMode.price.amount")]
        MinussellingMode_price_amount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stock.sold")]
        Stock_sold = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-stock.sold")]
        Minusstock_sold = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"stock.available")]
        Stock_available = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-stock.available")]
        Minusstock_available = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Element
    {

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Recommended
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromotionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPACK")]
        MULTIPACK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CROSS_MULTIPACK")]
        CROSS_MULTIPACK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIREMENT_CHANGE")]
        REQUIREMENT_CHANGE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CATEGORY_CREATED")]
        CATEGORY_CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CATEGORY_RENAMED")]
        CATEGORY_RENAMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CATEGORY_MOVED")]
        CATEGORY_MOVED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CATEGORY_DELETED")]
        CATEGORY_DELETED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTIONS")]
        DESCRIPTIONS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sort2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"relevance")]
        Relevance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"+price")]
        Plusprice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"-price")]
        Minusprice = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"+withDeliveryPrice")]
        PluswithDeliveryPrice = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-withDeliveryPrice")]
        MinuswithDeliveryPrice = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+endTime")]
        PlusendTime = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"-startTime")]
        MinusstartTime = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sort3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lineItems.boughtAt")]
        LineItems_boughtAt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-lineItems.boughtAt")]
        MinuslineItems_boughtAt = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"updatedAt")]
        UpdatedAt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-updatedAt")]
        MinusupdatedAt = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONGOING")]
        ONGOING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Mode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GTIN")]
        GTIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MPN")]
        MPN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchFeatures
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIMILAR_CATEGORIES")]
        SIMILAR_CATEGORIES = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIREMENT_PLANNED")]
        REQUIREMENT_PLANNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INCOME")]
        INCOME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTCOME")]
        OUTCOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKADES")]
        BLOCKADES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarketplaceId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"allegro-pl")]
        AllegroPl = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"allegro-cz")]
        AllegroCz = 1,

    }

    /// <summary>
    /// The bid request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BidRequest
    {

        [JsonPropertyName("maxAmount")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder MaxAmount { get; set; } = new PriceModificationFixedPriceHolder();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ACTIVATED")]
        OFFER_ACTIVATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_CHANGED")]
        OFFER_CHANGED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ENDED")]
        OFFER_ENDED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_STOCK_CHANGED")]
        OFFER_STOCK_CHANGED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_PRICE_CHANGED")]
        OFFER_PRICE_CHANGED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ARCHIVED")]
        OFFER_ARCHIVED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_BID_PLACED")]
        OFFER_BID_PLACED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_BID_CANCELED")]
        OFFER_BID_CANCELED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_TRANSLATION_UPDATED")]
        OFFER_TRANSLATION_UPDATED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_VISIBILITY_CHANGED")]
        OFFER_VISIBILITY_CHANGED = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PAYMENT_REFUND")]
        WAITING_FOR_PAYMENT_REFUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GRANTED")]
        GRANTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_AFTER_APPEAL")]
        REJECTED_AFTER_APPEAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"APPEALED")]
        APPEALED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A6")]
        A6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/vnd.allegro.public.v1+json")]
        Application_vnd_allegro_public_v1_json = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/pdf")]
        Application_pdf = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"x-application/zpl")]
        XApplication_zpl = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AcceptLanguage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"en-US")]
        EnUS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pl-PL")]
        PlPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"uk-UA")]
        UkUA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sort4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-available")]
        Minusavailable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unfulfillable")]
        Unfulfillable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-unfulfillable")]
        Minusunfulfillable = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"lastWeekSalesAverage")]
        LastWeekSalesAverage = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastWeekSalesAverage")]
        MinuslastWeekSalesAverage = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"reserve")]
        Reserve = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"-reserve")]
        Minusreserve = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"lastThirtyDaysSalesSum")]
        LastThirtyDaysSalesSum = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastThirtyDaysSalesSum")]
        MinuslastThirtyDaysSalesSum = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"storageFee")]
        StorageFee = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-storageFee")]
        MinusstorageFee = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUFFICIENT")]
        SUFFICIENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE")]
        UNAVAILABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNFULFILLABLE")]
        UNFULFILLABLE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StorageFee
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TO_BE_PAID_SOON")]
        TO_BE_PAID_SOON = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AsnStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUBMITTED")]
        SUBMITTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AcceptLanguage2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"en-US")]
        EnUS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pl-PL")]
        PlPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"uk-UA")]
        UkUA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [JsonPropertyName("shippingRates")]
        public ICollection<shippingRates>? ShippingRates { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {

        [JsonPropertyName("responsiblePersons")]
        public ICollection<ResponsiblePersonResponse>? ResponsiblePersons { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {

        [JsonPropertyName("deliveryMethods")]
        public ICollection<DeliveryMethods>? DeliveryMethods { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// Operation Id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {
        /// <summary>
        /// Collection of payments refunds.
        /// </summary>

        [JsonPropertyName("refunds")]
        public ICollection<RefundDetails>? Refunds { get; set; } = default!;

        /// <summary>
        /// Number of payment operations returned in search result for the given parameters.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// Total number of payment operations for the given parameters.
        /// </summary>

        [JsonPropertyName("totalCount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? TotalCount { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10
    {
        /// <summary>
        /// Collection of refund applications.
        /// </summary>

        [JsonPropertyName("refundClaims")]
        public ICollection<RefundClaim>? RefundClaims { get; set; } = default!;

        /// <summary>
        /// Count of refund applications returned.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response34
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response35
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response36
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response37
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response38
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response39
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response40
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response41
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response42
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response43
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response44
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response45
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response46
    {
        /// <summary>
        /// The unique command UUID provided in the input.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        public ParcelCreationParameters? Input { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response47
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response48
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response49
    {
        /// <summary>
        /// Sent command UUID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Id of created parcel.
        /// </summary>

        [JsonPropertyName("parcelId")]
        public string? ParcelId { get; set; } = default!;

        /// <summary>
        /// Parcel creation status.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Response49Status? Status { get; set; } = default!;

        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error200>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response50
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response51
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response52
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response53
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response54
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response55
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response56
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response57
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response58
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response59
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response60
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response61
    {
        /// <summary>
        /// The unique command UUID provided in the input.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        public PickupParcelParameters? Input { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response62
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response63
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response64
    {
        /// <summary>
        /// Sent command UUID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Parcel pickup status.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Response64Status? Status { get; set; } = default!;

        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error200>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response65
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response66
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response67
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response68
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response69
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response70
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response71
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response72
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response73
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response74
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error404>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response75
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response76
    {
        /// <summary>
        /// The unique command UUID provided in the input.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [JsonPropertyName("input")]
        public CancelParcelParameters? Input { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response77
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response78
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response79
    {
        /// <summary>
        /// Sent command UUID.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Cancelation status.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Response79Status? Status { get; set; } = default!;

        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error200>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response80
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error400>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response81
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error403>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response82
    {
        /// <summary>
        /// Array of errors.
        /// </summary>

        [JsonPropertyName("errors")]
        public ICollection<Error504>? Errors { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type2
    {
        /// <summary>
        /// Three-letter code of the billing type of the returned billing entry.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Billing type of the returned billing entry. This type is translated based on the value of the "Accept-Language" header. By default a message in English is returned.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offer
    {
        /// <summary>
        /// ID of the offer associated with the billing entry.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of the offer associated with the billing entry.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value
    {
        /// <summary>
        /// Monetary amount of the returned billing entry.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// Three-letter currency code (ISO-4217) of the returned billing entry.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax2
    {
        /// <summary>
        /// Optional tax rate shown as a number in the range 0-100.
        /// </summary>

        [JsonPropertyName("percentage")]
        public string? Percentage { get; set; } = default!;

        /// <summary>
        /// Optional annotation explaining the tax rate.
        /// </summary>

        [JsonPropertyName("annotation")]
        public string? Annotation { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance
    {
        /// <summary>
        /// Monetary amount of the balance calculated for the returned billing entry.
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// Three-letter currency code (ISO-4217) of the balance of the returned billing entry.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order2
    {
        /// <summary>
        /// Order id
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InitializeRefundReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINT")]
        COMPLAINT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_NOT_AVAILABLE")]
        PRODUCT_NOT_AVAILABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID_VALUE_TOO_LOW")]
        PAID_VALUE_TOO_LOW = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERPAID")]
        OVERPAID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_BY_BUYER")]
        CANCELLED_BY_BUYER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_COLLECTED")]
        NOT_COLLECTED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delivery
    {

        [JsonPropertyName("value")]
        public RefundDeliveryValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overpaid
    {

        [JsonPropertyName("value")]
        public RefundOverpaidValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServices
    {

        [JsonPropertyName("value")]
        public RefundAdditionalServicesValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundClaimStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PAYMENT_REFUND")]
        WAITING_FOR_PAYMENT_REFUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GRANTED")]
        GRANTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_AFTER_APPEAL")]
        REJECTED_AFTER_APPEAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"APPEALED")]
        APPEALED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commission
    {
        /// <summary>
        /// Monetary amount of the returned refund application.
        /// </summary>

        [JsonPropertyName("amount")]
        public double? Amount { get; set; } = default!;

        /// <summary>
        /// Three-letter currency code (ISO-4217) of the returned refund application.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Buyer
    {
        /// <summary>
        /// ID of the buyer associated with the refund application.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Login of the buyer associated with the refund application.
        /// </summary>

        [JsonPropertyName("login")]
        public string? Login { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItem
    {
        /// <summary>
        /// ID of the purchase associated with the refund application.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Total quantity of product purchased by the buyer. Equal to or greater than quantity for which the seller filed the refund application.
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// Date when the purchase was made.
        /// </summary>

        [JsonPropertyName("boughtAt")]
        public System.DateTimeOffset? BoughtAt { get; set; } = default!;

        /// <summary>
        /// Offer associated with the purchase.
        /// </summary>

        [JsonPropertyName("offer")]
        public Offer2? Offer { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundClaimType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
        AUTOMATIC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItem2
    {
        /// <summary>
        /// ID of the purchase for which a refund application will be created.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundDetailsReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINT")]
        COMPLAINT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_NOT_AVAILABLE")]
        PRODUCT_NOT_AVAILABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID_VALUE_TOO_LOW")]
        PAID_VALUE_TOO_LOW = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERPAID")]
        OVERPAID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_BY_BUYER")]
        CANCELLED_BY_BUYER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_COLLECTED")]
        NOT_COLLECTED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundDetailsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATED")]
        VALIDATED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATE_FAILED")]
        VALIDATE_FAILED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delivery2
    {

        [JsonPropertyName("value")]
        public RefundDeliveryValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overpaid2
    {

        [JsonPropertyName("value")]
        public RefundOverpaidValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalServices2
    {

        [JsonPropertyName("value")]
        public RefundAdditionalServicesValue? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundLineItemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AMOUNT")]
        AMOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY")]
        QUANTITY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value2
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rejection
    {
        /// <summary>
        /// Refund rejection code
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RejectionCode Code { get; set; } = default!;

        /// <summary>
        /// Refund rejection reason, required when code is REFUND_REJECTED
        /// </summary>

        [JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string? Reason { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerReturnRejectionCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_REJECTED")]
        REFUND_REJECTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_ITEM_SENT")]
        NEW_ITEM_SENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_FIXED")]
        ITEM_FIXED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_PART_SENT")]
        MISSING_PART_SENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalServicesGroupTranslationWrapperWithTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnPolicyAvailabilityRange
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESTRICTED")]
        RESTRICTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RestrictionCauseName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SEALED_MEDIA")]
        SEALED_MEDIA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE")]
        SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_ITEM")]
        CUSTOM_ITEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORT_SHELF_LIFE")]
        SHORT_SHELF_LIFE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INSEPARABLY_LINKED")]
        INSEPARABLY_LINKED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESS")]
        PRESS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDICINAL_PRODUCT")]
        MEDICINAL_PRODUCT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_RECORDED_DIGITAL_CONTENT")]
        NOT_RECORDED_DIGITAL_CONTENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_DEPENDENT_ON_FINANCIAL_MARKET")]
        VALUE_DEPENDENT_ON_FINANCIAL_MARKET = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnPolicyReturnCostCoveredBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Thresholds
    {

        [JsonPropertyName("orderValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderValue OrderValue { get; set; } = new OrderValue();

        [JsonPropertyName("discount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Discount Discount { get; set; } = new Discount();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class thresholds
    {

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Required]
        public Quantity2 Quantity { get; set; } = new Quantity2();

        [JsonPropertyName("discount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Discount2 Discount { get; set; } = new Discount2();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Configuration2
    {
        /// <summary>
        /// discount percentage
        /// </summary>

        [JsonPropertyName("percentage")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Percentage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trigger
    {
        /// <summary>
        /// For every pack of this quantity new rebate will be given.
        /// </summary>

        [JsonPropertyName("forEachQuantity")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double ForEachQuantity { get; set; } = default!;

        /// <summary>
        /// Describes how many offers in pack should be discounted by discount percentage.
        /// </summary>

        [JsonPropertyName("discountedNumber")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double DiscountedNumber { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parent
    {
        /// <summary>
        /// The ID of the parent category.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offers
    {
        /// <summary>
        /// Identifier of the offer.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// List of unfilled parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<Parameters>? Parameters { get; set; } = default!;

        /// <summary>
        /// Category of offer with unfilled parameters
        /// </summary>

        [JsonPropertyName("category")]
        public Category4? Category { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RedirectCategory
    {
        /// <summary>
        /// The ID of the category.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parent2
    {
        /// <summary>
        /// The ID of the parent category.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportedCategories
    {
        /// <summary>
        /// Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category.
        /// </summary>

        [JsonPropertyName("categoryId")]
        public string? CategoryId { get; set; } = default!;

        /// <summary>
        /// Name of supported category.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Type of the compatible item.
        /// </summary>

        [JsonPropertyName("itemsType")]
        public string? ItemsType { get; set; } = default!;

        /// <summary>
        /// Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;`TEXT` - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;`ID` - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get"&gt;compatible-products&lt;/a&gt; resource together with `itemsType` supported in particular category. &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>

        [JsonPropertyName("inputType")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public SupportedCategoriesInputType? InputType { get; set; } = default!;

        /// <summary>
        /// Additional information about constraints assigned to the category.
        /// </summary>

        [JsonPropertyName("validationRules")]
        public ValidationRules? ValidationRules { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Groups
    {
        /// <summary>
        /// Identifier of the group.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of the group.
        /// </summary>

        [JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Group
    {
        /// <summary>
        /// Identifier of the group.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes
    {
        /// <summary>
        /// Identifier of an attribute
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// List of attribute's values.
        /// </summary>

        [JsonPropertyName("values")]
        public ICollection<string>? Values { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class rules
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PriceAutomationRuleType Type { get; set; } = default!;

        /// <summary>
        /// The date the rule was last modified in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class rules2
    {

        [JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace3 Marketplace { get; set; } = new Marketplace3();

        [JsonPropertyName("rule")]
        [System.ComponentModel.DataAnnotations.Required]
        public Rule Rule { get; set; } = new Rule();

        /// <summary>
        /// The date the rule assignment to offer.marketplace was last modified in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set
    {

        [JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace4 Marketplace { get; set; } = new Marketplace4();

        [JsonPropertyName("rule")]
        [System.ComponentModel.DataAnnotations.Required]
        public Rule2 Rule { get; set; } = new Rule2();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Remove
    {

        [JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace5 Marketplace { get; set; } = new Marketplace5();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConstraintCriteriaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_SAME_QUANTITY")]
        COUNTRY_SAME_QUANTITY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_DELIVERY_SAME_QUANTITY")]
        COUNTRY_DELIVERY_SAME_QUANTITY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WholesalePriceList
    {
        /// <summary>
        /// Promotion id of a wholesale price list to assign to the offer or `null` to unassign wholesale price list from the offer.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ModificationPublicationDuration
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PT72H")]
        PT72H = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PT120H")]
        PT120H = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PT168H")]
        PT168H = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PT240H")]
        PT240H = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PT480H")]
        PT480H = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PT720H")]
        PT720H = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"P3D")]
        P3D = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"P5D")]
        P5D = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"P7D")]
        P7D = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"P10D")]
        P10D = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"P20D")]
        P20D = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"P30D")]
        P30D = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplaces
    {

        [JsonPropertyName("additional")]
        public Additional? Additional { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ModificationPaymentsInvoice
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_MARGIN")]
        VAT_MARGIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_VAT")]
        WITHOUT_VAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_INVOICE")]
        NO_INVOICE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous11
    {
        /// <summary>
        /// Id of attachment.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QuantityModificationChangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GAIN")]
        GAIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class offers
    {
        /// <summary>
        /// Offer id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// that many pieces of your offer will be part of the bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions
        /// </summary>

        [JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double? Quantity { get; set; } = default!;

        /// <summary>
        /// offers with this flag set to true will have a section that allows the users to purchase your bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions
        /// </summary>

        [JsonPropertyName("promotionEntryPoint")]
        public bool? PromotionEntryPoint { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SellerRebateOfferCriterionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS_OFFERS")]
        CONTAINS_OFFERS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFERS_ASSIGNED_EXTERNALLY")]
        OFFERS_ASSIGNED_EXTERNALLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_OFFERS")]
        ALL_OFFERS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferCriteriumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS_OFFERS")]
        CONTAINS_OFFERS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class offers2
    {
        /// <summary>
        /// Offer ID
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Offer title
        /// </summary>

        [JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = default!;

        /// <summary>
        /// Offer snapshot URL parameter pointing to historical offer view
        /// </summary>

        [JsonPropertyName("snapshot")]
        public string? Snapshot { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions
    {
        /// <summary>
        /// Indicates whether this parameter can have more than one value.
        /// </summary>

        [JsonPropertyName("multipleChoices")]
        public bool? MultipleChoices { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dictionary
    {
        /// <summary>
        /// The ID of the dictionary value. Use it to set the value in an offer or in a product.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The label of the dictionary value in Polish.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions2
    {
        /// <summary>
        /// The minimum value of this parameter. Lower than or equal to `max`.
        /// </summary>

        [JsonPropertyName("min")]
        public int? Min { get; set; } = default!;

        /// <summary>
        /// The maximum value of this parameter. Greater than or equal to `min`.
        /// </summary>

        [JsonPropertyName("max")]
        public int? Max { get; set; } = default!;

        /// <summary>
        /// Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
        /// </summary>

        [JsonPropertyName("range")]
        public bool? Range { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions3
    {
        /// <summary>
        /// The minimum value of this parameter. Lower than or equal to `max`.
        /// </summary>

        [JsonPropertyName("min")]
        public double? Min { get; set; } = default!;

        /// <summary>
        /// The maximum value of this parameter. Greater than or equal to `min`.
        /// </summary>

        [JsonPropertyName("max")]
        public double? Max { get; set; } = default!;

        /// <summary>
        /// Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
        /// </summary>

        [JsonPropertyName("range")]
        public bool? Range { get; set; } = default!;

        /// <summary>
        /// Number of digits you can provide after a comma that can be transferred in the parameter value.
        /// </summary>

        [JsonPropertyName("precision")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Precision { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions4
    {
        /// <summary>
        /// The minimum length of the parameter value.
        /// </summary>

        [JsonPropertyName("minLength")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MinLength { get; set; } = default!;

        /// <summary>
        /// The maximum length of the parameter value.
        /// </summary>

        [JsonPropertyName("maxLength")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxLength { get; set; } = default!;

        /// <summary>
        /// Indicates how many different values can be provided for this parameter.
        /// </summary>

        [JsonPropertyName("allowedNumberOfValues")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? AllowedNumberOfValues { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions5
    {
        /// <summary>
        /// Indicates whether this parameter can have more than one value.
        /// </summary>

        [JsonPropertyName("multipleChoices")]
        public bool? MultipleChoices { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class dictionary
    {
        /// <summary>
        /// The ID of the dictionary value. Use it to set the value in an offer or in a product.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The label of the dictionary value in Polish.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The IDs of dictionary values from another parameter that this parameter value can be combined with. The other parameter has the id from `options.dependsOnParameterId`. Empty if this parameter value can be combined with any value from other parameters. Otherwise, this value might be set in the offer only when one of the given values of `dependsOnValueIds` is set as well.
        /// </summary>

        [JsonPropertyName("dependsOnValueIds")]
        public ICollection<string>? DependsOnValueIds { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions6
    {
        /// <summary>
        /// The minimum value of this parameter. Lower than or equal to `max`.
        /// </summary>

        [JsonPropertyName("min")]
        public int? Min { get; set; } = default!;

        /// <summary>
        /// The maximum value of this parameter. Greater than or equal to `min`.
        /// </summary>

        [JsonPropertyName("max")]
        public int? Max { get; set; } = default!;

        /// <summary>
        /// Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
        /// </summary>

        [JsonPropertyName("range")]
        public bool? Range { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions7
    {
        /// <summary>
        /// The minimum value of this parameter. Lower than or equal to `max`.
        /// </summary>

        [JsonPropertyName("min")]
        public double? Min { get; set; } = default!;

        /// <summary>
        /// The maximum value of this parameter. Greater than or equal to `min`.
        /// </summary>

        [JsonPropertyName("max")]
        public double? Max { get; set; } = default!;

        /// <summary>
        /// Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
        /// </summary>

        [JsonPropertyName("range")]
        public bool? Range { get; set; } = default!;

        /// <summary>
        /// Number of digits you can provide after a comma that can be transferred in the parameter value.
        /// </summary>

        [JsonPropertyName("precision")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Precision { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Restrictions8
    {
        /// <summary>
        /// The minimum length of the parameter value.
        /// </summary>

        [JsonPropertyName("minLength")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MinLength { get; set; } = default!;

        /// <summary>
        /// The maximum length of the parameter value.
        /// </summary>

        [JsonPropertyName("maxLength")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxLength { get; set; } = default!;

        /// <summary>
        /// Indicates how many different values can be provided for this parameter.
        /// </summary>

        [JsonPropertyName("allowedNumberOfValues")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? AllowedNumberOfValues { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentsInvoice
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_MARGIN")]
        VAT_MARGIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_VAT")]
        WITHOUT_VAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_INVOICE")]
        NO_INVOICE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicationEndedBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATION")]
        EXPIRATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPTY_STOCK")]
        EMPTY_STOCK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DETACHMENT")]
        PRODUCT_DETACHMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatesDelivery
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatesDeliveryCost
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatesDescription
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatesService
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemovalRequestSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Request
    {
        /// <summary>
        /// Message containing explanation for removing rating.
        /// </summary>

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Message { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SellerRebateDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryMethod
    {
        /// <summary>
        /// ID of the delivery method
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaxPackageWeight
    {
        /// <summary>
        /// Weight value with an accuracy of three decimal places.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Weight unit. Currently only `KILOGRAM` is supported.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirstItemRate
    {
        /// <summary>
        /// Amount
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NextItemRate
    {
        /// <summary>
        /// Amount
        /// </summary>

        [JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingTime
    {
        /// <summary>
        /// ISO 8601 duration format, e.g. P3D for 3 days
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// ISO 8601 duration format, e.g. P3D for 3 days
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplace
    {
        /// <summary>
        /// Marketplace id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeDelivery
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. Currency code depends on marketplace, e.g. PLN for allegro-pl, CZK for allegro-cz.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbroadFreeDelivery
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. Currency code depends on marketplace, e.g. PLN for allegro-pl, CZK for allegro-cz.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JoinPolicy
    {
        /// <summary>
        /// Strategy used to calculate delivery cost for items from offers with different delivery costs.
        /// <br/>The possible values:
        /// <br/>  * `MAX` - The buyer will pay for the most expensive delivery
        /// <br/>  * `MIN` - The buyer will pay for the cheapest delivery
        /// <br/>  * `SUM` - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.
        /// </summary>

        [JsonPropertyName("strategy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public JoinPolicyStrategy Strategy { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomCost
    {
        /// <summary>
        /// If true the customer can enter a custom shipping cost.
        /// </summary>

        [JsonPropertyName("allowed")]
        public bool Allowed { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplace2
    {
        /// <summary>
        /// Marketplace id
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeDelivery2
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. The correct currency code for a given marketplace should be set, e.g. PLN for allegro-pl, CZK for allegro-cz.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbroadFreeDelivery2
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. The correct currency code for a given marketplace should be set, e.g. PLN for allegro-pl, CZK for allegro-cz.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JoinPolicy2
    {
        /// <summary>
        /// Strategy used to calculate delivery cost for items from offers with different delivery costs.
        /// <br/>The possible values:
        /// <br/>  * `MAX` - The buyer will pay for the most expensive delivery
        /// <br/>  * `MIN` - The buyer will pay for the cheapest delivery
        /// <br/>  * `SUM` - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.
        /// </summary>

        [JsonPropertyName("strategy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public JoinPolicy2Strategy Strategy { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomCost2
    {
        /// <summary>
        /// If true the customer can enter a custom shipping cost.
        /// </summary>

        [JsonPropertyName("allowed")]
        public bool Allowed { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WholesalePriceList2
    {
        /// <summary>
        /// Wholesale price list id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIR")]
        PAIR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotRecommended
    {
        /// <summary>
        /// Total number of negative feedbacks received.
        /// </summary>

        [JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Total { get; set; } = default!;

        /// <summary>
        /// Number of unique users.
        /// </summary>

        [JsonPropertyName("unique")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Unique { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recommended2
    {
        /// <summary>
        /// Total number of positive feedbacks received.
        /// </summary>

        [JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Total { get; set; } = default!;

        /// <summary>
        /// Number of unique users.
        /// </summary>

        [JsonPropertyName("unique")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Unique { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParametersForPreviewPriceCondition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USED")]
        USED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParametersForPreviewPriceDuration
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PT72H")]
        PT72H = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PT120H")]
        PT120H = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PT168H")]
        PT168H = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PT240H")]
        PT240H = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PT336H")]
        PT336H = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PT480H")]
        PT480H = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PT720H")]
        PT720H = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParametersForPreviewPriceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"shop")]
        Shop = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offer")]
        Offer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"advertisement")]
        Advertisement = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Publication_modificationAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATE")]
        ACTIVATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"END")]
        END = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferStockUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIR")]
        PAIR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferVendorId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHARYTATYWNI_ALLEGRO")]
        CHARYTATYWNI_ALLEGRO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO_LOKALNIE")]
        ALLEGRO_LOKALNIE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MORIZON")]
        MORIZON = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EBILET")]
        EBILET = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ListingResponseFiltersType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MULTI")]
        MULTI = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
        NUMERIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC_SINGLE")]
        NUMERIC_SINGLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication2
    {

        [JsonPropertyName("state")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public AdditionalMarketplacePublicationState? State { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellingMode2
    {
        /// <summary>
        /// The price of the offer on the given marketplace.
        /// </summary>

        [JsonPropertyName("price")]
        public PriceModificationFixedPriceHolder? Price { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stock2
    {
        /// <summary>
        /// The number of sold items in the last 30 days on the given marketplace.
        /// </summary>

        [JsonPropertyName("sold")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Sold { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemReconciliationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILLING")]
        BILLING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WALLET")]
        WALLET = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemVoucherType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTEBOOKS_FOR_TEACHERS")]
        NOTEBOOKS_FOR_TEACHERS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemVoucherStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value3 : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormDiscountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COUPON")]
        COUPON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPACK")]
        MULTIPACK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CROSSMULTIPACK")]
        CROSSMULTIPACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO_PRICES")]
        ALLEGRO_PRICES = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalToPay : PriceModificationFixedPriceHolder
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutFormsOrderInvoiceFileSecurityVerificationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisputeStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONGOING")]
        ONGOING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisputeMessagesStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELLER_REPLIED")]
        SELLER_REPLIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUYER_REPLIED")]
        BUYER_REPLIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO_ADVISOR_REPLIED")]
        ALLEGRO_ADVISOR_REPLIED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"END_REQUEST")]
        END_REQUEST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SinglePromotionCampaignResponseDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromotionCampaignResponseDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION")]
        VERIFICATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItems
    {
        /// <summary>
        /// Identifier of an order line item.
        /// </summary>

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NextPage
    {
        /// <summary>
        /// A "cursor" to the next set of results.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductImageProposalResolutionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductNameProposalResolutionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductCategoryProposalResolutionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductParameterValueProposalResolutionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product2
    {
        /// <summary>
        /// Product id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category2 : ProductCategory
    {
        /// <summary>
        /// A list of similar categories in which you can sell this product.
        /// </summary>

        [JsonPropertyName("similar")]
        public ICollection<Similar>? Similar { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Options
    {

        [JsonPropertyName("identifiesProduct")]
        public bool? IdentifiesProduct { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Options2
    {

        [JsonPropertyName("identifiesProduct")]
        public bool IdentifiesProduct { get; set; } = default!;

        [JsonPropertyName("isGTIN")]
        public bool? IsGTIN { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category3 : OfferCategoryRequest
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication3
    {

        [JsonPropertyName("duration")]
        public string Duration { get; set; } = default!;

        [JsonPropertyName("startingAt")]
        public System.DateTimeOffset StartingAt { get; set; } = default!;

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OfferStatus? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delivery3 : DeliveryProductOfferRequest
    {
        /// <summary>
        /// You can enter the shipping rates identifier or name.
        /// </summary>

        [JsonPropertyName("shippingRates")]
        public object? ShippingRates { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeTable2 : SizeTable
    {
        /// <summary>
        /// The name of the size table definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact2 : Contact
    {
        /// <summary>
        /// The name of the contact definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SaleProductOffersRequestStockUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIR")]
        PAIR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,

    }

    /// <summary>
    /// List of products sold in the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSet : ProductSetElement
    {
        /// <summary>
        /// The number of a given product included in a single offer sold as an element of a product set. &lt;small&gt;**Note:** For number of sets available in stock, use `stock.available` property.&lt;/small&gt;
        /// </summary>

        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get; set; } = default!;

        /// <summary>
        /// Reference to the responsible person configured using &lt;a href="https://developer.allegro.pl/documentation#tag/Responsible-persons"&gt;Responsible Persons API&lt;/a&gt;. Provide either id or name - id will be used if both are provided. Setting this object to null will result in no responsible person assigned to this product.&lt;br/&gt; &lt;b&gt;This property is valid only for the first product in the product set.&lt;/b&gt;
        /// </summary>

        [JsonPropertyName("responsiblePerson")]
        public ResponsiblePerson? ResponsiblePerson { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delivery4 : DeliveryProductOfferRequest
    {
        /// <summary>
        /// Shipment date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("shipmentDate")]
        public System.DateTimeOffset? ShipmentDate { get; set; } = default!;

        /// <summary>
        /// You should enter the shipping rates identifier or name.
        /// </summary>

        [JsonPropertyName("shippingRates")]
        public object? ShippingRates { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of products sold in the offer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class productSet : ProductSetElement
    {
        /// <summary>
        /// The number of a given product included in a single offer sold as an element of a product set. &lt;small&gt;**Note:** For number of sets available in stock, use `stock.available` property.&lt;/small&gt;
        /// </summary>

        [JsonPropertyName("quantity")]
        public Quantity? Quantity { get; set; } = default!;

        /// <summary>
        /// Reference to the responsible person configured using &lt;a href="https://developer.allegro.pl/documentation#tag/Responsible-persons"&gt;Responsible Persons API&lt;/a&gt;. Provide either id or name - id will be used if both are provided. Setting this object to null will result in no responsible person assigned to this product.&lt;br/&gt; &lt;b&gt;This property is valid only for the first product in the product set.&lt;/b&gt;
        /// </summary>

        [JsonPropertyName("responsiblePerson")]
        public ResponsiblePerson? ResponsiblePerson { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delivery5 : DeliveryProductOfferRequest
    {
        /// <summary>
        /// Shipment date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        /// </summary>

        [JsonPropertyName("shipmentDate")]
        public System.DateTimeOffset? ShipmentDate { get; set; } = default!;

        /// <summary>
        /// You should enter the shipping rates identifier or name.
        /// </summary>

        [JsonPropertyName("shippingRates")]
        public object? ShippingRates { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class productSet2 : ProductSetElementQuantity
    {

        [JsonPropertyName("product")]
        public Product3? Product { get; set; } = default!;

        /// <summary>
        /// Reference to the responsible person configured using &lt;a href="https://developer.allegro.pl/documentation#tag/Responsible-persons"&gt;Responsible Persons API&lt;/a&gt;.
        /// </summary>

        [JsonPropertyName("responsiblePerson")]
        public ResponsiblePerson2? ResponsiblePerson { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation
    {
        /// <summary>
        /// The unique operation identifier (UUID).
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Status of the operation.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public OperationStatus? Status { get; set; } = default!;

        /// <summary>
        /// The starting date and time of operation.
        /// </summary>

        [JsonPropertyName("startedAt")]
        public string? StartedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductOfferBaseIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GTIN")]
        GTIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MPN")]
        MPN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quantity
    {

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePerson
    {
        /// <summary>
        /// Identifier of a responsible person.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of a responsible person. Note that this references name of the person object, not the name in their personal data section.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication4
    {
        /// <summary>
        /// The publication status of the submitted product:
        /// <br/> - `PROPOSED` - we created new product proposal and assigned it to an offer
        /// <br/> - `LISTED` - we identified the product in our database and assigned it to an offer
        /// <br/> - `NOT_LISTED` - we didn’t create a new product proposal and didn’t assign any product from our database to an offer
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Publication4Status? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImpliedWarranty2 : ImpliedWarranty
    {
        /// <summary>
        /// The name of the implied warranty definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnPolicy2 : ReturnPolicy
    {
        /// <summary>
        /// The name of the return policy definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Warranty2 : Warranty
    {
        /// <summary>
        /// The name of the warranty definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingRates2 : JustId
    {
        /// <summary>
        /// The name of the shipping rate.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WholesalePriceList3
    {
        /// <summary>
        /// Wholesale price list id
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The name of the wholesale price list definition.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassifiedPackageConfigType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASE")]
        BASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA")]
        EXTRA = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BaseOperationGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INCOME")]
        INCOME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTCOME")]
        OUTCOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKADES")]
        BLOCKADES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WalletPaymentOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WalletType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseMarketplace
    {
        /// <summary>
        /// Base marketplace identifier
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Auction
    {

        [JsonPropertyName("currentPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder CurrentPrice { get; set; } = new PriceModificationFixedPriceHolder();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalMarketplacesVisibilityStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED")]
        REFUSED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous12
    {
        /// <summary>
        /// Refusal reason code.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Refusal reason parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public IDictionary<string, ICollection<string>>? Parameters { get; set; } = default!;

        /// <summary>
        /// Related refusal reasons.
        /// </summary>

        [JsonPropertyName("relatedReasons")]
        public ICollection<RelatedReason>? RelatedReasons { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous13
    {
        /// <summary>
        /// Refusal reason code.
        /// </summary>

        [JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Refusal reason parameters.
        /// </summary>

        [JsonPropertyName("parameters")]
        public IDictionary<string, ICollection<string>>? Parameters { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Publication5
    {
        /// <summary>
        /// Indicates the reason for ending the offer:
        /// <br/> - `USER` - offer ended by the seller.
        /// <br/> - `ADMIN` - offer ended by an admin.
        /// <br/> - `EXPIRATION` - offer duration had expired (valid for offers with specified duration).
        /// <br/> - `EMPTY_STOCK` - offer ended because all available items had been sold out.
        /// <br/> - `PRODUCT_DETACHMENT` - offer ended because its link to the product was removed. Status will only occur
        /// <br/>   if the base marketplace of offer requires full productization.
        /// <br/> - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
        /// <br/>   success status, but further processing failed.
        /// <br/> - `UNKNOWN` - in rare cases the reason might be unknown.
        /// </summary>

        [JsonPropertyName("endedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Publication5EndedBy EndedBy { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgeCampaignType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DISCOUNT")]
        DISCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SOURCING")]
        SOURCING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationTimePolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VisibilityTimePolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicationTimePolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgePublicationTimePolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Process
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ProcessStatus? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Prices
    {

        [JsonPropertyName("bargain")]
        public Bargain? Bargain { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgeApplicationProcessStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED")]
        PROCESSED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgeProcessStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_VERIFICATION")]
        IN_VERIFICATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PUBLICATION")]
        WAITING_FOR_PUBLICATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgeOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FINISH")]
        FINISH = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BadgeOperationProcessStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED")]
        PROCESSED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScoreDistribution
    {
        /// <summary>
        /// Identifier of score: 5, 4, 3, 2, 1.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Count of score.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SizeFeedback
    {
        /// <summary>
        /// Identifier of sizeFeedback: BIGGER, FIT, SMALLER.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Count of sizeFeedback responses.
        /// </summary>

        [JsonPropertyName("count")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Count { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryServiceOwner
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO")]
        ALLEGRO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelCreationParametersType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label
    {

        [JsonPropertyName("sender")]
        public Sender? Sender { get; set; } = default!;

        /// <summary>
        /// Label file format.
        /// </summary>

        [JsonPropertyName("fileFormat")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public LabelFileFormat? FileFormat { get; set; } = default!;

        /// <summary>
        /// Parcel identifier in own system. Example: `your_ordering_number`.
        /// </summary>

        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {

        [JsonPropertyName("height")]
        public DimensionItem? Height { get; set; } = default!;

        [JsonPropertyName("width")]
        public DimensionItem? Width { get; set; } = default!;

        [JsonPropertyName("depth")]
        public DimensionItem? Depth { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// Weight value, provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Weight unit. Currently only `KILOGRAM` is accepted.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = "KILOGRAM";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value4
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. Currently only PLN is available.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelItemDetailsWithWaybillType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions2
    {

        [JsonPropertyName("height")]
        public DimensionItem? Height { get; set; } = default!;

        [JsonPropertyName("width")]
        public DimensionItem? Width { get; set; } = default!;

        [JsonPropertyName("depth")]
        public DimensionItem? Depth { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight2
    {
        /// <summary>
        /// Weight value, provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// Weight unit. Currently only `KILOGRAM` is accepted.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = "KILOGRAM";

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value5
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code. E.g. PLN, CZK, EUR...
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelItemDetailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelDetailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label2
    {

        [JsonPropertyName("sender")]
        public Sender? Sender { get; set; } = default!;

        /// <summary>
        /// Label file format.
        /// </summary>

        [JsonPropertyName("fileFormat")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Label2FileFormat? FileFormat { get; set; } = default!;

        /// <summary>
        /// Parcel identifier in own system. Example: `Ordering number`.
        /// </summary>

        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelDetailsState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CashOnDelivery
    {
        /// <summary>
        /// Postpaid value.
        /// </summary>

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public Value6 Value { get; set; } = new Value6();

        /// <summary>
        /// Bank account number.
        /// </summary>

        [JsonPropertyName("accountNumber")]
        public string? AccountNumber { get; set; } = default!;

        /// <summary>
        /// Bank account owner.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Postpaid Express service. Postpaid value is send to parcel sender in one business day after delivery.
        /// </summary>

        [JsonPropertyName("express")]
        public bool? Express { get; set; } = false;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromoOptionsModificationModificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE")]
        CHANGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_WITH_END_OF_CYCLE")]
        REMOVE_WITH_END_OF_CYCLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_NOW")]
        REMOVE_NOW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromoOptionsModificationPackageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASE")]
        BASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA")]
        EXTRA = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromoOptionsCommandModificationModificationTime
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOW")]
        NOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OF_CYCLE")]
        END_OF_CYCLE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PromoModificationTaskStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPickupDropOffPointType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUDO")]
        PUDO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APM")]
        APM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Services
    {
        /// <summary>
        /// Set of values can be extended.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ServicesType Type { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class restrictions
    {
        /// <summary>
        /// Set of values can be extended.
        /// </summary>

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public RestrictionsType Type { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments
    {

        [JsonPropertyName("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PaymentsMethod Method { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address2
    {
        /// <summary>
        /// Postal code
        /// </summary>

        [JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; } = default!;

        /// <summary>
        /// City name
        /// </summary>

        [JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        /// <summary>
        /// Street
        /// </summary>

        [JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; } = default!;

        /// <summary>
        /// Country code
        /// </summary>

        [JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        [JsonPropertyName("coordinates")]
        [System.ComponentModel.DataAnnotations.Required]
        public Coordinates Coordinates { get; set; } = new Coordinates();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Opening
    {
        /// <summary>
        /// Day of week (ISO 8601).
        /// </summary>

        [JsonPropertyName("dayOfWeek")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DayOfWeek { get; set; } = default!;

        /// <summary>
        /// Start hour.
        /// </summary>

        [JsonPropertyName("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; } = default!;

        /// <summary>
        /// End hour.
        /// </summary>

        [JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingDetails
    {
        /// <summary>
        /// List of parcel shipping statuses
        /// </summary>

        [JsonPropertyName("statuses")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<AllegroParcelTrackingStatus> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<AllegroParcelTrackingStatus>();

        /// <summary>
        /// The start time parcel tracking recording in ISO 8601 format
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        /// <summary>
        /// Time of registration of the last shipment status change in ISO 8601 format
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingDetails2
    {
        /// <summary>
        /// List of parcel shipping statuses
        /// </summary>

        [JsonPropertyName("statuses")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ParcelTrackingStatus> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<ParcelTrackingStatus>();

        /// <summary>
        /// The start time parcel tracking recording in ISO 8601 format
        /// </summary>

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        /// <summary>
        /// Time of registration of the last shipment status change in ISO 8601 format
        /// </summary>

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroParcelTrackingStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FOR_PICKUP")]
        AVAILABLE_FOR_PICKUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUE")]
        ISSUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTICE_LEFT")]
        NOTICE_LEFT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RELEASED_FOR_DELIVERY")]
        RELEASED_FOR_DELIVERY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParcelTrackingStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FOR_PICKUP")]
        AVAILABLE_FOR_PICKUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUE")]
        ISSUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTICE_LEFT")]
        NOTICE_LEFT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RELEASED_FOR_DELIVERY")]
        RELEASED_FOR_DELIVERY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rate
    {
        /// <summary>
        /// A unique identifier of a rate. Use this value to set a VAT tax rate in your offer.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// A human-readable name for a rate.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subject2
    {
        /// <summary>
        /// A unique identifier of a subject. Use this value to set a taxation subject in your offer.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// A human-readable name for a subject.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exemption
    {
        /// <summary>
        /// A unique identifier of an exemption. Use this value to set an taxation exemption in your offer.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// A human-readable name for an exemption.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesAccountChangeRequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous14
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Status2? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesAccountConsentChangeResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesOfferChangeRequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous15
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Status3? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesOfferConsentChangeResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous16
    {

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Status4? Status { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesEligibilityResponseConsent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous17
    {

        [JsonPropertyName("consent")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public Consent? Consent { get; set; } = default!;

        [JsonPropertyName("qualification")]
        public AllegroPricesQualificationResponse? Qualification { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllegroPricesQualificationResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"QUALIFIED")]
        QUALIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISQUALIFIED")]
        DISQUALIFIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageAttachmentInfoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAFE")]
        SAFE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSAFE")]
        UNSAFE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFYING")]
        VERIFYING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED")]
        BLOCKED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERED")]
        DELIVERED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERACTING")]
        INTERACTING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DISMISSED")]
        DISMISSED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASK_QUESTION")]
        ASK_QUESTION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIL")]
        MAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_CENTER")]
        MESSAGE_CENTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageToSellerSettingsMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONAL")]
        OPTIONAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HIDDEN")]
        HIDDEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classification
    {
        /// <summary>
        /// Indicates whether that particular offer is currently Smart!
        /// </summary>

        [JsonPropertyName("fulfilled")]
        public bool? Fulfilled { get; set; } = default!;

        /// <summary>
        /// Date of the most recent status change
        /// </summary>

        [JsonPropertyName("lastChanged")]
        public System.DateTimeOffset? LastChanged { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Conditions
    {
        /// <summary>
        /// Technical condition name
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Condition name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Brief condition description, might contain useful instructions to help making that particular condition pass
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Indicates whether this condition is met
        /// </summary>

        [JsonPropertyName("fulfilled")]
        public bool? Fulfilled { get; set; } = default!;

        /// <summary>
        /// Set of delivery methods that meet this condition. May be null if the condition does not apply to delivery methods.
        /// </summary>

        [JsonPropertyName("passedDeliveryMethods")]
        public ICollection<DeliveryMethodId>? PassedDeliveryMethods { get; set; } = default!;

        /// <summary>
        /// Set of delivery methods that fail to meet this condition. May be null if the condition does not apply to delivery methods.
        /// </summary>

        [JsonPropertyName("failedDeliveryMethods")]
        public ICollection<DeliveryMethodId>? FailedDeliveryMethods { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classification2
    {
        /// <summary>
        /// Indicates whether that user is currently Smart!
        /// </summary>

        [JsonPropertyName("fulfilled")]
        public bool? Fulfilled { get; set; } = default!;

        /// <summary>
        /// Date of the most recent status change
        /// </summary>

        [JsonPropertyName("lastChanged")]
        public System.DateTimeOffset? LastChanged { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class conditions
    {
        /// <summary>
        /// Technical condition name
        /// </summary>

        [JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Condition name
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Brief condition description, might contain useful instructions to help making that particular condition pass
        /// </summary>

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Value of related user attribute that this condition tests. Has to be greater that threshold if present.
        /// </summary>

        [JsonPropertyName("value")]
        public double? Value { get; set; } = default!;

        /// <summary>
        /// Minimum required `value` of related user attribute.
        /// </summary>

        [JsonPropertyName("threshold")]
        public double? Threshold { get; set; } = default!;

        /// <summary>
        /// Indicates whether this condition is met
        /// </summary>

        [JsonPropertyName("fulfilled")]
        public bool? Fulfilled { get; set; } = default!;

        /// <summary>
        /// Indicates whether this condition is required to obtain Smart! status. Please note that certain conditions may be required (or not) based on result of checking other conditions.
        /// </summary>

        [JsonPropertyName("required")]
        public bool? Required { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels2
    {
        /// <summary>
        /// URL to download file with created labels.
        /// </summary>

        [JsonPropertyName("fileUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileUrl { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockStorageFeeStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_APPLICABLE")]
        NOT_APPLICABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDED_IN_SERVICE_PRICE")]
        INCLUDED_IN_SERVICE_PRICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGED")]
        CHARGED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PREDICTION")]
        PREDICTION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        /// <summary>
        /// Predicted date when the fee will be charged based on quantity and average sales. Only present in case of PREDICTION status, null otherwise.
        /// </summary>

        [JsonPropertyName("feePayableAt")]
        public string? FeePayableAt { get; set; } = default!;

        /// <summary>
        /// Number of items, for which storage fee was charged. For example seller might have 20 items in total, but only 3 of them are stored longer than free storage period, so the fee is applied only for them.
        /// </summary>

        [JsonPropertyName("chargedItemsQuantity")]
        public double? ChargedItemsQuantity { get; set; } = default!;

        /// <summary>
        /// Total gross amount of the charged fee.
        /// </summary>

        [JsonPropertyName("amountGross")]
        public double? AmountGross { get; set; } = default!;

        /// <summary>
        /// Currency in which the fee was charged.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReserveInfoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ENOUGH_DATA")]
        NOT_ENOUGH_DATA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW_STOCK")]
        LOW_STOCK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NORMAL")]
        NORMAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCESS_ONE_YEAR")]
        EXCESS_ONE_YEAR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReceivingStateStage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReceivingStatusReceivedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELLABLE")]
        SELLABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE")]
        DAMAGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
        REJECT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReceivingStatusReasonCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELLABLE")]
        SELLABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGED_PRODUCT")]
        DAMAGED_PRODUCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGED_IN_TRANSPORT")]
        DAMAGED_IN_TRANSPORT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORT_EXPIRY_DATE")]
        SHORT_EXPIRY_DATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_BARCODE")]
        NO_BARCODE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_FULFILLMENT_CATEGORY")]
        NOT_IN_FULFILLMENT_CATEGORY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_NOT_ACCEPTABLE_IN_FULFILLMENT")]
        PRODUCT_NOT_ACCEPTABLE_IN_FULFILLMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UNACCEPTABLE_PRODUCT_VARIANT")]
        UNACCEPTABLE_PRODUCT_VARIANT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UNACCEPTABLE_PRODUCT_SIZE")]
        UNACCEPTABLE_PRODUCT_SIZE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN_DAMAGE")]
        UNKNOWN_DAMAGE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN_REJECT")]
        UNKNOWN_REJECT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSCANNABLE_BARCODE")]
        UNSCANNABLE_BARCODE = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Languages
    {
        /// <summary>
        /// Languages in which you can create offer
        /// </summary>

        [JsonPropertyName("offerCreation")]
        public ICollection<MarketplaceItemLanguage>? OfferCreation { get; set; } = default!;

        /// <summary>
        /// Languages in which buyer can see the offer
        /// </summary>

        [JsonPropertyName("offerDisplay")]
        public ICollection<MarketplaceItemLanguage>? OfferDisplay { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Currencies
    {
        /// <summary>
        /// Base currency for that marketplace
        /// </summary>

        [JsonPropertyName("base")]
        public MarketplaceItemCurrency? Base { get; set; } = default!;

        /// <summary>
        /// List of other currencies available for that marketplace
        /// </summary>

        [JsonPropertyName("additional")]
        public ICollection<MarketplaceItemCurrency>? Additional { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentCreateRequestDtoLabelFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL")]
        ZPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL")]
        EPL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelRequestDtoPageSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A6")]
        A6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageDtoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentDtoLabelFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL")]
        ZPL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL")]
        EPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateShipmentCommandStatusDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CancelShipmentCommandStatusDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreatePickupCommandStatusDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CashOnDeliveryLimitDtoPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MONEY_TRANSFER")]
        MONEY_TRANSFER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WALLET_TRANSFER")]
        WALLET_TRANSFER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryServiceDtoOwner
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLEGRO")]
        ALLEGRO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT")]
        CLIENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOX")]
        DOX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightValueUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KILOGRAMS")]
        KILOGRAMS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionValueUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CENTIMETER")]
        CENTIMETER = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalData
    {
        /// <summary>
        /// Name of responsible person.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Responsible person address.
        /// </summary>

        [JsonPropertyName("address")]
        public Address3? Address { get; set; } = default!;

        /// <summary>
        /// Contact to responsible person.
        /// </summary>

        [JsonPropertyName("contact")]
        public Contact3? Contact { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalData2
    {
        /// <summary>
        /// Name of responsible person.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("address")]
        public ResponsiblePersonAddress? Address { get; set; } = default!;

        [JsonPropertyName("contact")]
        public ResponsiblePersonContact? Contact { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalData3
    {
        /// <summary>
        /// Name of responsible person.
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Name { get; set; } = default!;

        [JsonPropertyName("address")]
        public ResponsiblePersonAddress? Address { get; set; } = default!;

        [JsonPropertyName("contact")]
        public ResponsiblePersonContact? Contact { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponsiblePersonAddressCountryCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class shippingRates
    {
        /// <summary>
        /// Shipping rate ID
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// User defined name of the shipping rates set
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryMethods
    {
        /// <summary>
        /// Delivery method id.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Delivery method name. Please note that only method ids are unique, not method names. For duplicate names, check the marketplaces, paymentPolicy and allegroEndorsed properties as well.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// List of marketplace ids where this delivery method is available for buyers.
        /// </summary>

        [JsonPropertyName("marketplaces")]
        public ICollection<string>? Marketplaces { get; set; } = default!;

        /// <summary>
        /// Whether the payment is to be collected in advance or on delivery.
        /// </summary>

        [JsonPropertyName("paymentPolicy")]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public DeliveryMethodsPaymentPolicy? PaymentPolicy { get; set; } = default!;

        /// <summary>
        /// Indicates Allegro signed delivery method, which allows to easily distinguish similar delivery methods with various restrictions, e.g. Allegro Paczkomaty 24/7 InPost from Paczkomaty 24/7.
        /// </summary>

        [JsonPropertyName("allegroEndorsed")]
        public bool? AllegroEndorsed { get; set; } = default!;

        /// <summary>
        /// Rules for the delivery method, i.e. price, quantity, shipping time, etc.
        /// </summary>

        [JsonPropertyName("shippingRatesConstraints")]
        public ShippingRatesConstraints? ShippingRatesConstraints { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response49Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response64Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_SUCCESS")]
        PARTIAL_SUCCESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response79Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offer2
    {
        /// <summary>
        /// ID of the offer associated with the purchase.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Name of the offer associated with the purchase.
        /// </summary>

        [JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RejectionCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_REJECTED")]
        REFUND_REJECTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_ITEM_SENT")]
        NEW_ITEM_SENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_FIXED")]
        ITEM_FIXED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_PART_SENT")]
        MISSING_PART_SENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderValue
    {

        [JsonPropertyName("lowerBound")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder LowerBound { get; set; } = new PriceModificationFixedPriceHolder();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Discount
    {
        /// <summary>
        /// Discount percentage applied when the threshold is applied. The fractional part must be equal to 0.
        /// </summary>

        [JsonPropertyName("percentage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Percentage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quantity2
    {
        /// <summary>
        /// Minimum number of units of an offer for which the threshold is applicable.
        /// </summary>

        [JsonPropertyName("lowerBound")]
        [System.ComponentModel.DataAnnotations.Range(2D, 100000D)]
        public double LowerBound { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Discount2
    {
        /// <summary>
        /// Discount percentage applied when the threshold is applied. The fractional part must be equal to 0.
        /// </summary>

        [JsonPropertyName("percentage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Percentage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameters
    {
        /// <summary>
        /// Parameter identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category4
    {
        /// <summary>
        /// Category identifier.
        /// </summary>

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SupportedCategoriesInputType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationRules
    {
        /// <summary>
        /// Maximum number of items allowed on compatibility list.
        /// </summary>

        [JsonPropertyName("maxRows")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxRows { get; set; } = default!;

        /// <summary>
        /// Maximum length of single item on the list.
        /// </summary>

        [JsonPropertyName("maxCharactersPerLine")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? MaxCharactersPerLine { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplace3
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rule
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public PriceAutomationRuleType Type { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplace4
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rule2
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Marketplace5
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Additional
    {
        /// <summary>
        /// List of the marketplace identifiers which should be added to additional marketplaces in offer
        /// </summary>

        [JsonPropertyName("add")]
        public ICollection<MarketplaceReference>? Add { get; set; } = default!;

        /// <summary>
        /// List of the marketplace identifiers which should be removed from additional marketplaces in offer
        /// </summary>

        [JsonPropertyName("remove")]
        public ICollection<MarketplaceReference>? Remove { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JoinPolicyStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MIN")]
        MIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX")]
        MAX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM")]
        SUM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JoinPolicy2Strategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MIN")]
        MIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX")]
        MAX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM")]
        SUM = 2,

    }

    /// <summary>
    /// Category in which the product can be listed for sale
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Similar : Category
    {

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product3 : ProductOfferResponse
    {
        /// <summary>
        /// Product parameters in the offer.
        /// </summary>

        [JsonPropertyName("parameters")]
        public ICollection<ParameterProductOfferResponse>? Parameters { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePerson2
    {

        [JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Publication4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROPOSED")]
        PROPOSED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LISTED")]
        LISTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_LISTED")]
        NOT_LISTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Publication5EndedBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATION")]
        EXPIRATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPTY_STOCK")]
        EMPTY_STOCK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DETACHMENT")]
        PRODUCT_DETACHMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bargain
    {

        [JsonPropertyName("value")]
        public BadgeApplicationBargainPrice? Value { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelFileFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL")]
        ZPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL")]
        EPL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Label2FileFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL")]
        ZPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL")]
        EPL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value6
    {
        /// <summary>
        /// The amount provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>

        [JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServicesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP")]
        PICKUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPOFF")]
        DROPOFF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RestrictionsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OVERLOADED")]
        OVERLOADED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentsMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD")]
        CARD = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Consent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOWED")]
        ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address3
    {
        /// <summary>
        /// Code of responsible person country (ISO 3166).
        /// </summary>

        [JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// Street and number.
        /// </summary>

        [JsonPropertyName("street")]
        public string? Street { get; set; } = default!;

        /// <summary>
        /// Postal code.
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// City.
        /// </summary>

        [JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact3
    {
        /// <summary>
        /// Email of responsible person.
        /// </summary>

        [JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Phone number of responsible person.
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeliveryMethodsPaymentPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_ADVANCE")]
        IN_ADVANCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_ON_DELIVERY")]
        CASH_ON_DELIVERY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingRatesConstraints
    {
        /// <summary>
        /// Indicates whether delivery method can be used when adding or modifying shipping rates.
        /// </summary>

        [JsonPropertyName("allowed")]
        public bool? Allowed { get; set; } = default!;

        /// <summary>
        /// Rules for the quantity per parcel.
        /// </summary>

        [JsonPropertyName("maxQuantityPerPackage")]
        public MaxQuantityPerPackage? MaxQuantityPerPackage { get; set; } = default!;

        /// <summary>
        /// Rules for the maximum weight of a package.
        /// </summary>

        [JsonPropertyName("maxPackageWeight")]
        public MaxPackageWeight2? MaxPackageWeight { get; set; } = default!;

        /// <summary>
        /// Rules for the shipping cost for the first item in the parcel.
        /// </summary>

        [JsonPropertyName("firstItemRate")]
        public FirstItemRate2? FirstItemRate { get; set; } = default!;

        /// <summary>
        /// Rules for the shipping cost of another item in the parcel.
        /// </summary>

        [JsonPropertyName("nextItemRate")]
        public NextItemRate2? NextItemRate { get; set; } = default!;

        /// <summary>
        /// Rules for the shipping time.
        /// </summary>

        [JsonPropertyName("shippingTime")]
        public ShippingTime2? ShippingTime { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaxQuantityPerPackage
    {
        /// <summary>
        /// Upper limit for quantity per package.
        /// </summary>

        [JsonPropertyName("max")]
        [System.ComponentModel.DataAnnotations.Range(1, 999999)]
        public int? Max { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaxPackageWeight2
    {
        /// <summary>
        /// Indicates whether the maximum package weight can be set in shipping rates for the delivery method.
        /// </summary>

        [JsonPropertyName("supported")]
        public bool? Supported { get; set; } = default!;

        /// <summary>
        /// Lower limit for the maximum package weight, provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("min")]
        public string? Min { get; set; } = default!;

        /// <summary>
        /// Upper limit for the maximum package weight, provided in a string format to avoid rounding errors.
        /// </summary>

        [JsonPropertyName("max")]
        public string? Max { get; set; } = default!;

        /// <summary>
        /// Weight unit. Currently only `KILOGRAM` is supported.
        /// </summary>

        [JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirstItemRate2
    {
        /// <summary>
        /// Lower limit for the rate.
        /// </summary>

        [JsonPropertyName("min")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Min { get; set; } = default!;

        /// <summary>
        /// Upper limit for the rate.
        /// </summary>

        [JsonPropertyName("max")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Max { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NextItemRate2
    {
        /// <summary>
        /// Lower limit for the rate.
        /// </summary>

        [JsonPropertyName("min")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Min { get; set; } = default!;

        /// <summary>
        /// Upper limit for the rate.
        /// </summary>

        [JsonPropertyName("max")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Max { get; set; } = default!;

        /// <summary>
        /// ISO 4217 currency code.
        /// </summary>

        [JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingTime2
    {
        /// <summary>
        /// Default shipping time.
        /// </summary>

        [JsonPropertyName("default")]
        public Default? Default { get; set; } = default!;

        /// <summary>
        /// Indicates if custom shipping time can be set when adding or modifying shipping rates.
        /// </summary>

        [JsonPropertyName("customizable")]
        public bool? Customizable { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Default
    {
        /// <summary>
        /// ISO 8601 duration format.
        /// </summary>

        [JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// ISO 8601 duration format.
        /// </summary>

        [JsonPropertyName("to")]
        public string? To { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class JsonInheritanceConverterAttribute : JsonConverterAttribute
    {
        public string DiscriminatorName { get; }

        public JsonInheritanceConverterAttribute(System.Type baseType, string discriminatorName = "discriminator")
            : base(typeof(JsonInheritanceConverter<>).MakeGenericType(baseType))
        {
            DiscriminatorName = discriminatorName;
        }
    }

    public class JsonInheritanceConverter<TBase> : JsonConverter<TBase>
    {
        private readonly string _discriminatorName;

        public JsonInheritanceConverter()
        {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<JsonInheritanceConverterAttribute>(typeof(TBase));
            _discriminatorName = attribute?.DiscriminatorName ?? "discriminator";
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override TBase Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            var hasDiscriminator = document.RootElement.TryGetProperty(_discriminatorName, out var discriminator);
            var subtype = GetDiscriminatorType(document.RootElement, typeToConvert, hasDiscriminator ? discriminator.GetString() : null);

            var bufferWriter = new System.IO.MemoryStream();
            using (var writer = new System.Text.Json.Utf8JsonWriter(bufferWriter))
            {
                document.RootElement.WriteTo(writer);
            }

            return (TBase)System.Text.Json.JsonSerializer.Deserialize(bufferWriter.ToArray(), subtype, options);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, TBase value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WriteString(_discriminatorName, GetDiscriminatorValue(value.GetType()));

            var bytes = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes((object)value, options);
            var document = System.Text.Json.JsonDocument.Parse(bytes);
            foreach (var property in document.RootElement.EnumerateObject())
            {
                property.WriteTo(writer);
            }

            writer.WriteEndObject();
        }

        public string GetDiscriminatorValue(System.Type type)
        {
            var jsonInheritanceAttributeDiscriminator = GetSubtypeDiscriminator(type);
            if (jsonInheritanceAttributeDiscriminator != null)
            {
                return jsonInheritanceAttributeDiscriminator;
            }

            return type.Name;
        }

        protected System.Type GetDiscriminatorType(System.Text.Json.JsonElement jObject, System.Type objectType, string discriminatorValue)
        {
            var jsonInheritanceAttributeSubtype = GetObjectSubtype(objectType, discriminatorValue);
            if (jsonInheritanceAttributeSubtype != null)
            {
                return jsonInheritanceAttributeSubtype;
            }

            if (objectType.Name == discriminatorValue)
            {
                return objectType;
            }

            var typeName = objectType.Namespace + "." + discriminatorValue;
            var subtype = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
            if (subtype != null)
            {
                return subtype;
            }

            throw new System.InvalidOperationException("Could not find subtype of '" + objectType.Name + "' with discriminator '" + discriminatorValue + "'.");
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
